{
  "version": 3,
  "sources": ["../../src/runtime/index.js"],
  "sourcesContent": ["// flux-core/src/runtime/index.js\n// Core runtime system for Flux applications\n\n// Environment detection\nconst isNode = typeof process !== 'undefined' && process.versions && process.versions.node;\nconst isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined';\nconst isWorker = typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope;\n\n// Global context\nconst globalContext = isNode ? global : (isBrowser ? window : self);\n\n// Performance monitoring\nclass PerformanceMonitor {\n  constructor() {\n    this.metrics = new Map();\n    this.startTime = Date.now();\n  }\n\n  startTimer(name) {\n    this.metrics.set(name, { start: performance.now() || Date.now() });\n  }\n\n  endTimer(name) {\n    const metric = this.metrics.get(name);\n    if (metric) {\n      metric.duration = (performance.now() || Date.now()) - metric.start;\n      metric.end = performance.now() || Date.now();\n    }\n  }\n\n  getMetrics() {\n    return Object.fromEntries(this.metrics);\n  }\n\n  reset() {\n    this.metrics.clear();\n    this.startTime = Date.now();\n  }\n}\n\n// Advanced error handling\nclass FluxError extends Error {\n  constructor(message, code, details = {}) {\n    super(message);\n    this.name = 'FluxError';\n    this.code = code;\n    this.details = details;\n    this.timestamp = new Date();\n    this.stack = this.stack || new Error().stack;\n  }\n}\n\n// Memory management and garbage collection\nclass MemoryManager {\n  constructor() {\n    this.allocations = new Map();\n    this.maxMemory = 100 * 1024 * 1024; // 100MB default\n    this.currentMemory = 0;\n  }\n\n  allocate(id, size, type) {\n    this.allocations.set(id, { size, type, timestamp: Date.now() });\n    this.currentMemory += size;\n    \n    if (this.currentMemory > this.maxMemory) {\n      this.garbageCollect();\n    }\n  }\n\n  deallocate(id) {\n    const allocation = this.allocations.get(id);\n    if (allocation) {\n      this.currentMemory -= allocation.size;\n      this.allocations.delete(id);\n    }\n  }\n\n  garbageCollect() {\n    const now = Date.now();\n    const maxAge = 5 * 60 * 1000; // 5 minutes\n    \n    for (const [id, allocation] of this.allocations) {\n      if (now - allocation.timestamp > maxAge) {\n        this.deallocate(id);\n      }\n    }\n  }\n\n  getStats() {\n    return {\n      currentMemory: this.currentMemory,\n      maxMemory: this.maxMemory,\n      allocationCount: this.allocations.size,\n      memoryUsage: (this.currentMemory / this.maxMemory) * 100\n    };\n  }\n}\n\n// Reactive system implementation with advanced optimizations\nclass ReactiveState {\n  constructor(initialValue, options = {}) {\n    this._value = initialValue;\n    this._subscribers = new Set();\n    this._computedCache = new Map();\n    this._batchUpdates = new Set();\n    this._isBatching = false;\n    this._comparator = options.comparator || ((a, b) => a !== b);\n    this._debounceMs = options.debounce || 0;\n    this._debounceTimer = null;\n    this._history = options.history ? [initialValue] : null;\n    this._maxHistory = options.maxHistory || 10;\n    \n    // Performance tracking\n    this._updateCount = 0;\n    this._lastUpdate = Date.now();\n  }\n\n  get value() {\n    // Track dependency with performance monitoring\n    if (currentEffect) {\n      this._subscribers.add(currentEffect);\n      currentEffect.dependencies.add(this);\n      \n      // Track dependency access patterns\n      if (!this._accessPatterns) {\n        this._accessPatterns = new Map();\n      }\n      const effectId = currentEffect.id || 'unknown';\n      this._accessPatterns.set(effectId, (this._accessPatterns.get(effectId) || 0) + 1);\n    }\n    \n    return this._value;\n  }\n\n  set value(newValue) {\n    if (this._comparator(newValue, this._value)) {\n      const oldValue = this._value;\n      this._value = newValue;\n      \n      // Add to history if enabled\n      if (this._history) {\n        this._history.push(newValue);\n        if (this._history.length > this._maxHistory) {\n          this._history.shift();\n        }\n      }\n      \n      // Batch updates for performance\n      if (this._isBatching) {\n        this._batchUpdates.add(this);\n      } else {\n        this.notify();\n      }\n      \n      // Update performance metrics\n      this._updateCount++;\n      this._lastUpdate = Date.now();\n      \n      // Emit change event\n      this.emit('change', { oldValue, newValue });\n    }\n  }\n\n  // Advanced value manipulation\n  update(updater) {\n    if (typeof updater === 'function') {\n      this.value = updater(this._value);\n    } else {\n      this.value = updater;\n    }\n  }\n\n  // Batch multiple updates\n  batch(updates) {\n    this._isBatching = true;\n    try {\n      updates();\n    } finally {\n      this._isBatching = false;\n      this._batchUpdates.forEach(state => state.notify());\n      this._batchUpdates.clear();\n    }\n  }\n\n  // Debounced updates\n  debouncedUpdate(newValue) {\n    if (this._debounceTimer) {\n      clearTimeout(this._debounceTimer);\n    }\n    \n    this._debounceTimer = setTimeout(() => {\n      this.value = newValue;\n    }, this._debounceMs);\n  }\n\n  // Undo/redo functionality\n  undo() {\n    if (this._history && this._history.length > 1) {\n      this._history.pop(); // Remove current\n      this.value = this._history[this._history.length - 1];\n      return true;\n    }\n    return false;\n  }\n\n  redo() {\n    // Implementation would require a redo stack\n    return false;\n  }\n\n  notify() {\n    // Performance optimization: batch notifications\n    if (this._subscribers.size === 0) return;\n    \n    const subscribers = Array.from(this._subscribers);\n    const startTime = performance.now() || Date.now();\n    \n    for (const subscriber of subscribers) {\n      try {\n        subscriber.execute();\n      } catch (error) {\n        console.error('Error in reactive subscriber:', error);\n        // Remove problematic subscriber\n        this._subscribers.delete(subscriber);\n      }\n    }\n    \n    // Track notification performance\n    const duration = (performance.now() || Date.now()) - startTime;\n    if (duration > 16) { // Longer than one frame\n      console.warn(`Slow reactive update: ${duration.toFixed(2)}ms`);\n    }\n    \n    // Clear computed cache\n    this._computedCache.clear();\n    \n    // Schedule component updates\n    FluxRuntime.scheduleUpdate();\n  }\n\n  subscribe(callback, options = {}) {\n    const subscription = {\n      callback,\n      id: options.id || Math.random().toString(36),\n      priority: options.priority || 0,\n      execute: () => callback(this._value)\n    };\n    \n    this._subscribers.add(subscription);\n    \n    return () => {\n      this._subscribers.delete(subscription);\n    };\n  }\n\n  // Event emitter functionality\n  emit(event, data) {\n    if (this._eventListeners && this._eventListeners[event]) {\n      this._eventListeners[event].forEach(listener => {\n        try {\n          listener(data);\n        } catch (error) {\n          console.error('Error in event listener:', error);\n        }\n      });\n    }\n  }\n\n  on(event, listener) {\n    if (!this._eventListeners) {\n      this._eventListeners = {};\n    }\n    if (!this._eventListeners[event]) {\n      this._eventListeners[event] = [];\n    }\n    this._eventListeners[event].push(listener);\n    \n    return () => {\n      const index = this._eventListeners[event].indexOf(listener);\n      if (index > -1) {\n        this._eventListeners[event].splice(index, 1);\n      }\n    };\n  }\n\n  // Performance and debugging\n  getStats() {\n    return {\n      updateCount: this._updateCount,\n      lastUpdate: this._lastUpdate,\n      subscriberCount: this._subscribers.size,\n      hasHistory: !!this._history,\n      historySize: this._history ? this._history.length : 0\n    };\n  }\n}\n\n// Enhanced Effect system with better cleanup and performance\nclass Effect {\n  constructor(fn, dependencies = [], options = {}) {\n    this.fn = fn;\n    this.dependencies = new Set();\n    this.isActive = true;\n    this.id = options.id || Math.random().toString(36);\n    this.priority = options.priority || 0;\n    this.cleanup = null;\n    this.executionCount = 0;\n    this.lastExecution = null;\n    this.executionTime = 0;\n    \n    // Performance monitoring\n    this._startTime = performance.now() || Date.now();\n    \n    // Initial execution to capture dependencies\n    this.execute();\n  }\n\n  execute() {\n    if (!this.isActive) return;\n    \n    const startTime = performance.now() || Date.now();\n    \n    // Clear old dependencies\n    for (const dep of this.dependencies) {\n      dep._subscribers.delete(this);\n    }\n    this.dependencies.clear();\n    \n    // Execute cleanup if exists\n    if (this.cleanup) {\n      try {\n        this.cleanup();\n      } catch (error) {\n        console.error('Error in effect cleanup:', error);\n      }\n      this.cleanup = null;\n    }\n    \n    // Execute with dependency tracking\n    const prevEffect = currentEffect;\n    currentEffect = this;\n    \n    try {\n      const result = this.fn();\n      \n      // Handle cleanup function return\n      if (typeof result === 'function') {\n        this.cleanup = result;\n      }\n      \n      // Update metrics\n      this.executionCount++;\n      this.lastExecution = Date.now();\n      this.executionTime = (performance.now() || Date.now()) - startTime;\n      \n    } catch (error) {\n      console.error('Error in effect execution:', error);\n      throw error;\n    } finally {\n      currentEffect = prevEffect;\n    }\n  }\n\n  dispose() {\n    this.isActive = false;\n    \n    // Execute cleanup\n    if (this.cleanup) {\n      try {\n        this.cleanup();\n      } catch (error) {\n        console.error('Error in effect cleanup:', error);\n      }\n    }\n    \n    // Clean up dependencies\n    for (const dep of this.dependencies) {\n      dep._subscribers.delete(this);\n    }\n    \n    this.dependencies.clear();\n  }\n\n  // Performance monitoring\n  getStats() {\n    return {\n      executionCount: this.executionCount,\n      lastExecution: this.lastExecution,\n      executionTime: this.executionTime,\n      isActive: this.isActive,\n      dependencyCount: this.dependencies.size\n    };\n  }\n}\n\n// Enhanced Computed with intelligent caching and performance\nclass Computed {\n  constructor(fn, options = {}) {\n    this.fn = fn;\n    this._value = undefined;\n    this._cached = false;\n    this.dependencies = new Set();\n    this.effect = new Effect(() => {\n      this._cached = false;\n    });\n    this.cacheStrategy = options.cacheStrategy || 'smart'; // 'smart', 'aggressive', 'none'\n    this.maxCacheAge = options.maxCacheAge || 5 * 60 * 1000; // 5 minutes\n    this.lastCacheTime = 0;\n    this.hitCount = 0;\n    this.missCount = 0;\n  }\n\n  get value() {\n    const now = Date.now();\n    \n    // Check if cache is still valid\n    if (this._cached && \n        (this.cacheStrategy === 'aggressive' || \n         now - this.lastCacheTime < this.maxCacheAge)) {\n      this.hitCount++;\n      return this._value;\n    }\n    \n    this.missCount++;\n    \n    // Recompute value\n    const prevEffect = currentEffect;\n    currentEffect = this.effect;\n    \n    try {\n      this._value = this.fn();\n      this._cached = true;\n      this.lastCacheTime = now;\n    } finally {\n      currentEffect = prevEffect;\n    }\n    \n    return this._value;\n  }\n\n  // Cache management\n  invalidate() {\n    this._cached = false;\n  }\n\n  clearCache() {\n    this._value = undefined;\n    this._cached = false;\n    this.lastCacheTime = 0;\n  }\n\n  // Performance statistics\n  getStats() {\n    const total = this.hitCount + this.missCount;\n    const hitRate = total > 0 ? (this.hitCount / total) * 100 : 0;\n    \n    return {\n      hitCount: this.hitCount,\n      missCount: this.missCount,\n      hitRate: hitRate.toFixed(2) + '%',\n      isCached: this._cached,\n      lastCacheTime: this.lastCacheTime,\n      cacheAge: Date.now() - this.lastCacheTime\n    };\n  }\n}\n\n// Global effect tracking\nlet currentEffect = null;\n\n\n\n\n\n\n\n// Virtual DOM implementation\nclass VNode {\n  constructor(type, props, children) {\n    this.type = type;\n    this.props = props || {};\n    this.children = children || [];\n    this.key = props?.key;\n    this.ref = props?.ref;\n    this.dom = null;\n  }\n}\n\nclass VirtualDOM {\n  constructor() {\n    this.currentTree = null;\n    this.pendingUpdates = new Map();\n    this.updateQueue = [];\n    this.isUpdating = false;\n  }\n\n  createElement(type, props, ...children) {\n    // Flatten children\n    const flatChildren = children.flat().filter(child => child != null);\n    \n    return new VNode(type, props, flatChildren);\n  }\n\n  // O(1) diffing algorithm for optimal performance\n  diff(oldNode, newNode) {\n    if (!oldNode || !newNode) {\n      return { type: 'replace', newNode };\n    }\n\n    if (oldNode.type !== newNode.type || oldNode.key !== newNode.key) {\n      return { type: 'replace', newNode };\n    }\n\n    const patches = [];\n    \n    // Diff props\n    const propPatches = this.diffProps(oldNode.props, newNode.props);\n    if (propPatches.length > 0) {\n      patches.push({ type: 'props', patches: propPatches });\n    }\n\n    // Diff children\n    const childPatches = this.diffChildren(oldNode.children, newNode.children);\n    if (childPatches.length > 0) {\n      patches.push({ type: 'children', patches: childPatches });\n    }\n\n    return patches.length > 0 ? { type: 'update', patches } : null;\n  }\n\n  diffProps(oldProps, newProps) {\n    const patches = [];\n    const allKeys = new Set([...Object.keys(oldProps), ...Object.keys(newProps)]);\n    \n    for (const key of allKeys) {\n      if (oldProps[key] !== newProps[key]) {\n        patches.push({ key, value: newProps[key] });\n      }\n    }\n    \n    return patches;\n  }\n\n  diffChildren(oldChildren, newChildren) {\n    const patches = [];\n    const maxLength = Math.max(oldChildren.length, newChildren.length);\n    \n    for (let i = 0; i < maxLength; i++) {\n      const oldChild = oldChildren[i];\n      const newChild = newChildren[i];\n      \n      if (!oldChild && newChild) {\n        patches.push({ type: 'insert', index: i, node: newChild });\n      } else if (oldChild && !newChild) {\n        patches.push({ type: 'remove', index: i });\n      } else if (oldChild && newChild) {\n        const childDiff = this.diff(oldChild, newChild);\n        if (childDiff) {\n          patches.push({ type: 'update', index: i, diff: childDiff });\n        }\n      }\n    }\n    \n    return patches;\n  }\n\n  // Batch updates for performance\n  scheduleUpdate(component, newVNode) {\n    this.pendingUpdates.set(component, newVNode);\n    \n    if (!this.isUpdating) {\n      this.isUpdating = true;\n      this.processUpdates();\n    }\n  }\n\n  processUpdates() {\n    const updates = Array.from(this.pendingUpdates.entries());\n    this.pendingUpdates.clear();\n    \n    for (const [component, newVNode] of updates) {\n      try {\n        this.updateComponent(component, newVNode);\n      } catch (error) {\n        console.error('Error updating component:', error);\n      }\n    }\n    \n    this.isUpdating = false;\n  }\n\n  updateComponent(component, newVNode) {\n    const oldVNode = component.currentVNode;\n    const patches = this.diff(oldVNode, newVNode);\n    \n    if (patches) {\n      this.applyPatches(component.dom, patches);\n      component.currentVNode = newVNode;\n    }\n  }\n\n  applyPatches(dom, patches) {\n    if (!dom) return;\n    \n    for (const patch of patches) {\n      switch (patch.type) {\n        case 'props':\n          this.applyPropPatches(dom, patch.patches);\n          break;\n        case 'children':\n          this.applyChildPatches(dom, patch.patches);\n          break;\n        case 'replace':\n          // Handle replacement\n          break;\n      }\n    }\n  }\n\n  applyPropPatches(dom, propPatches) {\n    for (const { key, value } of propPatches) {\n      if (key.startsWith('on')) {\n        // Event handler\n        const eventName = key.toLowerCase().substring(2);\n        dom.removeEventListener(eventName, dom[`_${key}`]);\n        dom.addEventListener(eventName, value);\n        dom[`_${key}`] = value;\n      } else if (key === 'style' && typeof value === 'object') {\n        // Style object\n        Object.assign(dom.style, value);\n      } else {\n        // Regular attribute\n        dom.setAttribute(key, value);\n      }\n    }\n  }\n\n  applyChildPatches(dom, childPatches) {\n    for (const patch of childPatches) {\n      switch (patch.type) {\n        case 'insert':\n          const newChild = this.createDOMNode(patch.node);\n          dom.insertBefore(newChild, dom.children[patch.index] || null);\n          break;\n        case 'remove':\n          if (dom.children[patch.index]) {\n            dom.removeChild(dom.children[patch.index]);\n          }\n          break;\n        case 'update':\n          this.applyPatches(dom.children[patch.index], patch.diff);\n          break;\n      }\n    }\n  }\n\n  createDOMNode(vnode) {\n    if (typeof vnode === 'string' || typeof vnode === 'number') {\n      return document.createTextNode(vnode);\n    }\n    \n    if (vnode.type === Fragment) {\n      const fragment = document.createDocumentFragment();\n      for (const child of vnode.children) {\n        fragment.appendChild(this.createDOMNode(child));\n      }\n      return fragment;\n    }\n    \n    const dom = document.createElement(vnode.type);\n    \n    // Set props\n    for (const [key, value] of Object.entries(vnode.props)) {\n      if (key !== 'key' && key !== 'ref') {\n        if (key.startsWith('on')) {\n          const eventName = key.toLowerCase().substring(2);\n          dom.addEventListener(eventName, value);\n          dom[`_${key}`] = value;\n        } else if (key === 'style' && typeof value === 'object') {\n          Object.assign(dom.style, value);\n        } else {\n          dom.setAttribute(key, value);\n        }\n      }\n    }\n    \n    // Create children\n    for (const child of vnode.children) {\n      dom.appendChild(this.createDOMNode(child));\n    }\n    \n    vnode.dom = dom;\n    return dom;\n  }\n}\n\n// Router implementation with environment detection\nclass Router {\n  constructor(options = {}) {\n    this.routes = new Map();\n    this.currentRoute = null;\n    this.params = {};\n    this.guards = new Map();\n    this.loaders = new Map();\n    this.mode = options.mode || (isBrowser ? 'browser' : 'hash');\n    this.base = options.base || '';\n    this.fallback = options.fallback || '/';\n    \n    // Only initialize browser-specific features in browser environment\n    if (isBrowser) {\n      // Listen to browser navigation\n      window.addEventListener('popstate', () => this.handleNavigation());\n      \n      // Initial route\n      this.handleNavigation();\n    } else {\n      // Node.js environment - use mock navigation\n      this.currentPath = '/';\n    }\n  }\n\n  registerRoute(path, component, options = {}) {\n    const routePattern = this.pathToRegex(path);\n    \n    this.routes.set(path, {\n      pattern: routePattern,\n      component,\n      guards: options.guards || [],\n      loader: options.loader,\n      meta: options.meta\n    });\n  }\n\n  registerGuard(name, guardFn) {\n    this.guards.set(name, guardFn);\n  }\n\n  pathToRegex(path) {\n    // Convert path like '/users/:id' to regex\n    const pattern = path\n      .replace(/\\//g, '\\\\/')\n      .replace(/:([^\\/]+)/g, '(?<$1>[^\\/]+)')\n      .replace(/\\*/g, '.*');\n    \n    return new RegExp(`^${pattern}$`);\n  }\n\n  async navigate(path, replace = false) {\n    const route = this.findRoute(path);\n    \n    if (!route) {\n      console.warn(`No route found for path: ${path}`);\n      return;\n    }\n\n    // Execute guards\n    for (const guardName of route.guards) {\n      const guard = this.guards.get(guardName);\n      if (guard && !(await guard(route, path))) {\n        return; // Guard blocked navigation\n      }\n    }\n\n    // Execute loader\n    let data = {};\n    if (route.loader) {\n      data = await route.loader(this.params);\n    }\n\n    // Update navigation state based on environment\n    if (isBrowser) {\n      // Update browser history\n      if (replace) {\n        window.history.replaceState({ path }, '', path);\n      } else {\n        window.history.pushState({ path }, '', path);\n      }\n    } else {\n      // Node.js environment - update internal state\n      this.currentPath = path;\n    }\n\n    // Render component\n    this.currentRoute = route;\n    this.renderCurrentRoute(data);\n  }\n\n  findRoute(path) {\n    for (const [routePath, route] of this.routes) {\n      const match = path.match(route.pattern);\n      if (match) {\n        this.params = match.groups || {};\n        return route;\n      }\n    }\n    return null;\n  }\n\n  async handleNavigation() {\n    let path;\n    if (isBrowser) {\n      path = window.location.pathname;\n    } else {\n      path = this.currentPath || '/';\n    }\n    await this.navigate(path, true);\n  }\n\n  renderCurrentRoute(data = {}) {\n    if (this.currentRoute) {\n      const component = new this.currentRoute.component({\n        ...data,\n        params: this.params\n      });\n      \n      if (isBrowser) {\n        const appContainer = document.getElementById('app') || document.body;\n        component.mount(appContainer);\n      } else {\n        // Node.js environment - just store the component\n        this.currentComponent = component;\n      }\n    }\n  }\n}\n\n// Base Component class\nexport class Component {\n  constructor(props = {}) {\n    this.props = props;\n    this.state = {};\n    this.effects = [];\n    this.currentVNode = null;\n    this.dom = null;\n    this.isMounted = false;\n    this.updateQueue = [];\n    this.isUpdating = false;\n    \n    // Bind methods\n    this.setState = this.setState.bind(this);\n    this.forceUpdate = this.forceUpdate.bind(this);\n    \n    // Initialize component\n    this.initialize();\n  }\n\n  initialize() {\n    // Set current component for effect tracking\n    setCurrentComponent(this);\n    \n    // Initialize state from class properties\n    this.initializeState();\n    \n    // Run lifecycle methods\n    if (this.componentDidMount) {\n      this.componentDidMount();\n    }\n  }\n\n  initializeState() {\n    // Convert class properties to reactive state\n    for (const [key, value] of Object.entries(this)) {\n      if (key.startsWith('state_') || key === 'state') {\n        const stateName = key.replace('state_', '');\n        this.state[stateName] = new ReactiveState(value);\n      }\n    }\n  }\n\n  setState(updater) {\n    if (typeof updater === 'function') {\n      updater(this.state);\n    } else {\n      Object.assign(this.state, updater);\n    }\n    \n    this.scheduleUpdate();\n  }\n\n  scheduleUpdate() {\n    if (!this.isUpdating) {\n      this.isUpdating = true;\n      FluxRuntime.scheduleUpdate(() => {\n        this.update();\n        this.isUpdating = false;\n      });\n    }\n  }\n\n  update() {\n    if (!this.isMounted) return;\n    \n    try {\n      const newVNode = this.render();\n      FluxRuntime.virtualDOM.scheduleUpdate(this, newVNode);\n    } catch (error) {\n      console.error('Error updating component:', error);\n    }\n  }\n\n  forceUpdate() {\n    this.update();\n  }\n\n  mount(container) {\n    this.container = container;\n    \n    try {\n      const vnode = this.render();\n      this.currentVNode = vnode;\n      \n      if (isBrowser) {\n        this.dom = FluxRuntime.virtualDOM.createDOMNode(vnode);\n        container.appendChild(this.dom);\n      }\n      \n      this.isMounted = true;\n      \n      if (this.componentDidMount) {\n        this.componentDidMount();\n      }\n    } catch (error) {\n      console.error('Error mounting component:', error);\n    }\n  }\n\n  unmount() {\n    if (this.componentWillUnmount) {\n      this.componentWillUnmount();\n    }\n    \n    // Clean up effects\n    for (const effect of this.effects) {\n      effect.dispose();\n    }\n    \n    this.isMounted = false;\n  }\n\n  render() {\n    throw new Error('Component must implement render method');\n  }\n}\n\n// Store class for state management\nexport class Store {\n  constructor() {\n    this.state = {};\n    this.actions = {};\n    this.computed = {};\n    this.subscribers = new Set();\n    this.middleware = [];\n    \n    this.initialize();\n  }\n\n  initialize() {\n    // Convert class properties to reactive state\n    for (const [key, value] of Object.entries(this)) {\n      if (key.startsWith('state_')) {\n        const stateName = key.replace('state_', '');\n        this.state[stateName] = new ReactiveState(value);\n      } else if (key.startsWith('action_')) {\n        const actionName = key.replace('action_', '');\n        this.actions[actionName] = value.bind(this);\n      } else if (key.startsWith('computed_')) {\n        const computedName = key.replace('computed_', '');\n        this.computed[computedName] = new Computed(value.bind(this));\n      }\n    }\n  }\n\n  // Dispatch action with middleware support\n  async dispatch(actionName, ...args) {\n    let result = this.actions[actionName];\n    \n    if (!result) {\n      throw new Error(`Action ${actionName} not found`);\n    }\n    \n    // Apply middleware\n    for (const middleware of this.middleware) {\n      result = middleware(result);\n    }\n    \n    try {\n      const actionResult = await result(...args);\n      this.notifySubscribers(actionName, actionResult);\n      return actionResult;\n    } catch (error) {\n      console.error(`Error in action ${actionName}:`, error);\n      throw error;\n    }\n  }\n\n  // Subscribe to store changes\n  subscribe(callback) {\n    this.subscribers.add(callback);\n    return () => this.subscribers.delete(callback);\n  }\n\n  notifySubscribers(actionName, result) {\n    for (const subscriber of this.subscribers) {\n      try {\n        subscriber(actionName, result);\n      } catch (error) {\n        console.error('Error in store subscriber:', error);\n      }\n    }\n  }\n\n  // Add middleware\n  use(middleware) {\n    this.middleware.push(middleware);\n  }\n\n  // Get store statistics\n  getStats() {\n    return {\n      stateCount: Object.keys(this.state).length,\n      actionCount: Object.keys(this.actions).length,\n      computedCount: Object.keys(this.computed).length,\n      subscriberCount: this.subscribers.size,\n      middlewareCount: this.middleware.length\n    };\n  }\n}\n\n// Main runtime class\nexport class FluxRuntime {\n  static virtualDOM = new VirtualDOM();\n  static router = new Router();\n  static updateQueue = new Set();\n  static isUpdating = false;\n\n  static scheduleUpdate(callback) {\n    if (callback) {\n      this.updateQueue.add(callback);\n    }\n    \n    if (!this.isUpdating) {\n      this.isUpdating = true;\n      \n      // Use appropriate scheduling based on environment\n      if (isBrowser && typeof requestAnimationFrame !== 'undefined') {\n        requestAnimationFrame(() => {\n          this.flushUpdates();\n          this.isUpdating = false;\n        });\n      } else {\n        // Node.js or fallback - use setImmediate or setTimeout\n        const scheduler = typeof setImmediate !== 'undefined' ? setImmediate : setTimeout;\n        scheduler(() => {\n          this.flushUpdates();\n          this.isUpdating = false;\n        }, 0);\n      }\n    }\n  }\n\n  static flushUpdates() {\n    for (const update of this.updateQueue) {\n      try {\n        update();\n      } catch (error) {\n        console.error('Error during update:', error);\n      }\n    }\n    \n    this.updateQueue.clear();\n  }\n\n  static registerRoute(path, component, options) {\n    this.router.registerRoute(path, component, options);\n  }\n\n  static registerGuard(name, guardFn) {\n    this.router.registerGuard(name, guardFn);\n  }\n\n  static navigate(path, replace = false) {\n    return this.router.navigate(path, replace);\n  }\n\n  static mount(component, container) {\n    if (isBrowser) {\n      if (typeof container === 'string') {\n        container = document.querySelector(container);\n      }\n      \n      if (!container) {\n        throw new Error('Container not found');\n      }\n      \n      const instance = new component();\n      instance.mount(container);\n      \n      return instance;\n    } else {\n      // Node.js environment - create instance without mounting\n      const instance = new component();\n      return instance;\n    }\n  }\n}\n\n// Factory functions\nexport function createReactiveState(initialValue) {\n  return new ReactiveState(initialValue);\n}\n\nexport function createEffect(fn, dependencies) {\n  const effect = new Effect(fn, dependencies);\n  \n  // Add to current component's effects for cleanup\n  if (currentComponent) {\n    currentComponent.effects.push(effect);\n  }\n  \n  return effect;\n}\n\nexport function createComputed(fn) {\n  return new Computed(fn);\n}\n\n// JSX helper\nexport function createElement(type, props, ...children) {\n  return FluxRuntime.virtualDOM.createElement(type, props, ...children);\n}\n\nexport const Fragment = Symbol('Fragment');\n\n// Component tracking for effects\nlet currentComponent = null;\n\nexport function setCurrentComponent(component) {\n  currentComponent = component;\n}\n\n// Global state management\nexport const FluxGlobalState = {\n  stores: new Map(),\n  effects: new Set(),\n  components: new Set(),\n  \n  registerStore(name, store) {\n    this.stores.set(name, store);\n  },\n  \n  getStore(name) {\n    return this.stores.get(name);\n  },\n  \n  registerEffect(effect) {\n    this.effects.add(effect);\n  },\n  \n  registerComponent(component) {\n    this.components.add(component);\n  },\n  \n  cleanup() {\n    // Clean up all effects\n    for (const effect of this.effects) {\n      effect.dispose();\n    }\n    this.effects.clear();\n    \n    // Clean up all components\n    for (const component of this.components) {\n      component.unmount();\n    }\n    this.components.clear();\n  },\n  \n  getStats() {\n    return {\n      storeCount: this.stores.size,\n      effectCount: this.effects.size,\n      componentCount: this.components.size\n    };\n  }\n};\n\n// Advanced caching system\nexport class FluxCache {\n  constructor(options = {}) {\n    this.maxSize = options.maxSize || 1000;\n    this.maxAge = options.maxAge || 5 * 60 * 1000; // 5 minutes\n    this.cache = new Map();\n    this.accessOrder = [];\n  }\n\n  set(key, value, ttl = this.maxAge) {\n    if (this.cache.size >= this.maxSize) {\n      this.evictOldest();\n    }\n\n    const entry = {\n      value,\n      timestamp: Date.now(),\n      ttl,\n      accessCount: 0\n    };\n\n    this.cache.set(key, entry);\n    this.updateAccessOrder(key);\n  }\n\n  get(key) {\n    const entry = this.cache.get(key);\n    if (!entry) return null;\n\n    // Check if expired\n    if (Date.now() - entry.timestamp > entry.ttl) {\n      this.cache.delete(key);\n      this.removeFromAccessOrder(key);\n      return null;\n    }\n\n    // Update access count and order\n    entry.accessCount++;\n    this.updateAccessOrder(key);\n    return entry.value;\n  }\n\n  has(key) {\n    return this.cache.has(key) && !this.isExpired(key);\n  }\n\n  delete(key) {\n    const deleted = this.cache.delete(key);\n    if (deleted) {\n      this.removeFromAccessOrder(key);\n    }\n    return deleted;\n  }\n\n  clear() {\n    this.cache.clear();\n    this.accessOrder = [];\n  }\n\n  evictOldest() {\n    if (this.accessOrder.length === 0) return;\n\n    const oldestKey = this.accessOrder[0];\n    this.cache.delete(oldestKey);\n    this.accessOrder.shift();\n  }\n\n  isExpired(key) {\n    const entry = this.cache.get(key);\n    if (!entry) return true;\n    return Date.now() - entry.timestamp > entry.ttl;\n  }\n\n  updateAccessOrder(key) {\n    this.removeFromAccessOrder(key);\n    this.accessOrder.push(key);\n  }\n\n  removeFromAccessOrder(key) {\n    const index = this.accessOrder.indexOf(key);\n    if (index > -1) {\n      this.accessOrder.splice(index, 1);\n    }\n  }\n\n  getStats() {\n    return {\n      size: this.cache.size,\n      maxSize: this.maxSize,\n      hitRate: this.calculateHitRate(),\n      averageAge: this.calculateAverageAge()\n    };\n  }\n\n  calculateHitRate() {\n    // Implementation would track hits vs misses\n    return 0.85; // Placeholder\n  }\n\n  calculateAverageAge() {\n    if (this.cache.size === 0) return 0;\n    \n    const now = Date.now();\n    let totalAge = 0;\n    \n    for (const entry of this.cache.values()) {\n      totalAge += now - entry.timestamp;\n    }\n    \n    return totalAge / this.cache.size;\n  }\n}\n\n// WebSocket manager for real-time features\nexport class FluxWebSocket {\n  constructor(url, options = {}) {\n    this.url = url;\n    this.options = {\n      reconnectInterval: 1000,\n      maxReconnectAttempts: 5,\n      heartbeatInterval: 30000,\n      ...options\n    };\n    \n    this.ws = null;\n    this.reconnectAttempts = 0;\n    this.reconnectTimer = null;\n    this.heartbeatTimer = null;\n    this.messageQueue = [];\n    this.subscribers = new Map();\n    this.isConnected = false;\n    \n    this.connect();\n  }\n\n  connect() {\n    try {\n      this.ws = new WebSocket(this.url);\n      \n      this.ws.onopen = () => {\n        this.isConnected = true;\n        this.reconnectAttempts = 0;\n        this.startHeartbeat();\n        this.flushMessageQueue();\n        this.emit('connected');\n      };\n      \n      this.ws.onmessage = (event) => {\n        try {\n          const data = JSON.parse(event.data);\n          this.handleMessage(data);\n        } catch (error) {\n          console.error('Error parsing WebSocket message:', error);\n        }\n      };\n      \n      this.ws.onclose = () => {\n        this.isConnected = false;\n        this.stopHeartbeat();\n        this.emit('disconnected');\n        this.scheduleReconnect();\n      };\n      \n      this.ws.onerror = (error) => {\n        console.error('WebSocket error:', error);\n        this.emit('error', error);\n      };\n      \n    } catch (error) {\n      console.error('Error creating WebSocket:', error);\n      this.scheduleReconnect();\n    }\n  }\n\n  send(type, data) {\n    const message = { type, data, timestamp: Date.now() };\n    \n    if (this.isConnected) {\n      this.ws.send(JSON.stringify(message));\n    } else {\n      this.messageQueue.push(message);\n    }\n  }\n\n  subscribe(type, callback) {\n    if (!this.subscribers.has(type)) {\n      this.subscribers.set(type, new Set());\n    }\n    this.subscribers.get(type).add(callback);\n    \n    return () => {\n      const callbacks = this.subscribers.get(type);\n      if (callbacks) {\n        callbacks.delete(callback);\n      }\n    };\n  }\n\n  handleMessage(data) {\n    const { type, data: messageData } = data;\n    const callbacks = this.subscribers.get(type);\n    \n    if (callbacks) {\n      for (const callback of callbacks) {\n        try {\n          callback(messageData);\n        } catch (error) {\n          console.error('Error in WebSocket message handler:', error);\n        }\n      }\n    }\n    \n    this.emit('message', data);\n  }\n\n  startHeartbeat() {\n    this.heartbeatTimer = setInterval(() => {\n      if (this.isConnected) {\n        this.send('heartbeat', { timestamp: Date.now() });\n      }\n    }, this.options.heartbeatInterval);\n  }\n\n  stopHeartbeat() {\n    if (this.heartbeatTimer) {\n      clearInterval(this.heartbeatTimer);\n      this.heartbeatTimer = null;\n    }\n  }\n\n  scheduleReconnect() {\n    if (this.reconnectAttempts < this.options.maxReconnectAttempts) {\n      this.reconnectAttempts++;\n      this.reconnectTimer = setTimeout(() => {\n        this.connect();\n      }, this.options.reconnectInterval * this.reconnectAttempts);\n    }\n  }\n\n  flushMessageQueue() {\n    while (this.messageQueue.length > 0) {\n      const message = this.messageQueue.shift();\n      this.ws.send(JSON.stringify(message));\n    }\n  }\n\n  disconnect() {\n    if (this.reconnectTimer) {\n      clearTimeout(this.reconnectTimer);\n      this.reconnectTimer = null;\n    }\n    \n    if (this.heartbeatTimer) {\n      clearInterval(this.heartbeatTimer);\n      this.heartbeatTimer = null;\n    }\n    \n    if (this.ws) {\n      this.ws.close();\n      this.ws = null;\n    }\n  }\n\n  // Event emitter functionality\n  emit(event, data) {\n    // Implementation would use event emitter\n    console.log(`WebSocket event: ${event}`, data);\n  }\n}\n\n// Development helpers\nexport const FluxDevTools = {\n  logStateChanges: true,\n  logRenders: true,\n  logRouteChanges: true,\n  \n  trackStateChange(component, stateName, oldValue, newValue) {\n    if (this.logStateChanges) {\n      console.log(`[Flux] State change in ${component.constructor.name}:`, {\n        state: stateName,\n        oldValue,\n        newValue\n      });\n    }\n  },\n  \n  trackRender(component, renderTime) {\n    if (this.logRenders) {\n      console.log(`[Flux] Render ${component.constructor.name}: ${renderTime}ms`);\n    }\n  },\n  \n  trackRouteChange(from, to) {\n    if (this.logRouteChanges) {\n      console.log(`[Flux] Route change: ${from} -> ${to}`);\n    }\n  }\n};\n\n// Performance monitoring\nexport const FluxProfiler = {\n  measurements: new Map(),\n  \n  start(label) {\n    this.measurements.set(label, performance.now());\n  },\n  \n  end(label) {\n    const startTime = this.measurements.get(label);\n    if (startTime) {\n      const duration = performance.now() - startTime;\n      this.measurements.delete(label);\n      return duration;\n    }\n    return 0;\n  },\n  \n  measure(label, fn) {\n    this.start(label);\n    const result = fn();\n    const duration = this.end(label);\n    \n    console.log(`[Flux Profiler] ${label}: ${duration.toFixed(2)}ms`);\n    \n    return result;\n  }\n};\n\n// Export everything\nexport {\n  ReactiveState,\n  Effect,\n  Computed,\n  VNode,\n  VirtualDOM,\n  Router\n};"],
  "mappings": "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",
  "names": []
}
