{
  "version": 3,
  "sources": ["../../src/cli/dev-server.js", "../../src/compiler/lexer.js", "../../src/ast/nodes.js", "../../src/compiler/parser.js", "../../src/compiler/codegen.js", "../../src/errors.js", "../../src/compiler/index.js", "../../src/config/index.js", "../../src/storage/index.js", "../../src/runtime/index.js"],
  "sourcesContent": ["// flux-core/src/cli/dev-server.js\n// Development server with hot reloading\n\nimport { createServer } from 'http';\nimport { createReadStream } from 'fs';\nimport { stat, readFile, readdir, access } from 'fs/promises';\nimport { extname, join, resolve } from 'path';\nimport { pathToFileURL } from 'url';\nimport fs from 'fs-extra';\nimport { FluxCompiler } from '../compiler/index.js';\nimport { configManager } from '../config/index.js';\nimport { storageManager } from '../storage/index.js';\nimport chalk from 'chalk';\n\nconst MIME_TYPES = {\n  '.html': 'text/html',\n  '.js': 'text/javascript',\n  '.css': 'text/css',\n  '.json': 'application/json',\n  '.png': 'image/png',\n  '.jpg': 'image/jpeg',\n  '.gif': 'image/gif',\n  '.svg': 'image/svg+xml',\n  '.ico': 'image/x-icon',\n  '.woff': 'font/woff',\n  '.woff2': 'font/woff2',\n  '.ttf': 'font/ttf',\n  '.eot': 'application/vnd.ms-fontobject'\n};\n\nexport async function devServer(options = {}) {\n  const {\n    port = 3000,\n    host = 'localhost',\n    root = process.cwd(),\n    hot = false,\n    analyze = false,\n    profile = false\n  } = options;\n  \n  console.log(chalk.blue('\uD83D\uDE80 Starting Flux Development Server...'));\n  \n  try {\n    // Initialize configuration system only if config file exists\n    const configPath = path.resolve(root, 'flux.config.js');\n    if (await fs.pathExists(configPath)) {\n      console.log(chalk.blue('\uD83D\uDCCB Loading configuration...'));\n      await configManager.loadConfiguration();\n    } else {\n      console.log(chalk.yellow('\u26A0\uFE0F  No flux.config.js found, using default configuration'));\n    }\n    \n    // Initialize storage system only if needed\n    try {\n      console.log(chalk.blue('\uD83D\uDCBE Initializing storage system...'));\n      await storageManager.initializeStorage();\n    } catch (error) {\n      console.log(chalk.yellow('\u26A0\uFE0F  Storage system not available, continuing without storage'));\n    }\n    \n    // Get configuration values (use defaults if no config loaded)\n    const configPort = configManager.loaded ? configManager.get('server.port', port) : port;\n    const configHost = configManager.loaded ? configManager.get('server.host', host) : host;\n    const finalPort = port || configPort;\n    const finalHost = host || configHost;\n    \n    const compiler = new FluxCompiler({\n      target: 'js',\n      minify: false,\n      sourceMaps: true,\n      optimizations: false,\n      watchMode: true\n    });\n  \n  // File watcher for hot reloading\n  const watchedFiles = new Set();\n  const fileWatchers = new Map();\n  \n  // WebSocket connections for live reload\n  const connections = new Set();\n  \n  // Load user middlewares if present\n  const userMiddlewares = await loadUserMiddlewares(root);\n\n  const server = createServer(async (req, res) => {\n    try {\n      const url = new URL(req.url, `http://${finalHost}:${finalPort}`);\n      let filePath = url.pathname;\n      \n      // Handle root path\n      if (filePath === '/') {\n        filePath = '/index.html';\n      }\n      \n      // Remove leading slash\n      filePath = filePath.substring(1);\n      \n      // Security: prevent directory traversal\n      if (filePath.includes('..')) {\n        res.writeHead(403);\n        res.end('Forbidden');\n        return;\n      }\n      \n      // Run user middleware pipeline\n      for (const mw of userMiddlewares) {\n        try {\n          const result = await mw({ req, res, url, root, filePath });\n          if (res.writableEnded || result === false) {\n            return;\n          }\n        } catch (mwErr) {\n          console.warn('Middleware error:', mwErr?.message || mwErr);\n        }\n      }\n\n      const fullPath = resolve(root, filePath);\n      \n      try {\n        const stats = await stat(fullPath);\n        \n        if (stats.isDirectory()) {\n          // Serve index.html for directories\n          const indexPath = join(fullPath, 'index.html');\n          try {\n            await access(indexPath);\n            await serveFile(indexPath, res);\n          } catch {\n            // Generate directory listing\n            await serveDirectoryListing(fullPath, res, filePath);\n          }\n        } else {\n          await serveFile(fullPath, res);\n        }\n      } catch (error) {\n        // Try to serve from storage if file not found\n        if (filePath.startsWith('storage/')) {\n          try {\n            await serveStorageFile(filePath, res);\n            return;\n          } catch (storageError) {\n            console.log(`Storage file not found: ${filePath}`);\n          }\n        }\n        \n        // File not found, try to compile Flux files\n        if (filePath.endsWith('.js') && !filePath.includes('node_modules')) {\n          const fluxPath = filePath.replace(/\\.js$/, '.flux');\n          const fullFluxPath = resolve(root, fluxPath);\n          \n          try {\n            await access(fullFluxPath);\n            await compileAndServeFlux(fullFluxPath, res, compiler);\n            return;\n          } catch {\n            // Flux file doesn't exist\n          }\n        }\n        \n        // Try to serve from public directory\n        const publicPath = resolve(root, 'public', filePath);\n        try {\n          await access(publicPath);\n          await serveFile(publicPath, res);\n        } catch {\n          // 404\n          await serve404(res, filePath, root);\n        }\n      }\n    } catch (error) {\n      console.error('Server error:', error);\n      await serve500(res, error, root);\n    }\n  });\n  \n  // WebSocket server for live reload\n  server.on('upgrade', (request, socket, head) => {\n    if (request.url === '/__flux_live_reload') {\n      const ws = new WebSocket();\n      ws.setSocket(socket, request, head);\n      \n      connections.add(ws);\n      \n      ws.on('close', () => {\n        connections.delete(ws);\n      });\n      \n      ws.on('message', (message) => {\n        try {\n          const data = JSON.parse(message);\n          if (data.type === 'ping') {\n            ws.send(JSON.stringify({ type: 'pong' }));\n          }\n        } catch (error) {\n          console.error('WebSocket message error:', error);\n        }\n      });\n    }\n  });\n  \n  server.listen(finalPort, finalHost, () => {\n    console.log(chalk.green(`\uD83D\uDE80 Flux dev server running at http://${finalHost}:${finalPort}`));\n    console.log(chalk.cyan(`\uD83D\uDCC1 Serving from: ${root}`));\n    console.log(chalk.blue(`\uD83D\uDCBE Storage: ${configManager.loaded ? configManager.get('storage.type', 'local') : 'none'}`));\n    console.log(chalk.yellow(`\u26A1 Hot reload: ${hot ? 'enabled' : 'disabled'}`));\n    console.log(chalk.gray(`Press Ctrl+C to stop`));\n  });\n  \n  // Setup file watching\n  await setupFileWatching(root, compiler, connections);\n  \n  return server;\n  \n  } catch (error) {\n    console.error(chalk.red('\u274C Failed to start development server:'), error);\n    throw error;\n  }\n}\n\nasync function serveFile(filePath, res) {\n  const ext = extname(filePath);\n  const mimeType = MIME_TYPES[ext] || 'application/octet-stream';\n  \n  res.setHeader('Content-Type', mimeType);\n  res.setHeader('Cache-Control', 'no-cache');\n  \n  const stream = createReadStream(filePath);\n  stream.pipe(res);\n  \n  stream.on('error', (error) => {\n    console.error('Error reading file:', error);\n    res.writeHead(500);\n    res.end('Error reading file');\n  });\n}\n\nasync function serveDirectoryListing(dirPath, res, urlPath) {\n  try {\n    const files = await readdir(dirPath);\n    \n    res.setHeader('Content-Type', 'text/html');\n    res.writeHead(200);\n    \n    const html = `\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Directory: ${urlPath}</title>\n    <style>\n        body { font-family: monospace; margin: 20px; }\n        .file { margin: 5px 0; }\n        .dir { color: #0066cc; font-weight: bold; }\n        .file a { color: #333; text-decoration: none; }\n        .file a:hover { text-decoration: underline; }\n    </style>\n</head>\n<body>\n    <h2>Directory: ${urlPath}</h2>\n    <div class=\"files\">\n        ${files.map(file => {\n          const isDir = file.includes('.') === false;\n          const className = isDir ? 'dir' : 'file';\n          const href = isDir ? `${file}/` : file;\n          return `<div class=\"${className}\"><a href=\"${href}\">${file}</a></div>`;\n        }).join('')}\n    </div>\n</body>\n</html>`;\n    \n    res.end(html);\n  } catch (error) {\n    res.writeHead(500);\n    res.end('Error reading directory');\n  }\n}\n\nasync function serveStorageFile(filePath, res) {\n  try {\n    // Remove 'storage/' prefix to get the relative path\n    const relativePath = filePath.replace(/^storage\\//, '');\n    \n    // Get file info from storage manager\n    const fileInfo = await storageManager.servePublicFile(relativePath);\n    \n    // Set appropriate headers\n    res.writeHead(200, {\n      'Content-Type': fileInfo.mimeType,\n      'Content-Length': fileInfo.stats.size,\n      'Cache-Control': 'public, max-age=3600' // Cache for 1 hour\n    });\n    \n    // Pipe the file stream to response\n    fileInfo.stream.pipe(res);\n    \n    console.log(chalk.blue(`\uD83D\uDCC1 Served storage file: ${filePath}`));\n  } catch (error) {\n    console.error(chalk.red(`\u274C Storage file error: ${error.message}`));\n    res.writeHead(404, { 'Content-Type': 'text/plain' });\n    res.end('File not found');\n  }\n}\n\nasync function compileAndServeFlux(fluxPath, res, compiler) {\n  try {\n    const result = await compiler.compileFile(fluxPath);\n    \n    if (!result) {\n      res.writeHead(500);\n      res.end('Compilation failed');\n      return;\n    }\n    \n    res.setHeader('Content-Type', 'text/javascript');\n    res.setHeader('Cache-Control', 'no-cache');\n    res.writeHead(200);\n    res.end(result.output);\n    \n    console.log(chalk.green(`\u2705 Compiled: ${fluxPath}`));\n  } catch (error) {\n    console.error(chalk.red(`\u274C Compilation error: ${error.message}`));\n    res.writeHead(500);\n    res.end(`Compilation error: ${error.message}`);\n  }\n}\n\nasync function serve404(res, filePath, root) {\n  res.setHeader('Content-Type', 'text/html');\n  res.writeHead(404);\n  \n  // Custom 404 if provided\n  try {\n    const custom404a = resolve(root, 'public', '404.html');\n    const custom404b = resolve(root, 'public', '404.htm');\n    if (await fs.pathExists(custom404a)) {\n      res.end(await fs.readFile(custom404a, 'utf-8'));\n      return;\n    }\n    if (await fs.pathExists(custom404b)) {\n      res.end(await fs.readFile(custom404b, 'utf-8'));\n      return;\n    }\n  } catch {}\n  \n  const html = `\n<!DOCTYPE html>\n<html>\n<head>\n    <title>404 - File Not Found</title>\n    <style>\n        body { font-family: monospace; text-align: center; margin: 50px; }\n        .error { color: #e74c3c; font-size: 72px; margin: 20px; }\n        .message { color: #7f8c8d; font-size: 18px; }\n    </style>\n</head>\n<body>\n    <div class=\"error\">404</div>\n    <div class=\"message\">File not found: ${filePath}</div>\n</body>\n</html>`;\n  \n  res.end(html);\n}\n\nasync function serve500(res, error, root) {\n  try {\n    res.setHeader('Content-Type', 'text/html');\n    res.writeHead(500);\n    const custom500a = resolve(root, 'public', '500.html');\n    const custom500b = resolve(root, 'public', '500.htm');\n    if (await fs.pathExists(custom500a)) {\n      res.end(await fs.readFile(custom500a, 'utf-8'));\n      return;\n    }\n    if (await fs.pathExists(custom500b)) {\n      res.end(await fs.readFile(custom500b, 'utf-8'));\n      return;\n    }\n    const html = `\n<!DOCTYPE html>\n<html>\n<head>\n  <title>500 - Internal Server Error</title>\n  <style>\n    body { font-family: monospace; margin: 40px; }\n    .error { color: #e74c3c; font-size: 14px; white-space: pre-wrap; }\n  </style>\n</head>\n<body>\n  <h1>500 - Internal Server Error</h1>\n  <div class=\"error\">${(error && (error.stack || error.message)) || 'Unknown error'}</div>\n</body>\n</html>`;\n    res.end(html);\n  } catch {\n    res.writeHead(500);\n    res.end('Internal Server Error');\n  }\n}\n\nasync function setupFileWatching(root, compiler, connections) {\n  // Simple file watching using polling\n  // In production, you'd use chokidar or similar\n  \n  const watchInterval = setInterval(async () => {\n    try {\n      // Check for changes in common directories\n      const dirs = ['src', 'public', 'pages', 'components', 'stores'];\n      \n      for (const dir of dirs) {\n        const dirPath = join(root, dir);\n        try {\n          await access(dirPath);\n          // In a real implementation, you'd check file modification times\n          // and trigger recompilation when files change\n        } catch {\n          // Directory doesn't exist, skip\n        }\n      }\n    } catch (error) {\n      console.error('File watching error:', error);\n    }\n  }, 1000);\n  \n  // Cleanup on process exit\n  process.on('SIGINT', () => {\n    clearInterval(watchInterval);\n    process.exit(0);\n  });\n}\n\n// Simple WebSocket implementation for live reload\nclass WebSocket {\n  constructor() {\n    this.socket = null;\n  }\n  \n  setSocket(socket, request, head) {\n    this.socket = socket;\n    \n    // Send WebSocket handshake\n    const key = request.headers['sec-websocket-key'];\n    const accept = this.generateAccept(key);\n    \n    const response = [\n      'HTTP/1.1 101 Switching Protocols',\n      'Upgrade: websocket',\n      'Connection: Upgrade',\n      `Sec-WebSocket-Accept: ${accept}`,\n      '',\n      ''\n    ].join('\\r\\n');\n    \n    socket.write(response);\n    \n    socket.on('data', (data) => {\n      this.handleMessage(data);\n    });\n    \n    socket.on('close', () => {\n      this.socket = null;\n    });\n  }\n  \n  generateAccept(key) {\n    const crypto = require('crypto');\n    const magic = '258EAFA5-E914-47DA-95CA-C5AB0DC85B11';\n    const hash = crypto.createHash('sha1').update(key + magic).digest('base64');\n    return hash;\n  }\n  \n  handleMessage(data) {\n    // Simple WebSocket frame parsing\n    if (data.length < 2) return;\n    \n    const opcode = data[0] & 0x0F;\n    const payloadLength = data[1] & 0x7F;\n    \n    if (opcode === 8) { // Close frame\n      this.socket.end();\n      return;\n    }\n    \n    if (opcode === 1 && payloadLength > 0) { // Text frame\n      const payload = data.slice(2, 2 + payloadLength);\n      const message = payload.toString('utf8');\n      \n      this.emit('message', message);\n    }\n  }\n  \n  send(data) {\n    if (this.socket && !this.socket.destroyed) {\n      const message = typeof data === 'string' ? data : JSON.stringify(data);\n      const frame = this.createFrame(message);\n      this.socket.write(frame);\n    }\n  }\n  \n  createFrame(payload) {\n    const length = Buffer.byteLength(payload);\n    const frame = Buffer.alloc(2 + length);\n    \n    frame[0] = 0x81; // FIN + text frame\n    frame[1] = length;\n    frame.write(payload, 2);\n    \n    return frame;\n  }\n  \n  on(event, callback) {\n    if (event === 'message') {\n      this.messageCallback = callback;\n    } else if (event === 'close') {\n      this.closeCallback = callback;\n    }\n  }\n  \n  emit(event, data) {\n    if (event === 'message' && this.messageCallback) {\n      this.messageCallback(data);\n    } else if (event === 'close' && this.closeCallback) {\n      this.closeCallback();\n    }\n  }\n}\n\n// Load user middlewares from src/middleware/index.js if present\nasync function loadUserMiddlewares(root) {\n  try {\n    const candidate = resolve(root, 'src', 'middleware', 'index.js');\n    if (await fs.pathExists(candidate)) {\n      const mod = await import(pathToFileURL(candidate).href);\n      const list = mod.default || mod.middlewares;\n      if (Array.isArray(list)) return list;\n    }\n  } catch (e) {\n    console.warn('Warning: failed to load user middleware:', e?.message || e);\n  }\n  return [];\n}", "// flux-core/src/compiler/lexer.js\n// Tokenizes Flux source code into tokens\n\nexport class FluxLexer {\n  constructor(source) {\n    this.source = source;\n    this.position = 0;\n    this.start = 0;\n    this.line = 1;\n    this.column = 1;\n    this.tokens = [];\n    this.errors = [];\n  }\n\n  // Token types\n  static TOKEN_TYPES = {\n    // Literals\n    IDENTIFIER: 'IDENTIFIER',\n    NUMBER: 'NUMBER',\n    STRING: 'STRING',\n    BOOLEAN: 'BOOLEAN',\n    \n    // Keywords\n    COMPONENT: 'COMPONENT',\n    STATE: 'STATE',\n    PROP: 'PROP',\n    METHOD: 'METHOD',\n    RENDER: 'RENDER',\n    EFFECT: 'EFFECT',\n    COMPUTED: 'COMPUTED',\n    STORE: 'STORE',\n    ACTION: 'ACTION',\n    LIFECYCLE: 'LIFECYCLE',\n    GUARD: 'GUARD',\n    ROUTER: 'ROUTER',\n    ROUTE: 'ROUTE',\n    USE: 'USE',\n    IMPORT: 'IMPORT',\n    EXPORT: 'EXPORT',\n    ASYNC: 'ASYNC',\n    AWAIT: 'AWAIT',\n    IF: 'IF',\n    ELSE: 'ELSE',\n    FOR: 'FOR',\n    WHILE: 'WHILE',\n    RETURN: 'RETURN',\n    TRY: 'TRY',\n    CATCH: 'CATCH',\n    FINALLY: 'FINALLY',\n    \n    // Operators\n    ASSIGN: 'ASSIGN',\n    PLUS_ASSIGN: 'PLUS_ASSIGN',\n    MINUS_ASSIGN: 'MINUS_ASSIGN',\n    PLUS: 'PLUS',\n    MINUS: 'MINUS',\n    MULTIPLY: 'MULTIPLY',\n    DIVIDE: 'DIVIDE',\n    MODULO: 'MODULO',\n    EQUALS: 'EQUALS',\n    NOT_EQUALS: 'NOT_EQUALS',\n    LESS_THAN: 'LESS_THAN',\n    GREATER_THAN: 'GREATER_THAN',\n    LESS_EQUAL: 'LESS_EQUAL',\n    GREATER_EQUAL: 'GREATER_EQUAL',\n    LOGICAL_AND: 'LOGICAL_AND',\n    LOGICAL_OR: 'LOGICAL_OR',\n    LOGICAL_NOT: 'LOGICAL_NOT',\n    \n    // Delimiters\n    LEFT_PAREN: 'LEFT_PAREN',\n    RIGHT_PAREN: 'RIGHT_PAREN',\n    LEFT_BRACE: 'LEFT_BRACE',\n    RIGHT_BRACE: 'RIGHT_BRACE',\n    LEFT_BRACKET: 'LEFT_BRACKET',\n    RIGHT_BRACKET: 'RIGHT_BRACKET',\n    SEMICOLON: 'SEMICOLON',\n    COMMA: 'COMMA',\n    DOT: 'DOT',\n    COLON: 'COLON',\n    QUESTION: 'QUESTION',\n    \n    // JSX-like tokens\n    JSX_OPEN: 'JSX_OPEN',\n    JSX_CLOSE: 'JSX_CLOSE',\n    JSX_SELF_CLOSE: 'JSX_SELF_CLOSE',\n    JSX_TEXT: 'JSX_TEXT',\n    \n    // Decorators\n    AT: 'AT',\n    \n    // Special\n    NEWLINE: 'NEWLINE',\n    EOF: 'EOF',\n    UNKNOWN: 'UNKNOWN'\n  };\n\n  static KEYWORDS = {\n    'component': 'COMPONENT',\n    'state': 'STATE',\n    'prop': 'PROP',\n    'method': 'METHOD',\n    'render': 'RENDER',\n    'effect': 'EFFECT',\n    'computed': 'COMPUTED',\n    'store': 'STORE',\n    'action': 'ACTION',\n    'lifecycle': 'LIFECYCLE',\n    'guard': 'GUARD',\n    'router': 'ROUTER',\n    'route': 'ROUTE',\n    'use': 'USE',\n    'import': 'IMPORT',\n    'export': 'EXPORT',\n    'async': 'ASYNC',\n    'await': 'AWAIT',\n    'if': 'IF',\n    'else': 'ELSE',\n    'for': 'FOR',\n    'while': 'WHILE',\n    'return': 'RETURN',\n    'try': 'TRY',\n    'catch': 'CATCH',\n    'finally': 'FINALLY',\n    'true': 'BOOLEAN',\n    'false': 'BOOLEAN',\n    'null': 'BOOLEAN',\n    'undefined': 'BOOLEAN'\n  };\n\n  tokenize() {\n    while (!this.isAtEnd()) {\n      this.scanToken();\n    }\n    \n    this.addToken(FluxLexer.TOKEN_TYPES.EOF);\n    return this.tokens;\n  }\n\n  scanToken() {\n    this.start = this.position;\n    const c = this.advance();\n    \n    switch (c) {\n      case ' ':\n      case '\\r':\n      case '\\t':\n        break; // Ignore whitespace\n      \n      case '\\n':\n        this.line++;\n        this.column = 1;\n        this.addToken(FluxLexer.TOKEN_TYPES.NEWLINE);\n        break;\n      \n      case '(':\n        this.addToken(FluxLexer.TOKEN_TYPES.LEFT_PAREN);\n        break;\n      case ')':\n        this.addToken(FluxLexer.TOKEN_TYPES.RIGHT_PAREN);\n        break;\n      case '{':\n        this.addToken(FluxLexer.TOKEN_TYPES.LEFT_BRACE);\n        break;\n      case '}':\n        this.addToken(FluxLexer.TOKEN_TYPES.RIGHT_BRACE);\n        break;\n      case '[':\n        this.addToken(FluxLexer.TOKEN_TYPES.LEFT_BRACKET);\n        break;\n      case ']':\n        this.addToken(FluxLexer.TOKEN_TYPES.RIGHT_BRACKET);\n        break;\n      case ';':\n        this.addToken(FluxLexer.TOKEN_TYPES.SEMICOLON);\n        break;\n      case ',':\n        this.addToken(FluxLexer.TOKEN_TYPES.COMMA);\n        break;\n      case '.':\n        this.addToken(FluxLexer.TOKEN_TYPES.DOT);\n        break;\n      case ':':\n        this.addToken(FluxLexer.TOKEN_TYPES.COLON);\n        break;\n      case '?':\n        this.addToken(FluxLexer.TOKEN_TYPES.QUESTION);\n        break;\n      case '@':\n        this.addToken(FluxLexer.TOKEN_TYPES.AT);\n        break;\n      \n      case '+':\n        this.addToken(this.match('=') ? \n          FluxLexer.TOKEN_TYPES.PLUS_ASSIGN : \n          FluxLexer.TOKEN_TYPES.PLUS\n        );\n        break;\n      case '-':\n        this.addToken(this.match('=') ? \n          FluxLexer.TOKEN_TYPES.MINUS_ASSIGN : \n          FluxLexer.TOKEN_TYPES.MINUS\n        );\n        break;\n      case '*':\n        this.addToken(FluxLexer.TOKEN_TYPES.MULTIPLY);\n        break;\n      case '%':\n        this.addToken(FluxLexer.TOKEN_TYPES.MODULO);\n        break;\n      \n      case '!':\n        this.addToken(this.match('=') ? \n          FluxLexer.TOKEN_TYPES.NOT_EQUALS : \n          FluxLexer.TOKEN_TYPES.LOGICAL_NOT\n        );\n        break;\n      case '=':\n        this.addToken(this.match('=') ? \n          FluxLexer.TOKEN_TYPES.EQUALS : \n          FluxLexer.TOKEN_TYPES.ASSIGN\n        );\n        break;\n      case '<':\n        if (this.peek() === '/') {\n          this.advance(); // consume '/'\n          this.addToken(FluxLexer.TOKEN_TYPES.JSX_CLOSE);\n        } else if (this.match('=')) {\n          this.addToken(FluxLexer.TOKEN_TYPES.LESS_EQUAL);\n        } else {\n          this.addToken(FluxLexer.TOKEN_TYPES.JSX_OPEN);\n        }\n        break;\n      case '>':\n        this.addToken(this.match('=') ? \n          FluxLexer.TOKEN_TYPES.GREATER_EQUAL : \n          FluxLexer.TOKEN_TYPES.GREATER_THAN\n        );\n        break;\n      \n      case '&':\n        if (this.match('&')) {\n          this.addToken(FluxLexer.TOKEN_TYPES.LOGICAL_AND);\n        }\n        break;\n      case '|':\n        if (this.match('|')) {\n          this.addToken(FluxLexer.TOKEN_TYPES.LOGICAL_OR);\n        }\n        break;\n      \n      case '/':\n        if (this.match('/')) {\n          // Single line comment\n          while (this.peek() !== '\\n' && !this.isAtEnd()) {\n            this.advance();\n          }\n        } else if (this.match('*')) {\n          // Multi-line comment\n          this.blockComment();\n        } else if (this.match('>')) {\n          this.addToken(FluxLexer.TOKEN_TYPES.JSX_SELF_CLOSE);\n        } else {\n          this.addToken(FluxLexer.TOKEN_TYPES.DIVIDE);\n        }\n        break;\n      \n      case '\"':\n      case \"'\":\n        this.string(c);\n        break;\n      \n      default:\n        if (this.isDigit(c)) {\n          this.number();\n        } else if (this.isAlpha(c)) {\n          this.identifier();\n        } else {\n          this.addToken(FluxLexer.TOKEN_TYPES.UNKNOWN, c);\n        }\n        break;\n    }\n  }\n\n  identifier() {\n    while (this.isAlphaNumeric(this.peek())) {\n      this.advance();\n    }\n    \n    const text = this.source.substring(this.start, this.position);\n    const type = FluxLexer.KEYWORDS[text] || FluxLexer.TOKEN_TYPES.IDENTIFIER;\n    this.addToken(type, text);\n  }\n\n  number() {\n    while (this.isDigit(this.peek())) {\n      this.advance();\n    }\n    \n    // Look for decimal part\n    if (this.peek() === '.' && this.isDigit(this.peekNext())) {\n      this.advance(); // consume '.'\n      while (this.isDigit(this.peek())) {\n        this.advance();\n      }\n    }\n    \n    const value = parseFloat(this.source.substring(this.start, this.position));\n    this.addToken(FluxLexer.TOKEN_TYPES.NUMBER, value);\n  }\n\n  string(quote) {\n    while (this.peek() !== quote && !this.isAtEnd()) {\n      if (this.peek() === '\\n') this.line++;\n      this.advance();\n    }\n    \n    if (this.isAtEnd()) {\n      throw new Error(`Unterminated string at line ${this.line}`);\n    }\n    \n    this.advance(); // closing quote\n    \n    const value = this.source.substring(this.start + 1, this.position - 1);\n    this.addToken(FluxLexer.TOKEN_TYPES.STRING, value);\n  }\n\n  blockComment() {\n    while (!this.isAtEnd()) {\n      if (this.peek() === '*' && this.peekNext() === '/') {\n        this.advance(); // consume '*'\n        this.advance(); // consume '/'\n        break;\n      }\n      if (this.peek() === '\\n') this.line++;\n      this.advance();\n    }\n  }\n\n  match(expected) {\n    if (this.isAtEnd()) return false;\n    if (this.source.charAt(this.position) !== expected) return false;\n    \n    this.position++;\n    this.column++;\n    return true;\n  }\n\n  peek() {\n    if (this.isAtEnd()) return '\\0';\n    return this.source.charAt(this.position);\n  }\n\n  peekNext() {\n    if (this.position + 1 >= this.source.length) return '\\0';\n    return this.source.charAt(this.position + 1);\n  }\n\n  isAlpha(c) {\n    return (c >= 'a' && c <= 'z') ||\n           (c >= 'A' && c <= 'Z') ||\n           c === '_';\n  }\n\n  isAlphaNumeric(c) {\n    return this.isAlpha(c) || this.isDigit(c);\n  }\n\n  isDigit(c) {\n    return c >= '0' && c <= '9';\n  }\n\n  isAtEnd() {\n    return this.position >= this.source.length;\n  }\n\n  advance() {\n    this.column++;\n    return this.source.charAt(this.position++);\n  }\n\n  addToken(type, literal = null) {\n    let text;\n    if (type === FluxLexer.TOKEN_TYPES.EOF) {\n      text = '';\n    } else {\n      text = this.source.substring(this.start, this.position);\n    }\n    this.tokens.push({\n      type,\n      lexeme: text,\n      literal,\n      line: this.line,\n      column: this.column - text.length\n    });\n  }\n}", "// flux-core/src/ast/nodes.js\n// Abstract Syntax Tree node definitions for Flux language\n\nexport class ASTNode {\n  constructor(type, location) {\n    this.type = type;\n    this.location = location;\n  }\n}\n\n// Program root\nexport class Program extends ASTNode {\n  constructor(body, location) {\n    super('Program', location);\n    this.body = body; // Array of top-level statements\n  }\n}\n\n// Imports and Exports\nexport class ImportDeclaration extends ASTNode {\n  constructor(specifiers, source, location) {\n    super('ImportDeclaration', location);\n    this.specifiers = specifiers;\n    this.source = source;\n  }\n}\n\nexport class ImportSpecifier extends ASTNode {\n  constructor(imported, local, location) {\n    super('ImportSpecifier', location);\n    this.imported = imported;\n    this.local = local;\n  }\n}\n\nexport class ExportDeclaration extends ASTNode {\n  constructor(declaration, location) {\n    super('ExportDeclaration', location);\n    this.declaration = declaration;\n  }\n}\n\n// Component Declaration\nexport class ComponentDeclaration extends ASTNode {\n  constructor(name, decorators, body, location) {\n    super('ComponentDeclaration', location);\n    this.name = name;\n    this.decorators = decorators || [];\n    this.body = body;\n    this.state = [];\n    this.props = [];\n    this.methods = [];\n    this.effects = [];\n    this.computed = [];\n    this.render = null;\n    this.lifecycle = [];\n    \n    // Organize body items\n    this.organizeBody();\n  }\n  \n  organizeBody() {\n    for (const item of this.body) {\n      switch (item.type) {\n        case 'StateDeclaration':\n          this.state.push(item);\n          break;\n        case 'PropDeclaration':\n          this.props.push(item);\n          break;\n        case 'MethodDeclaration':\n          this.methods.push(item);\n          break;\n        case 'EffectDeclaration':\n          this.effects.push(item);\n          break;\n        case 'ComputedDeclaration':\n          this.computed.push(item);\n          break;\n        case 'RenderDeclaration':\n          this.render = item;\n          break;\n        case 'LifecycleDeclaration':\n          this.lifecycle.push(item);\n          break;\n      }\n    }\n  }\n}\n\n// Store Declaration\nexport class StoreDeclaration extends ASTNode {\n  constructor(name, body, location) {\n    super('StoreDeclaration', location);\n    this.name = name;\n    this.body = body;\n    this.state = [];\n    this.actions = [];\n    this.computed = [];\n    \n    this.organizeBody();\n  }\n  \n  organizeBody() {\n    for (const item of this.body) {\n      switch (item.type) {\n        case 'StateDeclaration':\n          this.state.push(item);\n          break;\n        case 'ActionDeclaration':\n          this.actions.push(item);\n          break;\n        case 'ComputedDeclaration':\n          this.computed.push(item);\n          break;\n      }\n    }\n  }\n}\n\n// Declarations\nexport class StateDeclaration extends ASTNode {\n  constructor(name, initialValue, typeAnnotation, location) {\n    super('StateDeclaration', location);\n    this.name = name;\n    this.initialValue = initialValue;\n    this.typeAnnotation = typeAnnotation;\n  }\n}\n\nexport class PropDeclaration extends ASTNode {\n  constructor(name, typeAnnotation, defaultValue, location) {\n    super('PropDeclaration', location);\n    this.name = name;\n    this.typeAnnotation = typeAnnotation;\n    this.defaultValue = defaultValue;\n  }\n}\n\nexport class MethodDeclaration extends ASTNode {\n  constructor(name, parameters, body, isAsync, location) {\n    super('MethodDeclaration', location);\n    this.name = name;\n    this.parameters = parameters;\n    this.body = body;\n    this.isAsync = isAsync;\n  }\n}\n\nexport class ActionDeclaration extends ASTNode {\n  constructor(name, parameters, body, isAsync, location) {\n    super('ActionDeclaration', location);\n    this.name = name;\n    this.parameters = parameters;\n    this.body = body;\n    this.isAsync = isAsync;\n  }\n}\n\nexport class EffectDeclaration extends ASTNode {\n  constructor(dependencies, body, location) {\n    super('EffectDeclaration', location);\n    this.dependencies = dependencies;\n    this.body = body;\n  }\n}\n\nexport class ComputedDeclaration extends ASTNode {\n  constructor(name, body, location) {\n    super('ComputedDeclaration', location);\n    this.name = name;\n    this.body = body;\n  }\n}\n\nexport class RenderDeclaration extends ASTNode {\n  constructor(body, location) {\n    super('RenderDeclaration', location);\n    this.body = body;\n  }\n}\n\nexport class LifecycleDeclaration extends ASTNode {\n  constructor(phase, body, isAsync, location) {\n    super('LifecycleDeclaration', location);\n    this.phase = phase; // 'mounted', 'updated', 'unmounted', etc.\n    this.body = body;\n    this.isAsync = isAsync;\n  }\n}\n\n// Decorators\nexport class Decorator extends ASTNode {\n  constructor(name, arguments_, location) {\n    super('Decorator', location);\n    this.name = name;\n    this.arguments = arguments_ || [];\n  }\n}\n\n// Expressions\nexport class BinaryExpression extends ASTNode {\n  constructor(left, operator, right, location) {\n    super('BinaryExpression', location);\n    this.left = left;\n    this.operator = operator;\n    this.right = right;\n  }\n}\n\nexport class UnaryExpression extends ASTNode {\n  constructor(operator, operand, location) {\n    super('UnaryExpression', location);\n    this.operator = operator;\n    this.operand = operand;\n  }\n}\n\nexport class AssignmentExpression extends ASTNode {\n  constructor(left, operator, right, location) {\n    super('AssignmentExpression', location);\n    this.left = left;\n    this.operator = operator;\n    this.right = right;\n  }\n}\n\nexport class CallExpression extends ASTNode {\n  constructor(callee, arguments_, location) {\n    super('CallExpression', location);\n    this.callee = callee;\n    this.arguments = arguments_;\n  }\n}\n\nexport class MemberExpression extends ASTNode {\n  constructor(object, property, computed, location) {\n    super('MemberExpression', location);\n    this.object = object;\n    this.property = property;\n    this.computed = computed;\n  }\n}\n\nexport class ConditionalExpression extends ASTNode {\n  constructor(test, consequent, alternate, location) {\n    super('ConditionalExpression', location);\n    this.test = test;\n    this.consequent = consequent;\n    this.alternate = alternate;\n  }\n}\n\nexport class ArrayExpression extends ASTNode {\n  constructor(elements, location) {\n    super('ArrayExpression', location);\n    this.elements = elements;\n  }\n}\n\nexport class ObjectExpression extends ASTNode {\n  constructor(properties, location) {\n    super('ObjectExpression', location);\n    this.properties = properties;\n  }\n}\n\nexport class Property extends ASTNode {\n  constructor(key, value, kind, location) {\n    super('Property', location);\n    this.key = key;\n    this.value = value;\n    this.kind = kind || 'init';\n  }\n}\n\n// Literals\nexport class Literal extends ASTNode {\n  constructor(value, location) {\n    super('Literal', location);\n    this.value = value;\n  }\n}\n\nexport class Identifier extends ASTNode {\n  constructor(name, location) {\n    super('Identifier', location);\n    this.name = name;\n  }\n}\n\n// JSX-like Nodes\nexport class JSXElement extends ASTNode {\n  constructor(openingElement, children, closingElement, location) {\n    super('JSXElement', location);\n    this.openingElement = openingElement;\n    this.children = children;\n    this.closingElement = closingElement;\n    this.selfClosing = !closingElement;\n  }\n}\n\nexport class JSXOpeningElement extends ASTNode {\n  constructor(name, attributes, selfClosing, location) {\n    super('JSXOpeningElement', location);\n    this.name = name;\n    this.attributes = attributes;\n    this.selfClosing = selfClosing;\n  }\n}\n\nexport class JSXClosingElement extends ASTNode {\n  constructor(name, location) {\n    super('JSXClosingElement', location);\n    this.name = name;\n  }\n}\n\nexport class JSXAttribute extends ASTNode {\n  constructor(name, value, location) {\n    super('JSXAttribute', location);\n    this.name = name;\n    this.value = value;\n  }\n}\n\nexport class JSXExpressionContainer extends ASTNode {\n  constructor(expression, location) {\n    super('JSXExpressionContainer', location);\n    this.expression = expression;\n  }\n}\n\nexport class JSXText extends ASTNode {\n  constructor(value, location) {\n    super('JSXText', location);\n    this.value = value;\n  }\n}\n\n// Statements\nexport class ExpressionStatement extends ASTNode {\n  constructor(expression, location) {\n    super('ExpressionStatement', location);\n    this.expression = expression;\n  }\n}\n\nexport class BlockStatement extends ASTNode {\n  constructor(body, location) {\n    super('BlockStatement', location);\n    this.body = body;\n  }\n}\n\nexport class IfStatement extends ASTNode {\n  constructor(test, consequent, alternate, location) {\n    super('IfStatement', location);\n    this.test = test;\n    this.consequent = consequent;\n    this.alternate = alternate;\n  }\n}\n\nexport class WhileStatement extends ASTNode {\n  constructor(test, body, location) {\n    super('WhileStatement', location);\n    this.test = test;\n    this.body = body;\n  }\n}\n\nexport class ForStatement extends ASTNode {\n  constructor(init, test, update, body, location) {\n    super('ForStatement', location);\n    this.init = init;\n    this.test = test;\n    this.update = update;\n    this.body = body;\n  }\n}\n\nexport class ReturnStatement extends ASTNode {\n  constructor(argument, location) {\n    super('ReturnStatement', location);\n    this.argument = argument;\n  }\n}\n\nexport class TryStatement extends ASTNode {\n  constructor(block, handler, finalizer, location) {\n    super('TryStatement', location);\n    this.block = block;\n    this.handler = handler;\n    this.finalizer = finalizer;\n  }\n}\n\nexport class CatchClause extends ASTNode {\n  constructor(param, body, location) {\n    super('CatchClause', location);\n    this.param = param;\n    this.body = body;\n  }\n}\n\nexport class ThrowStatement extends ASTNode {\n  constructor(argument, location) {\n    super('ThrowStatement', location);\n    this.argument = argument;\n  }\n}\n\nexport class VariableDeclaration extends ASTNode {\n  constructor(declarations, kind, location) {\n    super('VariableDeclaration', location);\n    this.declarations = declarations;\n    this.kind = kind; // 'var', 'let', 'const'\n  }\n}\n\nexport class VariableDeclarator extends ASTNode {\n  constructor(id, init, location) {\n    super('VariableDeclarator', location);\n    this.id = id;\n    this.init = init;\n  }\n}\n\n// Route specific nodes\nexport class RouteDeclaration extends ASTNode {\n  constructor(path, component, guards, loaders, meta, location) {\n    super('RouteDeclaration', location);\n    this.path = path;\n    this.component = component;\n    this.guards = guards || [];\n    this.loaders = loaders || [];\n    this.meta = meta;\n  }\n}\n\nexport class GuardDeclaration extends ASTNode {\n  constructor(name, parameters, body, location) {\n    super('GuardDeclaration', location);\n    this.name = name;\n    this.parameters = parameters;\n    this.body = body;\n  }\n}\n\n// Type annotations\nexport class TypeAnnotation extends ASTNode {\n  constructor(typeAnnotation, location) {\n    super('TypeAnnotation', location);\n    this.typeAnnotation = typeAnnotation;\n  }\n}\n\nexport class TSStringKeyword extends ASTNode {\n  constructor(location) {\n    super('TSStringKeyword', location);\n  }\n}\n\nexport class TSNumberKeyword extends ASTNode {\n  constructor(location) {\n    super('TSNumberKeyword', location);\n  }\n}\n\nexport class TSBooleanKeyword extends ASTNode {\n  constructor(location) {\n    super('TSBooleanKeyword', location);\n  }\n}\n\nexport class TSArrayType extends ASTNode {\n  constructor(elementType, location) {\n    super('TSArrayType', location);\n    this.elementType = elementType;\n  }\n}\n\nexport class TSUnionType extends ASTNode {\n  constructor(types, location) {\n    super('TSUnionType', location);\n    this.types = types;\n  }\n}\n\n// Utility function to create location object\nexport function createLocation(startLine, startColumn, endLine, endColumn) {\n  return {\n    start: { line: startLine, column: startColumn },\n    end: { line: endLine, column: endColumn }\n  };\n}", "// flux-core/src/compiler/parser.js\n// Recursive descent parser for Flux language\n\nimport { FluxLexer } from './lexer.js';\nimport * as AST from '../ast/nodes.js';\n\nexport class FluxParser {\n  constructor(tokens) {\n    this.tokens = tokens;\n    this.current = 0;\n    this.errors = [];\n  }\n\n  static parse(source) {\n    const lexer = new FluxLexer(source);\n    const tokens = lexer.tokenize();\n    const parser = new FluxParser(tokens);\n    return parser.program();\n  }\n\n  program() {\n    const body = [];\n    \n    while (!this.isAtEnd()) {\n      // Skip newlines at top level\n      if (this.check('NEWLINE')) {\n        this.advance();\n        continue;\n      }\n      \n      const stmt = this.topLevelStatement();\n      if (stmt) body.push(stmt);\n    }\n    \n    return new AST.Program(body, this.getCurrentLocation());\n  }\n\n  topLevelStatement() {\n    try {\n      if (this.match('IMPORT')) {\n        return this.importDeclaration();\n      }\n      \n      if (this.match('EXPORT')) {\n        return this.exportDeclaration();\n      }\n      \n      // Handle decorators\n      const decorators = [];\n      while (this.check('AT')) {\n        decorators.push(this.decorator());\n      }\n      \n      if (this.match('COMPONENT')) {\n        return this.componentDeclaration(decorators);\n      }\n      \n      if (this.match('STORE')) {\n        return this.storeDeclaration(decorators);\n      }\n      \n      if (this.match('GUARD')) {\n        return this.guardDeclaration(decorators);\n      }\n      \n      return this.statement();\n    } catch (error) {\n      this.synchronize();\n      throw error;\n    }\n  }\n\n  importDeclaration() {\n    const specifiers = [];\n    \n    if (this.check('LEFT_BRACE')) {\n      // Named imports: import { name1, name2 } from 'module'\n      this.consume('LEFT_BRACE', 'Expected \"{\"');\n      \n      do {\n        const imported = this.consume('IDENTIFIER', 'Expected identifier');\n        let local = imported;\n        \n        if (this.match('AS')) {\n          local = this.consume('IDENTIFIER', 'Expected identifier after \"as\"');\n        }\n        \n        specifiers.push(new AST.ImportSpecifier(\n          new AST.Identifier(imported.lexeme),\n          new AST.Identifier(local.lexeme)\n        ));\n      } while (this.match('COMMA'));\n      \n      this.consume('RIGHT_BRACE', 'Expected \"}\"');\n    } else {\n      // Default import: import name from 'module'\n      const name = this.consume('IDENTIFIER', 'Expected identifier');\n      specifiers.push(new AST.ImportSpecifier(\n        new AST.Identifier('default'),\n        new AST.Identifier(name.lexeme)\n      ));\n    }\n    \n    this.consume('FROM', 'Expected \"from\"');\n    const source = this.consume('STRING', 'Expected module path');\n    \n    return new AST.ImportDeclaration(\n      specifiers,\n      new AST.Literal(source.literal),\n      this.getCurrentLocation()\n    );\n  }\n\n  exportDeclaration() {\n    const declaration = this.topLevelStatement();\n    return new AST.ExportDeclaration(declaration, this.getCurrentLocation());\n  }\n\n  decorator() {\n    this.consume('AT', 'Expected \"@\"');\n    const name = this.consume('IDENTIFIER', 'Expected decorator name');\n    \n    let args = [];\n    if (this.match('LEFT_PAREN')) {\n      args = this.argumentList();\n      this.consume('RIGHT_PAREN', 'Expected \")\"');\n    }\n    \n    return new AST.Decorator(\n      new AST.Identifier(name.lexeme),\n      args,\n      this.getCurrentLocation()\n    );\n  }\n\n  componentDeclaration(decorators = []) {\n    const name = this.consume('IDENTIFIER', 'Expected component name');\n    \n    this.consume('LEFT_BRACE', 'Expected \"{\"');\n    \n    const body = [];\n    while (!this.check('RIGHT_BRACE') && !this.isAtEnd()) {\n      if (this.check('NEWLINE')) {\n        this.advance();\n        continue;\n      }\n      \n      const member = this.componentMember();\n      if (member) body.push(member);\n    }\n    \n    this.consume('RIGHT_BRACE', 'Expected \"}\"');\n    \n    return new AST.ComponentDeclaration(\n      new AST.Identifier(name.lexeme),\n      decorators,\n      body,\n      this.getCurrentLocation()\n    );\n  }\n\n  componentMember() {\n    if (this.match('STATE')) {\n      return this.stateDeclaration();\n    }\n    \n    if (this.match('PROP')) {\n      return this.propDeclaration();\n    }\n    \n    if (this.match('METHOD')) {\n      return this.methodDeclaration();\n    }\n    \n    if (this.match('EFFECT')) {\n      return this.effectDeclaration();\n    }\n    \n    if (this.match('COMPUTED')) {\n      return this.computedDeclaration();\n    }\n    \n    if (this.match('RENDER')) {\n      return this.renderDeclaration();\n    }\n    \n    if (this.match('LIFECYCLE')) {\n      return this.lifecycleDeclaration();\n    }\n    \n    return this.statement();\n  }\n\n  stateDeclaration() {\n    const name = this.consume('IDENTIFIER', 'Expected state variable name');\n    \n    let typeAnnotation = null;\n    if (this.match('COLON')) {\n      typeAnnotation = this.typeAnnotation();\n    }\n    \n    let initialValue = null;\n    if (this.match('ASSIGN')) {\n      initialValue = this.expression();\n    }\n    \n    return new AST.StateDeclaration(\n      new AST.Identifier(name.lexeme),\n      initialValue,\n      typeAnnotation,\n      this.getCurrentLocation()\n    );\n  }\n\n  propDeclaration() {\n    const name = this.consume('IDENTIFIER', 'Expected prop name');\n    \n    let typeAnnotation = null;\n    if (this.match('COLON')) {\n      typeAnnotation = this.typeAnnotation();\n    }\n    \n    let defaultValue = null;\n    if (this.match('ASSIGN')) {\n      defaultValue = this.expression();\n    }\n    \n    return new AST.PropDeclaration(\n      new AST.Identifier(name.lexeme),\n      typeAnnotation,\n      defaultValue,\n      this.getCurrentLocation()\n    );\n  }\n\n  methodDeclaration() {\n    const isAsync = this.match('ASYNC');\n    const name = this.consume('IDENTIFIER', 'Expected method name');\n    \n    this.consume('LEFT_PAREN', 'Expected \"(\"');\n    const parameters = this.parameterList();\n    this.consume('RIGHT_PAREN', 'Expected \")\"');\n    \n    const body = this.blockStatement();\n    \n    return new AST.MethodDeclaration(\n      new AST.Identifier(name.lexeme),\n      parameters,\n      body,\n      isAsync,\n      this.getCurrentLocation()\n    );\n  }\n\n  effectDeclaration() {\n    let dependencies = [];\n    \n    if (this.match('ON')) {\n      // effect on dependency1, dependency2 { ... }\n      dependencies.push(this.expression());\n      \n      while (this.match('COMMA')) {\n        dependencies.push(this.expression());\n      }\n    }\n    \n    const body = this.blockStatement();\n    \n    return new AST.EffectDeclaration(\n      dependencies,\n      body,\n      this.getCurrentLocation()\n    );\n  }\n\n  computedDeclaration() {\n    const name = this.consume('IDENTIFIER', 'Expected computed property name');\n    \n    this.consume('LEFT_PAREN', 'Expected \"(\"');\n    this.consume('RIGHT_PAREN', 'Expected \")\"');\n    \n    const body = this.blockStatement();\n    \n    return new AST.ComputedDeclaration(\n      new AST.Identifier(name.lexeme),\n      body,\n      this.getCurrentLocation()\n    );\n  }\n\n  renderDeclaration() {\n    const body = this.blockStatement();\n    \n    return new AST.RenderDeclaration(\n      body,\n      this.getCurrentLocation()\n    );\n  }\n\n  lifecycleDeclaration() {\n    const isAsync = this.match('ASYNC');\n    const phase = this.consume('IDENTIFIER', 'Expected lifecycle phase');\n    \n    this.consume('LEFT_PAREN', 'Expected \"(\"');\n    this.consume('RIGHT_PAREN', 'Expected \")\"');\n    \n    const body = this.blockStatement();\n    \n    return new AST.LifecycleDeclaration(\n      phase.lexeme,\n      body,\n      isAsync,\n      this.getCurrentLocation()\n    );\n  }\n\n  storeDeclaration(decorators = []) {\n    const name = this.consume('IDENTIFIER', 'Expected store name');\n    \n    this.consume('LEFT_BRACE', 'Expected \"{\"');\n    \n    const body = [];\n    while (!this.check('RIGHT_BRACE') && !this.isAtEnd()) {\n      if (this.check('NEWLINE')) {\n        this.advance();\n        continue;\n      }\n      \n      const member = this.storeMember();\n      if (member) body.push(member);\n    }\n    \n    this.consume('RIGHT_BRACE', 'Expected \"}\"');\n    \n    return new AST.StoreDeclaration(\n      new AST.Identifier(name.lexeme),\n      body,\n      this.getCurrentLocation()\n    );\n  }\n\n  storeMember() {\n    if (this.match('STATE')) {\n      return this.stateDeclaration();\n    }\n    \n    if (this.match('ACTION')) {\n      return this.actionDeclaration();\n    }\n    \n    if (this.match('COMPUTED')) {\n      return this.computedDeclaration();\n    }\n    \n    return this.statement();\n  }\n\n  actionDeclaration() {\n    const isAsync = this.match('ASYNC');\n    const name = this.consume('IDENTIFIER', 'Expected action name');\n    \n    this.consume('LEFT_PAREN', 'Expected \"(\"');\n    const parameters = this.parameterList();\n    this.consume('RIGHT_PAREN', 'Expected \")\"');\n    \n    const body = this.blockStatement();\n    \n    return new AST.ActionDeclaration(\n      new AST.Identifier(name.lexeme),\n      parameters,\n      body,\n      isAsync,\n      this.getCurrentLocation()\n    );\n  }\n\n  guardDeclaration(decorators = []) {\n    const name = this.consume('IDENTIFIER', 'Expected guard name');\n    \n    this.consume('LEFT_PAREN', 'Expected \"(\"');\n    const parameters = this.parameterList();\n    this.consume('RIGHT_PAREN', 'Expected \")\"');\n    \n    const body = this.blockStatement();\n    \n    return new AST.GuardDeclaration(\n      new AST.Identifier(name.lexeme),\n      parameters,\n      body,\n      this.getCurrentLocation()\n    );\n  }\n\n  // Statements\n  statement() {\n    if (this.match('IF')) {\n      return this.ifStatement();\n    }\n    \n    if (this.match('WHILE')) {\n      return this.whileStatement();\n    }\n    \n    if (this.match('FOR')) {\n      return this.forStatement();\n    }\n    \n    if (this.match('RETURN')) {\n      return this.returnStatement();\n    }\n    \n    if (this.match('TRY')) {\n      return this.tryStatement();\n    }\n    \n    if (this.match('LEFT_BRACE')) {\n      return this.blockStatement();\n    }\n    \n    return this.expressionStatement();\n  }\n\n  ifStatement() {\n    this.consume('LEFT_PAREN', 'Expected \"(\" after \"if\"');\n    const test = this.expression();\n    this.consume('RIGHT_PAREN', 'Expected \")\" after if condition');\n    \n    const consequent = this.statement();\n    let alternate = null;\n    \n    if (this.match('ELSE')) {\n      alternate = this.statement();\n    }\n    \n    return new AST.IfStatement(test, consequent, alternate, this.getCurrentLocation());\n  }\n\n  whileStatement() {\n    this.consume('LEFT_PAREN', 'Expected \"(\" after \"while\"');\n    const test = this.expression();\n    this.consume('RIGHT_PAREN', 'Expected \")\" after while condition');\n    \n    const body = this.statement();\n    \n    return new AST.WhileStatement(test, body, this.getCurrentLocation());\n  }\n\n  forStatement() {\n    this.consume('LEFT_PAREN', 'Expected \"(\" after \"for\"');\n    \n    let init = null;\n    if (!this.check('SEMICOLON')) {\n      init = this.expression();\n    }\n    this.consume('SEMICOLON', 'Expected \";\" after for loop initializer');\n    \n    let test = null;\n    if (!this.check('SEMICOLON')) {\n      test = this.expression();\n    }\n    this.consume('SEMICOLON', 'Expected \";\" after for loop condition');\n    \n    let update = null;\n    if (!this.check('RIGHT_PAREN')) {\n      update = this.expression();\n    }\n    this.consume('RIGHT_PAREN', 'Expected \")\" after for clauses');\n    \n    const body = this.statement();\n    \n    return new AST.ForStatement(init, test, update, body, this.getCurrentLocation());\n  }\n\n  returnStatement() {\n    let argument = null;\n    \n    if (!this.check('NEWLINE') && !this.check('SEMICOLON')) {\n      argument = this.expression();\n    }\n    \n    return new AST.ReturnStatement(argument, this.getCurrentLocation());\n  }\n\n  tryStatement() {\n    const block = this.blockStatement();\n    \n    let handler = null;\n    if (this.match('CATCH')) {\n      this.consume('LEFT_PAREN', 'Expected \"(\" after \"catch\"');\n      const param = this.consume('IDENTIFIER', 'Expected catch parameter');\n      this.consume('RIGHT_PAREN', 'Expected \")\" after catch parameter');\n      \n      const body = this.blockStatement();\n      handler = new AST.CatchClause(\n        new AST.Identifier(param.lexeme),\n        body,\n        this.getCurrentLocation()\n      );\n    }\n    \n    let finalizer = null;\n    if (this.match('FINALLY')) {\n      finalizer = this.blockStatement();\n    }\n    \n    return new AST.TryStatement(block, handler, finalizer, this.getCurrentLocation());\n  }\n\n  blockStatement() {\n    this.consume('LEFT_BRACE', 'Expected \"{\"');\n    \n    const body = [];\n    while (!this.check('RIGHT_BRACE') && !this.isAtEnd()) {\n      if (this.check('NEWLINE')) {\n        this.advance();\n        continue;\n      }\n      \n      body.push(this.statement());\n    }\n    \n    this.consume('RIGHT_BRACE', 'Expected \"}\"');\n    \n    return new AST.BlockStatement(body, this.getCurrentLocation());\n  }\n\n  expressionStatement() {\n    const expr = this.expression();\n    return new AST.ExpressionStatement(expr, this.getCurrentLocation());\n  }\n\n  // Expressions\n  expression() {\n    return this.assignment();\n  }\n\n  assignment() {\n    const expr = this.ternary();\n    \n    if (this.match('ASSIGN', 'PLUS_ASSIGN', 'MINUS_ASSIGN')) {\n      const operator = this.previous();\n      const value = this.assignment();\n      \n      if (expr.type !== 'Identifier') {\n        throw new Error('Invalid assignment target');\n      }\n      \n      return new AST.AssignmentExpression(\n        expr,\n        operator.lexeme,\n        value,\n        this.getCurrentLocation()\n      );\n    }\n    \n    return expr;\n  }\n\n  ternary() {\n    let expr = this.logicalOr();\n    \n    if (this.match('QUESTION')) {\n      const consequent = this.expression();\n      this.consume('COLON', 'Expected \":\" in ternary expression');\n      const alternate = this.ternary();\n      \n      expr = new AST.ConditionalExpression(\n        expr,\n        consequent,\n        alternate,\n        this.getCurrentLocation()\n      );\n    }\n    \n    return expr;\n  }\n\n  logicalOr() {\n    let expr = this.logicalAnd();\n    \n    while (this.match('LOGICAL_OR')) {\n      const operator = this.previous();\n      const right = this.logicalAnd();\n      expr = new AST.BinaryExpression(\n        expr,\n        operator.lexeme,\n        right,\n        this.getCurrentLocation()\n      );\n    }\n    \n    return expr;\n  }\n\n  logicalAnd() {\n    let expr = this.equality();\n    \n    while (this.match('LOGICAL_AND')) {\n      const operator = this.previous();\n      const right = this.equality();\n      expr = new AST.BinaryExpression(\n        expr,\n        operator.lexeme,\n        right,\n        this.getCurrentLocation()\n      );\n    }\n    \n    return expr;\n  }\n\n  equality() {\n    let expr = this.comparison();\n    \n    while (this.match('EQUALS', 'NOT_EQUALS')) {\n      const operator = this.previous();\n      const right = this.comparison();\n      expr = new AST.BinaryExpression(\n        expr,\n        operator.lexeme,\n        right,\n        this.getCurrentLocation()\n      );\n    }\n    \n    return expr;\n  }\n\n  comparison() {\n    let expr = this.addition();\n    \n    while (this.match('GREATER_THAN', 'GREATER_EQUAL', 'LESS_THAN', 'LESS_EQUAL')) {\n      const operator = this.previous();\n      const right = this.addition();\n      expr = new AST.BinaryExpression(\n        expr,\n        operator.lexeme,\n        right,\n        this.getCurrentLocation()\n      );\n    }\n    \n    return expr;\n  }\n\n  addition() {\n    let expr = this.multiplication();\n    \n    while (this.match('PLUS', 'MINUS')) {\n      const operator = this.previous();\n      const right = this.multiplication();\n      expr = new AST.BinaryExpression(\n        expr,\n        operator.lexeme,\n        right,\n        this.getCurrentLocation()\n      );\n    }\n    \n    return expr;\n  }\n\n  multiplication() {\n    let expr = this.unary();\n    \n    while (this.match('MULTIPLY', 'DIVIDE', 'MODULO')) {\n      const operator = this.previous();\n      const right = this.unary();\n      expr = new AST.BinaryExpression(\n        expr,\n        operator.lexeme,\n        right,\n        this.getCurrentLocation()\n      );\n    }\n    \n    return expr;\n  }\n\n  unary() {\n    if (this.match('LOGICAL_NOT', 'MINUS', 'PLUS')) {\n      const operator = this.previous();\n      const right = this.unary();\n      return new AST.UnaryExpression(\n        operator.lexeme,\n        right,\n        this.getCurrentLocation()\n      );\n    }\n    \n    return this.postfix();\n  }\n\n  postfix() {\n    let expr = this.primary();\n    \n    while (true) {\n      if (this.match('LEFT_PAREN')) {\n        // Function call\n        const args = this.argumentList();\n        this.consume('RIGHT_PAREN', 'Expected \")\" after arguments');\n        \n        expr = new AST.CallExpression(\n          expr,\n          args,\n          this.getCurrentLocation()\n        );\n      } else if (this.match('LEFT_BRACKET')) {\n        // Array access\n        const index = this.expression();\n        this.consume('RIGHT_BRACKET', 'Expected \"]\" after array index');\n        \n        expr = new AST.MemberExpression(\n          expr,\n          index,\n          true, // computed\n          this.getCurrentLocation()\n        );\n      } else if (this.match('DOT')) {\n        // Property access\n        const property = this.consume('IDENTIFIER', 'Expected property name');\n        \n        expr = new AST.MemberExpression(\n          expr,\n          new AST.Identifier(property.lexeme),\n          false, // not computed\n          this.getCurrentLocation()\n        );\n      } else {\n        break;\n      }\n    }\n    \n    return expr;\n  }\n\n  primary() {\n    if (this.match('BOOLEAN')) {\n      return new AST.Literal(this.previous().literal, this.getCurrentLocation());\n    }\n    \n    if (this.match('NUMBER')) {\n      return new AST.Literal(this.previous().literal, this.getCurrentLocation());\n    }\n    \n    if (this.match('STRING')) {\n      return new AST.Literal(this.previous().literal, this.getCurrentLocation());\n    }\n    \n    if (this.match('IDENTIFIER')) {\n      return new AST.Identifier(this.previous().lexeme, this.getCurrentLocation());\n    }\n    \n    if (this.match('LEFT_PAREN')) {\n      const expr = this.expression();\n      this.consume('RIGHT_PAREN', 'Expected \")\" after expression');\n      return expr;\n    }\n    \n    if (this.match('LEFT_BRACKET')) {\n      // Array literal\n      const elements = [];\n      \n      if (!this.check('RIGHT_BRACKET')) {\n        do {\n          elements.push(this.expression());\n        } while (this.match('COMMA'));\n      }\n      \n      this.consume('RIGHT_BRACKET', 'Expected \"]\" after array elements');\n      \n      return new AST.ArrayExpression(elements, this.getCurrentLocation());\n    }\n    \n    if (this.match('LEFT_BRACE')) {\n      // Object literal\n      const properties = [];\n      \n      if (!this.check('RIGHT_BRACE')) {\n        do {\n          if (this.check('NEWLINE')) {\n            this.advance();\n            continue;\n          }\n          \n          let key;\n          if (this.match('STRING')) {\n            key = new AST.Literal(this.previous().literal);\n          } else {\n            const name = this.consume('IDENTIFIER', 'Expected property name');\n            key = new AST.Identifier(name.lexeme);\n          }\n          \n          this.consume('COLON', 'Expected \":\" after property name');\n          const value = this.expression();\n          \n          properties.push(new AST.Property(key, value, 'init', this.getCurrentLocation()));\n        } while (this.match('COMMA'));\n      }\n      \n      this.consume('RIGHT_BRACE', 'Expected \"}\" after object properties');\n      \n      return new AST.ObjectExpression(properties, this.getCurrentLocation());\n    }\n    \n    // JSX Element\n    if (this.check('JSX_OPEN')) {\n      return this.jsxElement();\n    }\n    \n    throw new Error(`Unexpected token: ${this.peek().lexeme} at line ${this.peek().line}`);\n  }\n\n  jsxElement() {\n    this.consume('JSX_OPEN', 'Expected \"<\"');\n    \n    // Element name\n    const name = this.consume('IDENTIFIER', 'Expected element name');\n    const elementName = new AST.Identifier(name.lexeme);\n    \n    // Attributes\n    const attributes = [];\n    while (!this.check('GREATER_THAN') && !this.check('JSX_SELF_CLOSE') && !this.isAtEnd()) {\n      attributes.push(this.jsxAttribute());\n    }\n    \n    // Self-closing tag\n    if (this.match('JSX_SELF_CLOSE')) {\n      return new AST.JSXElement(\n        new AST.JSXOpeningElement(elementName, attributes, true),\n        [],\n        null,\n        this.getCurrentLocation()\n      );\n    }\n    \n    this.consume('GREATER_THAN', 'Expected \">\" after opening tag');\n    \n    // Children\n    const children = [];\n    while (!this.check('JSX_CLOSE') && !this.isAtEnd()) {\n      if (this.check('JSX_OPEN') && this.peekNext().type === 'IDENTIFIER') {\n        // Nested element\n        children.push(this.jsxElement());\n      } else if (this.check('LEFT_BRACE')) {\n        // Expression\n        this.advance(); // consume '{'\n        const expr = this.expression();\n        this.consume('RIGHT_BRACE', 'Expected \"}\" after JSX expression');\n        children.push(new AST.JSXExpressionContainer(expr));\n      } else {\n        // Text content\n        let text = '';\n        while (!this.check('JSX_OPEN') && !this.check('JSX_CLOSE') && !this.check('LEFT_BRACE') && !this.isAtEnd()) {\n          text += this.advance().lexeme;\n        }\n        if (text.trim()) {\n          children.push(new AST.JSXText(text.trim()));\n        }\n      }\n    }\n    \n    // Closing tag\n    this.consume('JSX_CLOSE', 'Expected closing tag');\n    const closingName = this.consume('IDENTIFIER', 'Expected closing tag name');\n    this.consume('GREATER_THAN', 'Expected \">\" after closing tag');\n    \n    if (closingName.lexeme !== name.lexeme) {\n      throw new Error(`Mismatched JSX tags: ${name.lexeme} and ${closingName.lexeme}`);\n    }\n    \n    return new AST.JSXElement(\n      new AST.JSXOpeningElement(elementName, attributes, false),\n      children,\n      new AST.JSXClosingElement(new AST.Identifier(closingName.lexeme)),\n      this.getCurrentLocation()\n    );\n  }\n\n  jsxAttribute() {\n    let name;\n    if (this.check('AT')) {\n      this.advance(); // consume '@'\n      const eventName = this.consume('IDENTIFIER', 'Expected event name after @');\n      name = new AST.Identifier('@' + eventName.lexeme);\n    } else {\n      const attrName = this.consume('IDENTIFIER', 'Expected attribute name');\n      name = new AST.Identifier(attrName.lexeme);\n    }\n    \n    if (this.match('ASSIGN')) {\n      let value;\n      if (this.match('STRING')) {\n        value = new AST.Literal(this.previous().literal);\n      } else if (this.match('LEFT_BRACE')) {\n        const expr = this.expression();\n        this.consume('RIGHT_BRACE', 'Expected \"}\" after JSX expression');\n        value = new AST.JSXExpressionContainer(expr);\n      } else {\n        throw new Error('Expected attribute value');\n      }\n      \n      return new AST.JSXAttribute(\n        new AST.Identifier(name.lexeme),\n        value,\n        this.getCurrentLocation()\n      );\n    }\n    \n    // Boolean attribute\n    return new AST.JSXAttribute(\n      new AST.Identifier(name.lexeme),\n      new AST.Literal(true),\n      this.getCurrentLocation()\n    );\n  }\n\n  parameterList() {\n    const parameters = [];\n    \n    if (!this.check('RIGHT_PAREN')) {\n      do {\n        const name = this.consume('IDENTIFIER', 'Expected parameter name');\n        \n        let typeAnnotation = null;\n        if (this.match('COLON')) {\n          typeAnnotation = this.typeAnnotation();\n        }\n        \n        let defaultValue = null;\n        if (this.match('ASSIGN')) {\n          defaultValue = this.expression();\n        }\n        \n        parameters.push({\n          name: new AST.Identifier(name.lexeme),\n          typeAnnotation,\n          defaultValue\n        });\n      } while (this.match('COMMA'));\n    }\n    \n    return parameters;\n  }\n\n  argumentList() {\n    const args = [];\n    \n    if (!this.check('RIGHT_PAREN')) {\n      do {\n        args.push(this.expression());\n      } while (this.match('COMMA'));\n    }\n    \n    return args;\n  }\n\n  typeAnnotation() {\n    if (this.match('IDENTIFIER')) {\n      const typeName = this.previous().lexeme;\n      \n      switch (typeName) {\n        case 'string':\n          return new AST.TSStringKeyword();\n        case 'number':\n          return new AST.TSNumberKeyword();\n        case 'boolean':\n          return new AST.TSBooleanKeyword();\n        default:\n          return new AST.Identifier(typeName);\n      }\n    }\n    \n    throw new Error('Expected type annotation');\n  }\n\n  // Utility methods\n  match(...types) {\n    for (const type of types) {\n      if (this.check(type)) {\n        this.advance();\n        return true;\n      }\n    }\n    return false;\n  }\n\n  check(type) {\n    if (this.isAtEnd()) return false;\n    return this.peek().type === type;\n  }\n\n  advance() {\n    if (!this.isAtEnd()) this.current++;\n    return this.previous();\n  }\n\n  isAtEnd() {\n    return this.peek().type === 'EOF';\n  }\n\n  peek() {\n    return this.tokens[this.current];\n  }\n\n  peekNext() {\n    if (this.current + 1 >= this.tokens.length) {\n      return this.tokens[this.tokens.length - 1]; // EOF\n    }\n    return this.tokens[this.current + 1];\n  }\n\n  previous() {\n    return this.tokens[this.current - 1];\n  }\n\n  consume(type, message) {\n    if (this.check(type)) return this.advance();\n    \n    const current = this.peek();\n    throw new Error(`${message}. Got ${current.type} \"${current.lexeme}\" at line ${current.line}`);\n  }\n\n  synchronize() {\n    this.advance();\n    \n    while (!this.isAtEnd()) {\n      if (this.previous().type === 'NEWLINE') return;\n      \n      switch (this.peek().type) {\n        case 'COMPONENT':\n        case 'STORE':\n        case 'GUARD':\n        case 'IF':\n        case 'FOR':\n        case 'WHILE':\n        case 'RETURN':\n          return;\n      }\n      \n      this.advance();\n    }\n  }\n\n  getCurrentLocation() {\n    const token = this.peek();\n    return AST.createLocation(token.line, token.column, token.line, token.column);\n  }\n}", "// flux-core/src/compiler/codegen.js\n// Code generator that converts Flux AST to optimized JavaScript\n\nimport * as AST from '../ast/nodes.js';\n\nexport class FluxCodeGenerator {\n  constructor(options = {}) {\n    this.options = {\n      target: 'modern', // 'modern' or 'legacy'\n      minify: false,\n      sourceMaps: true,\n      optimizations: true,\n      ...options\n    };\n    this.indent = 0;\n    this.output = [];\n    this.imports = new Set();\n    this.componentCount = 0;\n    this.storeCount = 0;\n    this.errors = [];\n  }\n\n  generate(ast) {\n    this.output = [];\n    this.indent = 0;\n    \n    // Add runtime imports\n    this.addLine(\"import { FluxRuntime, Component, Store, createReactiveState, createEffect, createComputed } from '@flux/runtime';\");\n    this.addLine(\"import { createElement, Fragment } from '@flux/jsx';\");\n    this.addLine(\"\");\n    \n    this.visit(ast);\n    \n    return this.output.join('\\n');\n  }\n\n  visit(node) {\n    const methodName = `visit${node.type}`;\n    if (this[methodName]) {\n      return this[methodName](node);\n    }\n    \n    console.warn(`No visitor method for ${node.type}`);\n    return '';\n  }\n\n  visitProgram(node) {\n    for (const statement of node.body) {\n      this.visit(statement);\n      this.addLine(\"\");\n    }\n  }\n\n  visitImportDeclaration(node) {\n    const specifiers = node.specifiers.map(spec => {\n      if (spec.imported.name === 'default') {\n        return spec.local.name;\n      }\n      return spec.imported.name === spec.local.name \n        ? spec.imported.name \n        : `${spec.imported.name} as ${spec.local.name}`;\n    }).join(', ');\n    \n    this.addLine(`import { ${specifiers} } from ${JSON.stringify(node.source.value)};`);\n  }\n\n  visitExportDeclaration(node) {\n    this.add(\"export \");\n    this.visit(node.declaration);\n  }\n\n  visitComponentDeclaration(node) {\n    const componentName = node.name.name;\n    this.componentCount++;\n    \n    this.addLine(`class ${componentName} extends Component {`);\n    this.indent++;\n    \n    // Constructor\n    this.addLine(\"constructor(props = {}) {\");\n    this.indent++;\n    this.addLine(\"super(props);\");\n    this.addLine(\"\");\n    \n    // Initialize state\n    if (node.state.length > 0) {\n      this.addLine(\"// Initialize state\");\n      for (const stateDecl of node.state) {\n        const name = stateDecl.name.name;\n        const initialValue = stateDecl.initialValue \n          ? this.visit(stateDecl.initialValue) \n          : 'null';\n        \n        this.addLine(`this.${name} = createReactiveState(${initialValue});`);\n      }\n      this.addLine(\"\");\n    }\n    \n    // Initialize computed properties\n    if (node.computed.length > 0) {\n      this.addLine(\"// Initialize computed properties\");\n      for (const computedDecl of node.computed) {\n        const name = computedDecl.name.name;\n        this.addLine(`this.${name} = createComputed(() => {`);\n        this.indent++;\n        this.visit(computedDecl.body);\n        this.indent--;\n        this.addLine(\"});\");\n      }\n      this.addLine(\"\");\n    }\n    \n    // Initialize effects\n    if (node.effects.length > 0) {\n      this.addLine(\"// Initialize effects\");\n      for (let i = 0; i < node.effects.length; i++) {\n        const effect = node.effects[i];\n        const deps = effect.dependencies.map(dep => this.visit(dep)).join(', ');\n        \n        this.addLine(`this.effect${i} = createEffect(() => {`);\n        this.indent++;\n        this.visit(effect.body);\n        this.indent--;\n        this.addLine(`}, [${deps}]);`);\n      }\n      this.addLine(\"\");\n    }\n    \n    this.indent--;\n    this.addLine(\"}\");\n    this.addLine(\"\");\n    \n    // Generate methods\n    for (const method of node.methods) {\n      this.visitMethodDeclaration(method);\n    }\n    \n    // Generate lifecycle methods\n    for (const lifecycle of node.lifecycle) {\n      this.visitLifecycleDeclaration(lifecycle);\n    }\n    \n    // Generate render method\n    if (node.render) {\n      this.visitRenderDeclaration(node.render);\n    }\n    \n    this.indent--;\n    this.addLine(\"}\");\n    this.addLine(\"\");\n    \n    // Add component registration\n    this.addLine(`${componentName}.displayName = '${componentName}';`);\n    \n    // Handle route decorators\n    const routeDecorator = node.decorators.find(d => d.name.name === 'route');\n    if (routeDecorator) {\n      const path = routeDecorator.arguments[0];\n      this.addLine(`FluxRuntime.registerRoute(${this.visit(path)}, ${componentName});`);\n    }\n  }\n\n  visitStoreDeclaration(node) {\n    const storeName = node.name.name;\n    this.storeCount++;\n    \n    this.addLine(`class ${storeName} extends Store {`);\n    this.indent++;\n    \n    // Constructor\n    this.addLine(\"constructor() {\");\n    this.indent++;\n    this.addLine(\"super();\");\n    this.addLine(\"\");\n    \n    // Initialize state\n    if (node.state.length > 0) {\n      this.addLine(\"// Initialize state\");\n      for (const stateDecl of node.state) {\n        const name = stateDecl.name.name;\n        const initialValue = stateDecl.initialValue \n          ? this.visit(stateDecl.initialValue) \n          : 'null';\n        \n        this.addLine(`this.${name} = createReactiveState(${initialValue});`);\n      }\n      this.addLine(\"\");\n    }\n    \n    // Initialize computed properties\n    if (node.computed.length > 0) {\n      this.addLine(\"// Initialize computed properties\");\n      for (const computedDecl of node.computed) {\n        const name = computedDecl.name.name;\n        this.addLine(`this.${name} = createComputed(() => {`);\n        this.indent++;\n        this.visit(computedDecl.body);\n        this.indent--;\n        this.addLine(\"});\");\n      }\n      this.addLine(\"\");\n    }\n    \n    this.indent--;\n    this.addLine(\"}\");\n    this.addLine(\"\");\n    \n    // Generate actions\n    for (const action of node.actions) {\n      this.visitActionDeclaration(action);\n    }\n    \n    this.indent--;\n    this.addLine(\"}\");\n    this.addLine(\"\");\n    \n    // Create singleton instance\n    this.addLine(`const ${storeName}Instance = new ${storeName}();`);\n    this.addLine(`export { ${storeName}Instance as ${storeName} };`);\n  }\n\n  visitMethodDeclaration(node) {\n    const name = node.name.name;\n    const asyncKeyword = node.isAsync ? 'async ' : '';\n    const params = node.parameters.map(p => p.name.name).join(', ');\n    \n    this.addLine(`${asyncKeyword}${name}(${params}) {`);\n    this.indent++;\n    this.visit(node.body);\n    this.indent--;\n    this.addLine(\"}\");\n    this.addLine(\"\");\n  }\n\n  visitActionDeclaration(node) {\n    const name = node.name.name;\n    const asyncKeyword = node.isAsync ? 'async ' : '';\n    const params = node.parameters.map(p => p.name.name).join(', ');\n    \n    this.addLine(`${asyncKeyword}${name}(${params}) {`);\n    this.indent++;\n    this.visit(node.body);\n    this.indent--;\n    this.addLine(\"}\");\n    this.addLine(\"\");\n  }\n\n  visitLifecycleDeclaration(node) {\n    const phase = node.phase;\n    const asyncKeyword = node.isAsync ? 'async ' : '';\n    \n    this.addLine(`${asyncKeyword}${phase}() {`);\n    this.indent++;\n    this.visit(node.body);\n    this.indent--;\n    this.addLine(\"}\");\n    this.addLine(\"\");\n  }\n\n  visitRenderDeclaration(node) {\n    this.addLine(\"render() {\");\n    this.indent++;\n    this.addLine(\"return (\");\n    this.indent++;\n    this.visit(node.body);\n    this.indent--;\n    this.addLine(\");\");\n    this.indent--;\n    this.addLine(\"}\");\n    this.addLine(\"\");\n  }\n\n  visitBlockStatement(node) {\n    for (let i = 0; i < node.body.length; i++) {\n      this.visit(node.body[i]);\n      \n      // Add semicolon for expression statements\n      if (node.body[i].type === 'ExpressionStatement') {\n        this.add(';');\n      }\n      \n      if (i < node.body.length - 1) {\n        this.addLine(\"\");\n      }\n    }\n  }\n\n  visitExpressionStatement(node) {\n    this.add(this.getIndent());\n    this.visit(node.expression);\n  }\n\n  visitIfStatement(node) {\n    this.add(`${this.getIndent()}if (`);\n    this.visit(node.test);\n    this.add(') ');\n    this.visit(node.consequent);\n    \n    if (node.alternate) {\n      this.add(' else ');\n      this.visit(node.alternate);\n    }\n  }\n\n  visitWhileStatement(node) {\n    this.add(`${this.getIndent()}while (`);\n    this.visit(node.test);\n    this.add(') ');\n    this.visit(node.body);\n  }\n\n  visitForStatement(node) {\n    this.add(`${this.getIndent()}for (`);\n    if (node.init) this.visit(node.init);\n    this.add('; ');\n    if (node.test) this.visit(node.test);\n    this.add('; ');\n    if (node.update) this.visit(node.update);\n    this.add(') ');\n    this.visit(node.body);\n  }\n\n  visitReturnStatement(node) {\n    this.add(`${this.getIndent()}return`);\n    if (node.argument) {\n      this.add(' ');\n      this.visit(node.argument);\n    }\n  }\n\n  visitTryStatement(node) {\n    this.add(`${this.getIndent()}try `);\n    this.visit(node.block);\n    \n    if (node.handler) {\n      this.add(` catch (${node.handler.param.name}) `);\n      this.visit(node.handler.body);\n    }\n    \n    if (node.finalizer) {\n      this.add(' finally ');\n      this.visit(node.finalizer);\n    }\n  }\n\n  visitBinaryExpression(node) {\n    this.visit(node.left);\n    this.add(` ${node.operator} `);\n    this.visit(node.right);\n  }\n\n  visitUnaryExpression(node) {\n    this.add(node.operator);\n    this.visit(node.operand);\n  }\n\n  visitAssignmentExpression(node) {\n    // Handle reactive state assignments\n    if (node.left.type === 'MemberExpression' && \n        node.left.object.type === 'Identifier' &&\n        node.left.object.name === 'this') {\n      \n      // Convert this.state = value to this.state.value = value\n      this.add('this.');\n      this.visit(node.left.property);\n      this.add('.value ');\n      this.add(node.operator);\n      this.add(' ');\n      this.visit(node.right);\n    } else {\n      this.visit(node.left);\n      this.add(` ${node.operator} `);\n      this.visit(node.right);\n    }\n  }\n\n  visitCallExpression(node) {\n    this.visit(node.callee);\n    this.add('(');\n    \n    for (let i = 0; i < node.arguments.length; i++) {\n      this.visit(node.arguments[i]);\n      if (i < node.arguments.length - 1) {\n        this.add(', ');\n      }\n    }\n    \n    this.add(')');\n  }\n\n  visitMemberExpression(node) {\n    this.visit(node.object);\n    \n    if (node.computed) {\n      this.add('[');\n      this.visit(node.property);\n      this.add(']');\n    } else {\n      this.add('.');\n      this.visit(node.property);\n    }\n  }\n\n  visitConditionalExpression(node) {\n    this.visit(node.test);\n    this.add(' ? ');\n    this.visit(node.consequent);\n    this.add(' : ');\n    this.visit(node.alternate);\n  }\n\n  visitArrayExpression(node) {\n    this.add('[');\n    \n    for (let i = 0; i < node.elements.length; i++) {\n      this.visit(node.elements[i]);\n      if (i < node.elements.length - 1) {\n        this.add(', ');\n      }\n    }\n    \n    this.add(']');\n  }\n\n  visitObjectExpression(node) {\n    this.add('{');\n    \n    if (node.properties.length > 0) {\n      this.addLine(\"\");\n      this.indent++;\n      \n      for (let i = 0; i < node.properties.length; i++) {\n        this.add(this.getIndent());\n        this.visit(node.properties[i]);\n        if (i < node.properties.length - 1) {\n          this.add(',');\n        }\n        this.addLine(\"\");\n      }\n      \n      this.indent--;\n      this.add(this.getIndent());\n    }\n    \n    this.add('}');\n  }\n\n  visitProperty(node) {\n    this.visit(node.key);\n    this.add(': ');\n    this.visit(node.value);\n  }\n\n  visitLiteral(node) {\n    if (typeof node.value === 'string') {\n      this.add(JSON.stringify(node.value));\n    } else {\n      this.add(String(node.value));\n    }\n  }\n\n  visitIdentifier(node) {\n    // Handle reactive state access\n    if (this.isInRenderContext() && this.isReactiveState(node.name)) {\n      this.add(`this.${node.name}.value`);\n    } else {\n      this.add(node.name);\n    }\n  }\n\n  visitJSXElement(node) {\n    this.add('createElement(');\n    \n    // Element name\n    if (node.openingElement.name.name.charAt(0).toLowerCase() === node.openingElement.name.name.charAt(0)) {\n      // HTML element\n      this.add(`'${node.openingElement.name.name}'`);\n    } else {\n      // Component\n      this.add(node.openingElement.name.name);\n    }\n    \n    // Props\n    if (node.openingElement.attributes.length > 0) {\n      this.add(', {');\n      \n      for (let i = 0; i < node.openingElement.attributes.length; i++) {\n        const attr = node.openingElement.attributes[i];\n        this.add(`${attr.name.name}: `);\n        \n        if (attr.value.type === 'JSXExpressionContainer') {\n          this.visit(attr.value.expression);\n        } else {\n          this.visit(attr.value);\n        }\n        \n        if (i < node.openingElement.attributes.length - 1) {\n          this.add(', ');\n        }\n      }\n      \n      this.add('}');\n    } else {\n      this.add(', null');\n    }\n    \n    // Children\n    if (node.children.length > 0) {\n      for (const child of node.children) {\n        this.add(', ');\n        \n        if (child.type === 'JSXText') {\n          this.add(JSON.stringify(child.value));\n        } else if (child.type === 'JSXExpressionContainer') {\n          this.visit(child.expression);\n        } else {\n          this.visit(child);\n        }\n      }\n    }\n    \n    this.add(')');\n  }\n\n  visitJSXExpressionContainer(node) {\n    this.visit(node.expression);\n  }\n\n  visitJSXText(node) {\n    this.add(JSON.stringify(node.value));\n  }\n\n  // Utility methods\n  isInRenderContext() {\n    // Simple heuristic - in a real implementation, we'd track context properly\n    return true;\n  }\n\n  isReactiveState(name) {\n    // Check if this identifier refers to a reactive state variable\n    // In a real implementation, we'd have proper scope tracking\n    return true;\n  }\n\n  add(text) {\n    this.output.push(text);\n  }\n\n  addLine(text = \"\") {\n    this.output.push(text + '\\n');\n  }\n\n  getIndent() {\n    return '  '.repeat(this.indent);\n  }\n}\n\n// Runtime optimization helpers\nexport class FluxOptimizer {\n  constructor() {\n    this.optimizations = [\n      this.eliminateDeadCode,\n      this.inlineConstants,\n      this.optimizeReactiveUpdates,\n      this.bundleComponents\n    ];\n  }\n\n  optimize(ast) {\n    let optimizedAst = ast;\n    \n    for (const optimization of this.optimizations) {\n      optimizedAst = optimization(optimizedAst);\n    }\n    \n    return optimizedAst;\n  }\n\n  eliminateDeadCode(ast) {\n    // Remove unused variables, functions, and imports\n    return ast;\n  }\n\n  inlineConstants(ast) {\n    // Inline constant values at compile time\n    return ast;\n  }\n\n  optimizeReactiveUpdates(ast) {\n    // Minimize reactive dependency tracking\n    return ast;\n  }\n\n  bundleComponents(ast) {\n    // Optimize component bundling and code splitting\n    return ast;\n  }\n}", "// flux-core/src/errors.js\n// Error handling system for Flux compiler\n\nexport class FluxError extends Error {\n  constructor(message, details = null) {\n    super(message);\n    this.name = 'FluxError';\n    this.details = details;\n    this.timestamp = new Date();\n  }\n}\n\nexport class LexerError extends FluxError {\n  constructor(message, line, column, source) {\n    super(`Lexer Error: ${message}`);\n    this.name = 'LexerError';\n    this.line = line;\n    this.column = column;\n    this.source = source;\n  }\n  \n  format() {\n    return this.formatError('Lexer Error', this.message);\n  }\n}\n\nexport class ParserError extends FluxError {\n  constructor(message, token, expected = null) {\n    super(`Parser Error: ${message}`);\n    this.name = 'ParserError';\n    this.token = token;\n    this.expected = expected;\n    this.line = token ? token.line : 1;\n    this.column = token ? token.column : 1;\n  }\n  \n  format() {\n    let message = this.message;\n    if (this.expected) {\n      message += ` (expected ${this.expected})`;\n    }\n    return this.formatError('Parser Error', message);\n  }\n}\n\nexport class SemanticError extends FluxError {\n  constructor(message, node, suggestion = null) {\n    super(`Semantic Error: ${message}`);\n    this.name = 'SemanticError';\n    this.node = node;\n    this.suggestion = suggestion;\n    this.line = node ? node.location?.line : 1;\n    this.column = node ? node.location?.column : 1;\n  }\n  \n  format() {\n    let message = this.message;\n    if (this.suggestion) {\n      message += `\\nSuggestion: ${this.suggestion}`;\n    }\n    return this.formatError('Semantic Error', message);\n  }\n}\n\nexport class CodegenError extends FluxError {\n  constructor(message, node, context = null) {\n    super(`Code Generation Error: ${message}`);\n    this.name = 'CodegenError';\n    this.node = node;\n    this.context = context;\n    this.line = node ? node.location?.line : 1;\n    this.column = node ? node.location?.column : 1;\n  }\n  \n  format() {\n    let message = this.message;\n    if (this.context) {\n      message += `\\nContext: ${this.context}`;\n    }\n    return this.formatError('Code Generation Error', message);\n  }\n}\n\nexport class RuntimeError extends FluxError {\n  constructor(message, component = null, stack = null) {\n    super(`Runtime Error: ${message}`);\n    this.name = 'RuntimeError';\n    this.component = component;\n    this.stack = stack;\n  }\n  \n  format() {\n    let message = this.message;\n    if (this.component) {\n      message += `\\nComponent: ${this.component}`;\n    }\n    return this.formatError('Runtime Error', message);\n  }\n}\n\n// Error formatter utility\nexport class ErrorFormatter {\n  static formatError(error, source = null) {\n    if (error.format) {\n      return error.format();\n    }\n    \n    let output = `${error.name}: ${error.message}\\n`;\n    \n    if (error.line && error.column) {\n      output += `at line ${error.line}, column ${error.column}\\n`;\n      \n      if (source) {\n        output += this.formatSourceContext(source, error.line, error.column);\n      }\n    }\n    \n    if (error.stack) {\n      output += `\\nStack trace:\\n${error.stack}`;\n    }\n    \n    return output;\n  }\n  \n  static formatSourceContext(source, line, column, contextLines = 3) {\n    const lines = source.split('\\n');\n    const startLine = Math.max(1, line - contextLines);\n    const endLine = Math.min(lines.length, line + contextLines);\n    \n    let output = '\\nSource context:\\n';\n    \n    for (let i = startLine; i <= endLine; i++) {\n      const marker = i === line ? '>>> ' : '    ';\n      const lineNumber = i.toString().padStart(3);\n      const content = lines[i - 1] || '';\n      \n      output += `${marker}${lineNumber}: ${content}\\n`;\n      \n      if (i === line && column > 0) {\n        const indent = '    ' + ' '.repeat(column - 1);\n        output += `${indent}^\\n`;\n      }\n    }\n    \n    return output;\n  }\n  \n  static formatErrorList(errors, source = null) {\n    if (errors.length === 0) return '';\n    \n    let output = `\\n${errors.length} error(s) found:\\n\\n`;\n    \n    for (let i = 0; i < errors.length; i++) {\n      const error = errors[i];\n      output += `${i + 1}. ${this.formatError(error, source)}\\n`;\n      \n      if (i < errors.length - 1) {\n        output += '\\n';\n      }\n    }\n    \n    return output;\n  }\n}\n\n// Error collector for batch processing\nexport class ErrorCollector {\n  constructor() {\n    this.errors = [];\n    this.warnings = [];\n    this.maxErrors = 100; // Prevent infinite error loops\n  }\n  \n  addError(error) {\n    if (this.errors.length < this.maxErrors) {\n      this.errors.push(error);\n    }\n  }\n  \n  addWarning(warning) {\n    this.warnings.push(warning);\n  }\n  \n  hasErrors() {\n    return this.errors.length > 0;\n  }\n  \n  hasWarnings() {\n    return this.warnings.length > 0;\n  }\n  \n  clear() {\n    this.errors = [];\n    this.warnings = [];\n  }\n  \n  formatAll(source = null) {\n    let output = '';\n    \n    if (this.errors.length > 0) {\n      output += ErrorFormatter.formatErrorList(this.errors, source);\n    }\n    \n    if (this.warnings.length > 0) {\n      output += `\\n${this.warnings.length} warning(s):\\n`;\n      for (const warning of this.warnings) {\n        output += `- ${warning.message}\\n`;\n      }\n    }\n    \n    return output;\n  }\n}", "// flux-core/src/compiler/index.js\n// Main compiler entry point\n\nimport { FluxLexer } from './lexer.js';\nimport { FluxParser } from './parser.js';\nimport { FluxCodeGenerator } from './codegen.js';\nimport { FluxError } from '../errors.js';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nexport class FluxCompiler {\n  constructor(options = {}) {\n    this.options = {\n      target: 'js', // 'js' or 'wasm'\n      minify: false,\n      sourceMaps: true,\n      optimizations: true,\n      outputDir: 'dist',\n      treeShaking: true,\n      codeSplitting: false,\n      bundleAnalysis: false,\n      watchMode: false,\n      incremental: true,\n      parallel: true,\n      maxWorkers: 4,\n      ...options\n    };\n    \n    this.errors = [];\n    this.warnings = [];\n    this.compilationCache = new Map();\n    this.dependencyGraph = new Map();\n    this.optimizer = new FluxOptimizer(this.options);\n    this.bundler = new FluxBundler(this.options);\n  }\n\n  async compileFile(filePath) {\n    try {\n      // Read source file\n      const source = await fs.readFile(filePath, 'utf-8');\n      \n      // Compile source\n      const result = this.compile(source, filePath);\n      \n      if (this.errors.length > 0) {\n        throw new FluxError('Compilation failed', this.errors);\n      }\n      \n      return result;\n    } catch (error) {\n      if (error instanceof FluxError) {\n        throw error;\n      }\n      throw new FluxError(`Failed to read file ${filePath}: ${error.message}`);\n    }\n  }\n\n  compile(source, filePath = '<unknown>') {\n    try {\n      // Reset error state\n      this.errors = [];\n      this.warnings = [];\n      \n      // Tokenize\n      const lexer = new FluxLexer(source);\n      const tokens = lexer.tokenize();\n      \n      if (lexer.errors.length > 0) {\n        this.errors.push(...lexer.errors);\n        return null;\n      }\n      \n      // Parse\n      const parser = new FluxParser(tokens);\n      const ast = parser.program();\n      \n      if (parser.errors.length > 0) {\n        this.errors.push(...parser.errors);\n        return null;\n      }\n      \n      // Generate code\n      const generator = new FluxCodeGenerator(this.options);\n      const output = generator.generate(ast);\n      \n      if (generator.errors.length > 0) {\n        this.errors.push(...generator.errors);\n        return null;\n      }\n      \n      return {\n        source,\n        ast,\n        output,\n        sourceMap: generator.sourceMap,\n        filePath\n      };\n    } catch (error) {\n      this.errors.push({\n        message: error.message,\n        file: filePath,\n        line: 1,\n        column: 1\n      });\n      return null;\n    }\n  }\n\n  async build() {\n    const projectRoot = process.cwd();\n    const fluxConfig = await this.loadConfig(projectRoot);\n    \n    // Find all .flux files\n    const fluxFiles = await this.findFluxFiles(projectRoot);\n    \n    if (fluxFiles.length === 0) {\n      throw new FluxError('No .flux files found in project');\n    }\n    \n    console.log(`Found ${fluxFiles.length} Flux files to compile`);\n    \n    // Compile each file\n    const results = [];\n    for (const file of fluxFiles) {\n      const result = await this.compileFile(file);\n      if (result) {\n        results.push(result);\n      }\n    }\n    \n    if (this.errors.length > 0) {\n      throw new FluxError('Build failed', this.errors);\n    }\n    \n    // Write output files\n    await this.writeBuildOutput(results, projectRoot);\n    \n    return results;\n  }\n\n  async findFluxFiles(rootDir) {\n    const files = [];\n    \n    async function scan(dir) {\n      const entries = await fs.readdir(dir, { withFileTypes: true });\n      \n      for (const entry of entries) {\n        const fullPath = path.join(dir, entry.name);\n        \n        if (entry.isDirectory() && !entry.name.startsWith('.') && entry.name !== 'node_modules') {\n          await scan(fullPath);\n        } else if (entry.isFile() && entry.name.endsWith('.flux')) {\n          files.push(fullPath);\n        }\n      }\n    }\n    \n    await scan(rootDir);\n    return files;\n  }\n\n  async loadConfig(projectRoot) {\n    const configPath = path.join(projectRoot, 'flux.config.js');\n    \n    try {\n      if (await fs.pathExists(configPath)) {\n        const config = await import(configPath);\n        return config.default || config;\n      }\n    } catch (error) {\n      console.warn(`Warning: Could not load flux.config.js: ${error.message}`);\n    }\n    \n    return {};\n  }\n\n  async writeBuildOutput(results, projectRoot) {\n    const outputDir = path.join(projectRoot, this.options.outputDir);\n    \n    // Ensure output directory exists\n    await fs.ensureDir(outputDir);\n    \n    // Write compiled files\n    for (const result of results) {\n      const relativePath = path.relative(projectRoot, result.filePath);\n      const outputPath = path.join(\n        outputDir,\n        relativePath.replace(/\\.flux$/, '.js')\n      );\n      \n      await fs.ensureDir(path.dirname(outputPath));\n      await fs.writeFile(outputPath, result.output);\n      \n      // Write source map if enabled\n      if (this.options.sourceMaps && result.sourceMap) {\n        await fs.writeFile(outputPath + '.map', JSON.stringify(result.sourceMap));\n      }\n    }\n    \n    // Write runtime files\n    await this.writeRuntimeFiles(outputDir);\n    \n    // Write index.html if it doesn't exist\n    const indexPath = path.join(outputDir, 'index.html');\n    if (!await fs.pathExists(indexPath)) {\n      await this.writeDefaultIndexHtml(indexPath);\n    }\n  }\n\n  async writeRuntimeFiles(outputDir) {\n    const runtimeDir = path.join(outputDir, 'runtime');\n    await fs.ensureDir(runtimeDir);\n    \n    // Copy runtime files\n    const runtimeSource = path.join(__dirname, '../runtime');\n    await fs.copy(runtimeSource, runtimeDir);\n  }\n\n  async writeDefaultIndexHtml(outputPath) {\n    const html = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Flux App</title>\n</head>\n<body>\n    <div id=\"root\"></div>\n    <script type=\"module\" src=\"./app.js\"></script>\n</body>\n</html>`;\n    \n    await fs.writeFile(outputPath, html);\n  }\n\n  async writeOutput(result, outputPath) {\n    await fs.ensureDir(path.dirname(outputPath));\n    await fs.writeFile(outputPath, result.output);\n    \n    if (this.options.sourceMaps && result.sourceMap) {\n      await fs.writeFile(outputPath + '.map', JSON.stringify(result.sourceMap));\n    }\n  }\n}\n\n// Advanced compiler optimization system\nclass FluxOptimizer {\n  constructor(options) {\n    this.options = options;\n    this.optimizations = new Map();\n    this.analysis = new Map();\n  }\n\n  optimize(ast, context) {\n    if (!this.options.optimizations) return ast;\n    \n    let optimizedAst = ast;\n    \n    // Apply various optimizations\n    optimizedAst = this.constantFolding(optimizedAst);\n    optimizedAst = this.deadCodeElimination(optimizedAst);\n    optimizedAst = this.inlineExpansion(optimizedAst);\n    optimizedAst = this.hoisting(optimizedAst);\n    \n    return optimizedAst;\n  }\n\n  constantFolding(ast) {\n    // Fold constant expressions at compile time\n    return ast;\n  }\n\n  deadCodeElimination(ast) {\n    // Remove unreachable code\n    return ast;\n  }\n\n  inlineExpansion(ast) {\n    // Inline small functions\n    return ast;\n  }\n\n  hoisting(ast) {\n    // Hoist variable declarations\n    return ast;\n  }\n\n  analyze(ast) {\n    // Analyze code for optimization opportunities\n    const analysis = {\n      complexity: this.calculateComplexity(ast),\n      dependencies: this.findDependencies(ast),\n      performance: this.analyzePerformance(ast)\n    };\n    \n    this.analysis.set(ast, analysis);\n    return analysis;\n  }\n\n  calculateComplexity(ast) {\n    // Calculate cyclomatic complexity\n    return 1; // Placeholder\n  }\n\n  findDependencies(ast) {\n    // Find all dependencies\n    return []; // Placeholder\n  }\n\n  analyzePerformance(ast) {\n    // Analyze performance characteristics\n    return {}; // Placeholder\n  }\n}\n\n// Advanced bundling system\nclass FluxBundler {\n  constructor(options) {\n    this.options = options;\n    this.bundles = new Map();\n    this.chunks = new Map();\n  }\n\n  createBundle(entryPoints, dependencies) {\n    if (!this.options.codeSplitting) {\n      return this.createSingleBundle(entryPoints, dependencies);\n    }\n    \n    return this.createSplitBundles(entryPoints, dependencies);\n  }\n\n  createSingleBundle(entryPoints, dependencies) {\n    // Create a single bundle\n    return {\n      type: 'single',\n      code: this.mergeCode(entryPoints, dependencies),\n      sourceMap: this.mergeSourceMaps(entryPoints, dependencies)\n    };\n  }\n\n  createSplitBundles(entryPoints, dependencies) {\n    // Create multiple bundles for code splitting\n    const bundles = [];\n    \n    for (const entryPoint of entryPoints) {\n      const bundle = this.createBundleForEntry(entryPoint, dependencies);\n      bundles.push(bundle);\n    }\n    \n    return bundles;\n  }\n\n  createBundleForEntry(entryPoint, dependencies) {\n    // Create bundle for specific entry point\n    return {\n      type: 'entry',\n      entry: entryPoint,\n      code: this.generateEntryCode(entryPoint, dependencies),\n      dependencies: this.getEntryDependencies(entryPoint, dependencies)\n    };\n  }\n\n  mergeCode(entryPoints, dependencies) {\n    // Merge all code into single output\n    return entryPoints.map(ep => ep.code).join('\\n');\n  }\n\n  mergeSourceMaps(entryPoints, dependencies) {\n    // Merge source maps\n    return {}; // Placeholder\n  }\n\n  generateEntryCode(entryPoint, dependencies) {\n    // Generate code for entry point\n    return entryPoint.code;\n  }\n\n  getEntryDependencies(entryPoint, dependencies) {\n    // Get dependencies for entry point\n    return dependencies.filter(dep => dep.entryPoint === entryPoint);\n  }\n}", "// Configuration management system for Flux applications\nimport fs from 'fs-extra';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nclass ConfigManager {\n  constructor(options = {}) {\n    this.options = {\n      configDir: options.configDir || 'src/config',\n      environment: options.environment || process.env.NODE_ENV || 'development',\n      configFile: options.configFile || 'config.js',\n      secretsFile: options.secretsFile || '.env',\n      validateOnLoad: options.validateOnLoad !== false,\n      cache: options.cache !== false,\n      ...options\n    };\n    \n    this.config = new Map();\n    this.secrets = new Map();\n    this.loaded = false;\n    this.watchers = new Map();\n    \n    // Don't auto-load configuration - let it be called explicitly\n  }\n\n  async loadConfiguration() {\n    try {\n      // Load environment variables\n      await this.loadEnvironmentVariables();\n      \n      // Load main configuration\n      await this.loadMainConfig();\n      \n      // Load environment-specific configuration\n      await this.loadEnvironmentConfig();\n      \n      // Load secrets\n      await this.loadSecrets();\n      \n      // Validate configuration\n      if (this.options.validateOnLoad) {\n        await this.validateConfiguration();\n      }\n      \n      this.loaded = true;\n      console.log('\u2705 Configuration loaded successfully');\n      \n    } catch (error) {\n      console.error('\u274C Failed to load configuration:', error);\n      throw error;\n    }\n  }\n\n  async loadEnvironmentVariables() {\n    // Load from .env file if it exists\n    const envPath = path.resolve(this.options.secretsFile);\n    if (await fs.pathExists(envPath)) {\n      try {\n        const envContent = await fs.readFile(envPath, 'utf-8');\n        const envVars = this.parseEnvFile(envContent);\n        \n        for (const [key, value] of Object.entries(envVars)) {\n          process.env[key] = value;\n        }\n      } catch (error) {\n        console.warn('Warning: Could not load .env file:', error.message);\n      }\n    }\n  }\n\n  parseEnvFile(content) {\n    const envVars = {};\n    const lines = content.split('\\n');\n    \n    for (const line of lines) {\n      const trimmed = line.trim();\n      if (trimmed && !trimmed.startsWith('#')) {\n        const [key, ...valueParts] = trimmed.split('=');\n        if (key && valueParts.length > 0) {\n          envVars[key.trim()] = valueParts.join('=').trim();\n        }\n      }\n    }\n    \n    return envVars;\n  }\n\n  async loadMainConfig() {\n    const configPath = path.resolve(this.options.configDir, this.options.configFile);\n    \n    if (await fs.pathExists(configPath)) {\n      try {\n        const config = await import(configPath);\n        const configData = config.default || config;\n        \n        // Merge with environment variables\n        this.config.set('main', this.interpolateEnvVars(configData));\n      } catch (error) {\n        console.warn('Warning: Could not load main config:', error.message);\n        this.config.set('main', {});\n      }\n    } else {\n      this.config.set('main', {});\n    }\n  }\n\n  async loadEnvironmentConfig() {\n    const envConfigPath = path.resolve(this.options.configDir, `${this.options.environment}.js`);\n    \n    if (await fs.pathExists(envConfigPath)) {\n      try {\n        const config = await import(envConfigPath);\n        const configData = config.default || config;\n        \n        // Merge with main config\n        const mainConfig = this.config.get('main') || {};\n        const envConfig = this.interpolateEnvVars(configData);\n        \n        this.config.set('environment', this.mergeConfigs(mainConfig, envConfig));\n      } catch (error) {\n        console.warn(`Warning: Could not load ${this.options.environment} config:`, error.message);\n        this.config.set('environment', this.config.get('main') || {});\n      }\n    } else {\n      this.config.set('environment', this.config.get('main') || {});\n    }\n  }\n\n  async loadSecrets() {\n    const secretsPath = path.resolve(this.options.configDir, 'secrets.js');\n    \n    if (await fs.pathExists(secretsPath)) {\n      try {\n        const secrets = await import(secretsPath);\n        const secretsData = secrets.default || secrets;\n        \n        this.secrets = new Map(Object.entries(secretsData));\n      } catch (error) {\n        console.warn('Warning: Could not load secrets:', error.message);\n      }\n    }\n  }\n\n  interpolateEnvVars(config) {\n    if (typeof config === 'string') {\n      return config.replace(/\\$\\{([^}]+)\\}/g, (match, key) => {\n        return process.env[key] || match;\n      });\n    }\n    \n    if (Array.isArray(config)) {\n      return config.map(item => this.interpolateEnvVars(item));\n    }\n    \n    if (typeof config === 'object' && config !== null) {\n      const result = {};\n      for (const [key, value] of Object.entries(config)) {\n        result[key] = this.interpolateEnvVars(value);\n      }\n      return result;\n    }\n    \n    return config;\n  }\n\n  mergeConfigs(base, override) {\n    const result = { ...base };\n    \n    for (const [key, value] of Object.entries(override)) {\n      if (typeof value === 'object' && value !== null && !Array.isArray(value)) {\n        result[key] = this.mergeConfigs(result[key] || {}, value);\n      } else {\n        result[key] = value;\n      }\n    }\n    \n    return result;\n  }\n\n  async validateConfiguration() {\n    const config = this.config.get('environment');\n    \n    // Validate required fields\n    const required = ['app', 'server', 'database'];\n    for (const field of required) {\n      if (!config[field]) {\n        throw new Error(`Missing required configuration: ${field}`);\n      }\n    }\n    \n    // Validate specific configurations\n    await this.validateAppConfig(config.app);\n    await this.validateServerConfig(config.server);\n    await this.validateDatabaseConfig(config.database);\n    \n    console.log('\u2705 Configuration validation passed');\n  }\n\n  async validateAppConfig(appConfig) {\n    if (!appConfig.name) {\n      throw new Error('App name is required');\n    }\n    \n    if (!appConfig.version) {\n      throw new Error('App version is required');\n    }\n  }\n\n  async validateServerConfig(serverConfig) {\n    if (!serverConfig.port) {\n      throw new Error('Server port is required');\n    }\n    \n    if (serverConfig.port < 1 || serverConfig.port > 65535) {\n      throw new Error('Server port must be between 1 and 65535');\n    }\n  }\n\n  async validateDatabaseConfig(dbConfig) {\n    if (!dbConfig.host) {\n      throw new Error('Database host is required');\n    }\n    \n    if (!dbConfig.port) {\n      throw new Error('Database port is required');\n    }\n    \n    if (!dbConfig.database) {\n      throw new Error('Database name is required');\n    }\n  }\n\n  // Configuration access methods\n  get(key, defaultValue = undefined) {\n    const config = this.config.get('environment');\n    return this.getNestedValue(config, key, defaultValue);\n  }\n\n  getNestedValue(obj, path, defaultValue) {\n    const keys = path.split('.');\n    let current = obj;\n    \n    for (const key of keys) {\n      if (current && typeof current === 'object' && key in current) {\n        current = current[key];\n      } else {\n        return defaultValue;\n      }\n    }\n    \n    return current !== undefined ? current : defaultValue;\n  }\n\n  set(key, value) {\n    const config = this.config.get('environment');\n    this.setNestedValue(config, key, value);\n  }\n\n  setNestedValue(obj, path, value) {\n    const keys = path.split('.');\n    const lastKey = keys.pop();\n    let current = obj;\n    \n    for (const key of keys) {\n      if (!(key in current) || typeof current[key] !== 'object') {\n        current[key] = {};\n      }\n      current = current[key];\n    }\n    \n    current[lastKey] = value;\n  }\n\n  // Secret access\n  getSecret(key, defaultValue = undefined) {\n    return this.secrets.get(key) || defaultValue;\n  }\n\n  setSecret(key, value) {\n    this.secrets.set(key, value);\n  }\n\n  // Configuration watching\n  watch(key, callback) {\n    if (!this.watchers.has(key)) {\n      this.watchers.set(key, new Set());\n    }\n    this.watchers.get(key).add(callback);\n    \n    return () => {\n      const watchers = this.watchers.get(key);\n      if (watchers) {\n        watchers.delete(callback);\n      }\n    };\n  }\n\n  notifyWatchers(key, oldValue, newValue) {\n    const watchers = this.watchers.get(key);\n    if (watchers) {\n      for (const callback of watchers) {\n        try {\n          callback(oldValue, newValue);\n        } catch (error) {\n          console.error('Error in config watcher:', error);\n        }\n      }\n    }\n  }\n\n  // Configuration reloading\n  async reload() {\n    this.loaded = false;\n    this.config.clear();\n    await this.loadConfiguration();\n  }\n\n  // Configuration export\n  export() {\n    const config = this.config.get('environment');\n    return JSON.parse(JSON.stringify(config));\n  }\n\n  // Configuration validation\n  isValid() {\n    return this.loaded;\n  }\n\n  // Get all configuration keys\n  getKeys() {\n    const config = this.config.get('environment');\n    return this.getAllKeys(config);\n  }\n\n  getAllKeys(obj, prefix = '') {\n    const keys = [];\n    \n    for (const [key, value] of Object.entries(obj)) {\n      const fullKey = prefix ? `${prefix}.${key}` : key;\n      \n      if (typeof value === 'object' && value !== null && !Array.isArray(value)) {\n        keys.push(...this.getAllKeys(value, fullKey));\n      } else {\n        keys.push(fullKey);\n      }\n    }\n    \n    return keys;\n  }\n\n  // Configuration search\n  search(query) {\n    const config = this.config.get('environment');\n    const results = [];\n    \n    for (const key of this.getKeys()) {\n      if (key.toLowerCase().includes(query.toLowerCase())) {\n        results.push({\n          key,\n          value: this.get(key)\n        });\n      }\n    }\n    \n    return results;\n  }\n\n  // Configuration diff\n  diff(otherConfig) {\n    const currentConfig = this.config.get('environment');\n    const diff = {\n      added: {},\n      modified: {},\n      removed: {}\n    };\n    \n    // Find added and modified\n    for (const [key, value] of Object.entries(otherConfig)) {\n      if (!(key in currentConfig)) {\n        diff.added[key] = value;\n      } else if (JSON.stringify(currentConfig[key]) !== JSON.stringify(value)) {\n        diff.modified[key] = {\n          old: currentConfig[key],\n          new: value\n        };\n      }\n    }\n    \n    // Find removed\n    for (const key of Object.keys(currentConfig)) {\n      if (!(key in otherConfig)) {\n        diff.removed[key] = currentConfig[key];\n      }\n    }\n    \n    return diff;\n  }\n}\n\n// Create default instance\nexport const configManager = new ConfigManager();\n\n// Export the class and instance\nexport { ConfigManager };\nexport default configManager;", "// Storage management system for Flux applications\nimport fs from 'fs-extra';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\nimport { FluxCache } from '../runtime/index.js';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nclass StorageManager {\n  constructor(options = {}) {\n    this.options = {\n      basePath: options.basePath || 'storage',\n      publicPath: options.publicPath || 'public',\n      uploadsPath: options.uploadsPath || 'uploads',\n      tempPath: options.tempPath || 'temp',\n      maxFileSize: options.maxFileSize || 10 * 1024 * 1024, // 10MB\n      allowedTypes: options.allowedTypes || ['image/*', 'text/*', 'application/*'],\n      cache: options.cache !== false,\n      ...options\n    };\n    \n    this.cache = this.options.cache ? new FluxCache() : null;\n    this.storageRoot = path.resolve(this.options.basePath);\n    this.publicPath = path.join(this.storageRoot, this.options.publicPath);\n    this.uploadsPath = path.join(this.storageRoot, this.options.uploadsPath);\n    this.tempPath = path.join(this.storageRoot, this.options.tempPath);\n    \n    // Do not auto-initialize at import time; let callers initialize explicitly\n  }\n\n  async initializeStorage() {\n    try {\n      // Create storage directories\n      await fs.ensureDir(this.storageRoot);\n      await fs.ensureDir(this.publicPath);\n      await fs.ensureDir(this.uploadsPath);\n      await fs.ensureDir(this.tempPath);\n      \n      // Create subdirectories for better organization\n      await fs.ensureDir(path.join(this.publicPath, 'images'));\n      await fs.ensureDir(path.join(this.publicPath, 'css'));\n      await fs.ensureDir(path.join(this.publicPath, 'js'));\n      await fs.ensureDir(path.join(this.publicPath, 'fonts'));\n      await fs.ensureDir(path.join(this.publicPath, 'documents'));\n      \n      await fs.ensureDir(path.join(this.uploadsPath, 'images'));\n      await fs.ensureDir(path.join(this.uploadsPath, 'documents'));\n      await fs.ensureDir(path.join(this.uploadsPath, 'videos'));\n      await fs.ensureDir(path.join(this.uploadsPath, 'audio'));\n      \n      console.log('\u2705 Storage system initialized successfully');\n    } catch (error) {\n      console.error('\u274C Failed to initialize storage:', error);\n      throw error;\n    }\n  }\n\n  // File operations\n  async storeFile(file, destination = 'uploads', options = {}) {\n    const {\n      filename = file.name || `file_${Date.now()}`,\n      subfolder = '',\n      overwrite = false,\n      validate = true\n    } = options;\n\n    try {\n      // Validate file\n      if (validate) {\n        await this.validateFile(file);\n      }\n\n      // Determine destination path\n      const destPath = destination === 'public' ? this.publicPath : this.uploadsPath;\n      const finalPath = path.join(destPath, subfolder, filename);\n\n      // Check if file exists and handle overwrite\n      if (await fs.pathExists(finalPath) && !overwrite) {\n        throw new Error(`File ${filename} already exists`);\n      }\n\n      // Ensure directory exists\n      await fs.ensureDir(path.dirname(finalPath));\n\n      // Copy file to destination\n      await fs.copy(file.path || file, finalPath);\n\n      // Generate file metadata\n      const stats = await fs.stat(finalPath);\n      const fileInfo = {\n        filename,\n        originalName: file.name || filename,\n        path: finalPath,\n        url: this.getPublicUrl(finalPath),\n        size: stats.size,\n        mimeType: file.mimetype || this.getMimeType(filename),\n        uploadedAt: new Date(),\n        destination,\n        subfolder\n      };\n\n      // Cache file info if caching is enabled\n      if (this.cache) {\n        this.cache.set(`file:${filename}`, fileInfo);\n      }\n\n      return fileInfo;\n    } catch (error) {\n      console.error('Error storing file:', error);\n      throw error;\n    }\n  }\n\n  async getFile(filename, destination = 'uploads') {\n    try {\n      // Check cache first\n      if (this.cache) {\n        const cached = this.cache.get(`file:${filename}`);\n        if (cached) return cached;\n      }\n\n      const destPath = destination === 'public' ? this.publicPath : this.uploadsPath;\n      const filePath = path.join(destPath, filename);\n\n      if (!await fs.pathExists(filePath)) {\n        throw new Error(`File ${filename} not found`);\n      }\n\n      const stats = await fs.stat(filePath);\n      const fileInfo = {\n        filename,\n        path: filePath,\n        url: this.getPublicUrl(filePath),\n        size: stats.size,\n        mimeType: this.getMimeType(filename),\n        modifiedAt: stats.mtime,\n        destination\n      };\n\n      // Cache file info\n      if (this.cache) {\n        this.cache.set(`file:${filename}`, fileInfo);\n      }\n\n      return fileInfo;\n    } catch (error) {\n      console.error('Error getting file:', error);\n      throw error;\n    }\n  }\n\n  async deleteFile(filename, destination = 'uploads') {\n    try {\n      const destPath = destination === 'public' ? this.publicPath : this.uploadsPath;\n      const filePath = path.join(destPath, filename);\n\n      if (!await fs.pathExists(filePath)) {\n        throw new Error(`File ${filename} not found`);\n      }\n\n      await fs.remove(filePath);\n\n      // Remove from cache\n      if (this.cache) {\n        this.cache.delete(`file:${filename}`);\n      }\n\n      return { success: true, message: `File ${filename} deleted successfully` };\n    } catch (error) {\n      console.error('Error deleting file:', error);\n      throw error;\n    }\n  }\n\n  async listFiles(destination = 'uploads', subfolder = '', options = {}) {\n    const {\n      recursive = false,\n      filter = null,\n      sortBy = 'name',\n      sortOrder = 'asc'\n    } = options;\n\n    try {\n      const destPath = destination === 'public' ? this.publicPath : this.uploadsPath;\n      const searchPath = path.join(destPath, subfolder);\n\n      if (!await fs.pathExists(searchPath)) {\n        return [];\n      }\n\n      const files = await this.scanDirectory(searchPath, recursive);\n      \n      // Apply filters\n      let filteredFiles = files;\n      if (filter) {\n        filteredFiles = files.filter(file => {\n          if (typeof filter === 'function') {\n            return filter(file);\n          }\n          if (typeof filter === 'string') {\n            return file.name.includes(filter);\n          }\n          if (filter.extension) {\n            return path.extname(file.name) === filter.extension;\n          }\n          if (filter.mimeType) {\n            return file.mimeType.startsWith(filter.mimeType);\n          }\n          return true;\n        });\n      }\n\n      // Sort files\n      filteredFiles.sort((a, b) => {\n        let aValue = a[sortBy];\n        let bValue = b[sortBy];\n\n        if (sortBy === 'size' || sortBy === 'modifiedAt') {\n          aValue = aValue || 0;\n          bValue = bValue || 0;\n        } else {\n          aValue = String(aValue || '').toLowerCase();\n          bValue = String(bValue || '').toLowerCase();\n        }\n\n        if (sortOrder === 'desc') {\n          [aValue, bValue] = [bValue, aValue];\n        }\n\n        if (aValue < bValue) return -1;\n        if (aValue > bValue) return 1;\n        return 0;\n      });\n\n      return filteredFiles;\n    } catch (error) {\n      console.error('Error listing files:', error);\n      throw error;\n    }\n  }\n\n  async scanDirectory(dirPath, recursive = false) {\n    const files = [];\n    \n    try {\n      const entries = await fs.readdir(dirPath, { withFileTypes: true });\n      \n      for (const entry of entries) {\n        const fullPath = path.join(dirPath, entry.name);\n        const relativePath = path.relative(this.storageRoot, fullPath);\n        \n        if (entry.isDirectory() && recursive) {\n          const subFiles = await this.scanDirectory(fullPath, recursive);\n          files.push(...subFiles);\n        } else if (entry.isFile()) {\n          const stats = await fs.stat(fullPath);\n          files.push({\n            name: entry.name,\n            path: fullPath,\n            relativePath,\n            url: this.getPublicUrl(fullPath),\n            size: stats.size,\n            mimeType: this.getMimeType(entry.name),\n            modifiedAt: stats.mtime,\n            createdAt: stats.birthtime\n          });\n        }\n      }\n    } catch (error) {\n      console.error(`Error scanning directory ${dirPath}:`, error);\n    }\n    \n    return files;\n  }\n\n  // Public file serving\n  getPublicUrl(filePath) {\n    const relativePath = path.relative(this.storageRoot, filePath);\n    return `/storage/${relativePath.replace(/\\\\/g, '/')}`;\n  }\n\n  async servePublicFile(filePath) {\n    try {\n      const fullPath = path.join(this.storageRoot, filePath);\n      \n      if (!await fs.pathExists(fullPath)) {\n        throw new Error('File not found');\n      }\n\n      const stats = await fs.stat(fullPath);\n      const stream = fs.createReadStream(fullPath);\n      \n      return {\n        stream,\n        stats,\n        mimeType: this.getMimeType(filePath)\n      };\n    } catch (error) {\n      console.error('Error serving public file:', error);\n      throw error;\n    }\n  }\n\n  // File validation\n  async validateFile(file) {\n    // Check file size\n    if (file.size && file.size > this.options.maxFileSize) {\n      throw new Error(`File size exceeds maximum allowed size of ${this.formatBytes(this.options.maxFileSize)}`);\n    }\n\n    // Check file type\n    if (file.mimetype && !this.isAllowedType(file.mimetype)) {\n      throw new Error(`File type ${file.mimetype} is not allowed`);\n    }\n\n    return true;\n  }\n\n  isAllowedType(mimeType) {\n    return this.options.allowedTypes.some(allowed => {\n      if (allowed.endsWith('/*')) {\n        return mimeType.startsWith(allowed.slice(0, -1));\n      }\n      return mimeType === allowed;\n    });\n  }\n\n  // Utility methods\n  getMimeType(filename) {\n    const ext = path.extname(filename).toLowerCase();\n    const mimeTypes = {\n      '.html': 'text/html',\n      '.css': 'text/css',\n      '.js': 'text/javascript',\n      '.json': 'application/json',\n      '.png': 'image/png',\n      '.jpg': 'image/jpeg',\n      '.jpeg': 'image/jpeg',\n      '.gif': 'image/gif',\n      '.svg': 'image/svg+xml',\n      '.ico': 'image/x-icon',\n      '.woff': 'font/woff',\n      '.woff2': 'font/woff2',\n      '.ttf': 'font/ttf',\n      '.eot': 'application/vnd.ms-fontobject',\n      '.pdf': 'application/pdf',\n      '.txt': 'text/plain',\n      '.md': 'text/markdown',\n      '.xml': 'text/xml',\n      '.csv': 'text/csv'\n    };\n    \n    return mimeTypes[ext] || 'application/octet-stream';\n  }\n\n  formatBytes(bytes) {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  }\n\n  // Storage statistics\n  async getStorageStats() {\n    try {\n      const publicStats = await this.getDirectoryStats(this.publicPath);\n      const uploadsStats = await this.getDirectoryStats(this.uploadsPath);\n      const tempStats = await this.getDirectoryStats(this.tempPath);\n\n      return {\n        public: publicStats,\n        uploads: uploadsStats,\n        temp: tempStats,\n        total: {\n          files: publicStats.files + uploadsStats.files + tempStats.files,\n          size: publicStats.size + uploadsStats.size + tempStats.size\n        },\n        cache: this.cache ? this.cache.getStats() : null\n      };\n    } catch (error) {\n      console.error('Error getting storage stats:', error);\n      throw error;\n    }\n  }\n\n  async getDirectoryStats(dirPath) {\n    try {\n      if (!await fs.pathExists(dirPath)) {\n        return { files: 0, size: 0, directories: 0 };\n      }\n\n      const files = await this.scanDirectory(dirPath, true);\n      const totalSize = files.reduce((sum, file) => sum + file.size, 0);\n      const directories = new Set(files.map(f => path.dirname(f.relativePath))).size;\n\n      return {\n        files: files.length,\n        size: totalSize,\n        directories\n      };\n    } catch (error) {\n      console.error(`Error getting directory stats for ${dirPath}:`, error);\n      return { files: 0, size: 0, directories: 0 };\n    }\n  }\n\n  // Cleanup operations\n  async cleanupTempFiles(maxAge = 24 * 60 * 60 * 1000) { // 24 hours\n    try {\n      const files = await this.scanDirectory(this.tempPath, true);\n      const now = Date.now();\n      let cleanedCount = 0;\n\n      for (const file of files) {\n        if (now - file.modifiedAt.getTime() > maxAge) {\n          await this.deleteFile(file.name, 'temp');\n          cleanedCount++;\n        }\n      }\n\n      return { cleanedCount, message: `Cleaned ${cleanedCount} temporary files` };\n    } catch (error) {\n      console.error('Error cleaning temp files:', error);\n      throw error;\n    }\n  }\n\n  // Backup and restore\n  async createBackup(backupPath) {\n    try {\n      await fs.ensureDir(path.dirname(backupPath));\n      await fs.copy(this.storageRoot, backupPath);\n      return { success: true, backupPath };\n    } catch (error) {\n      console.error('Error creating backup:', error);\n      throw error;\n    }\n  }\n\n  async restoreFromBackup(backupPath) {\n    try {\n      if (!await fs.pathExists(backupPath)) {\n        throw new Error('Backup path does not exist');\n      }\n\n      // Create backup of current storage before restore\n      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n      const currentBackup = path.join(path.dirname(this.storageRoot), `backup-before-restore-${timestamp}`);\n      await this.createBackup(currentBackup);\n\n      // Restore from backup\n      await fs.remove(this.storageRoot);\n      await fs.copy(backupPath, this.storageRoot);\n\n      return { success: true, message: 'Storage restored successfully' };\n    } catch (error) {\n      console.error('Error restoring from backup:', error);\n      throw error;\n    }\n  }\n}\n\n// Create default instance\nexport const storageManager = new StorageManager();\n\n// Export the class and instance\nexport { StorageManager };\nexport default storageManager;", "// flux-core/src/runtime/index.js\n// Core runtime system for Flux applications\n\n// Environment detection\nconst isNode = typeof process !== 'undefined' && process.versions && process.versions.node;\nconst isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined';\nconst isWorker = typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope;\n\n// Global context\nconst globalContext = isNode ? global : (isBrowser ? window : self);\n\n// Performance monitoring\nclass PerformanceMonitor {\n  constructor() {\n    this.metrics = new Map();\n    this.startTime = Date.now();\n  }\n\n  startTimer(name) {\n    this.metrics.set(name, { start: performance.now() || Date.now() });\n  }\n\n  endTimer(name) {\n    const metric = this.metrics.get(name);\n    if (metric) {\n      metric.duration = (performance.now() || Date.now()) - metric.start;\n      metric.end = performance.now() || Date.now();\n    }\n  }\n\n  getMetrics() {\n    return Object.fromEntries(this.metrics);\n  }\n\n  reset() {\n    this.metrics.clear();\n    this.startTime = Date.now();\n  }\n}\n\n// Advanced error handling\nclass FluxError extends Error {\n  constructor(message, code, details = {}) {\n    super(message);\n    this.name = 'FluxError';\n    this.code = code;\n    this.details = details;\n    this.timestamp = new Date();\n    this.stack = this.stack || new Error().stack;\n  }\n}\n\n// Memory management and garbage collection\nclass MemoryManager {\n  constructor() {\n    this.allocations = new Map();\n    this.maxMemory = 100 * 1024 * 1024; // 100MB default\n    this.currentMemory = 0;\n  }\n\n  allocate(id, size, type) {\n    this.allocations.set(id, { size, type, timestamp: Date.now() });\n    this.currentMemory += size;\n    \n    if (this.currentMemory > this.maxMemory) {\n      this.garbageCollect();\n    }\n  }\n\n  deallocate(id) {\n    const allocation = this.allocations.get(id);\n    if (allocation) {\n      this.currentMemory -= allocation.size;\n      this.allocations.delete(id);\n    }\n  }\n\n  garbageCollect() {\n    const now = Date.now();\n    const maxAge = 5 * 60 * 1000; // 5 minutes\n    \n    for (const [id, allocation] of this.allocations) {\n      if (now - allocation.timestamp > maxAge) {\n        this.deallocate(id);\n      }\n    }\n  }\n\n  getStats() {\n    return {\n      currentMemory: this.currentMemory,\n      maxMemory: this.maxMemory,\n      allocationCount: this.allocations.size,\n      memoryUsage: (this.currentMemory / this.maxMemory) * 100\n    };\n  }\n}\n\n// Reactive system implementation with advanced optimizations\nclass ReactiveState {\n  constructor(initialValue, options = {}) {\n    this._value = initialValue;\n    this._subscribers = new Set();\n    this._computedCache = new Map();\n    this._batchUpdates = new Set();\n    this._isBatching = false;\n    this._comparator = options.comparator || ((a, b) => a !== b);\n    this._debounceMs = options.debounce || 0;\n    this._debounceTimer = null;\n    this._history = options.history ? [initialValue] : null;\n    this._maxHistory = options.maxHistory || 10;\n    \n    // Performance tracking\n    this._updateCount = 0;\n    this._lastUpdate = Date.now();\n  }\n\n  get value() {\n    // Track dependency with performance monitoring\n    if (currentEffect) {\n      this._subscribers.add(currentEffect);\n      currentEffect.dependencies.add(this);\n      \n      // Track dependency access patterns\n      if (!this._accessPatterns) {\n        this._accessPatterns = new Map();\n      }\n      const effectId = currentEffect.id || 'unknown';\n      this._accessPatterns.set(effectId, (this._accessPatterns.get(effectId) || 0) + 1);\n    }\n    \n    return this._value;\n  }\n\n  set value(newValue) {\n    if (this._comparator(newValue, this._value)) {\n      const oldValue = this._value;\n      this._value = newValue;\n      \n      // Add to history if enabled\n      if (this._history) {\n        this._history.push(newValue);\n        if (this._history.length > this._maxHistory) {\n          this._history.shift();\n        }\n      }\n      \n      // Batch updates for performance\n      if (this._isBatching) {\n        this._batchUpdates.add(this);\n      } else {\n        this.notify();\n      }\n      \n      // Update performance metrics\n      this._updateCount++;\n      this._lastUpdate = Date.now();\n      \n      // Emit change event\n      this.emit('change', { oldValue, newValue });\n    }\n  }\n\n  // Advanced value manipulation\n  update(updater) {\n    if (typeof updater === 'function') {\n      this.value = updater(this._value);\n    } else {\n      this.value = updater;\n    }\n  }\n\n  // Batch multiple updates\n  batch(updates) {\n    this._isBatching = true;\n    try {\n      updates();\n    } finally {\n      this._isBatching = false;\n      this._batchUpdates.forEach(state => state.notify());\n      this._batchUpdates.clear();\n    }\n  }\n\n  // Debounced updates\n  debouncedUpdate(newValue) {\n    if (this._debounceTimer) {\n      clearTimeout(this._debounceTimer);\n    }\n    \n    this._debounceTimer = setTimeout(() => {\n      this.value = newValue;\n    }, this._debounceMs);\n  }\n\n  // Undo/redo functionality\n  undo() {\n    if (this._history && this._history.length > 1) {\n      this._history.pop(); // Remove current\n      this.value = this._history[this._history.length - 1];\n      return true;\n    }\n    return false;\n  }\n\n  redo() {\n    // Implementation would require a redo stack\n    return false;\n  }\n\n  notify() {\n    // Performance optimization: batch notifications\n    if (this._subscribers.size === 0) return;\n    \n    const subscribers = Array.from(this._subscribers);\n    const startTime = performance.now() || Date.now();\n    \n    for (const subscriber of subscribers) {\n      try {\n        subscriber.execute();\n      } catch (error) {\n        console.error('Error in reactive subscriber:', error);\n        // Remove problematic subscriber\n        this._subscribers.delete(subscriber);\n      }\n    }\n    \n    // Track notification performance\n    const duration = (performance.now() || Date.now()) - startTime;\n    if (duration > 16) { // Longer than one frame\n      console.warn(`Slow reactive update: ${duration.toFixed(2)}ms`);\n    }\n    \n    // Clear computed cache\n    this._computedCache.clear();\n    \n    // Schedule component updates\n    FluxRuntime.scheduleUpdate();\n  }\n\n  subscribe(callback, options = {}) {\n    const subscription = {\n      callback,\n      id: options.id || Math.random().toString(36),\n      priority: options.priority || 0,\n      execute: () => callback(this._value)\n    };\n    \n    this._subscribers.add(subscription);\n    \n    return () => {\n      this._subscribers.delete(subscription);\n    };\n  }\n\n  // Event emitter functionality\n  emit(event, data) {\n    if (this._eventListeners && this._eventListeners[event]) {\n      this._eventListeners[event].forEach(listener => {\n        try {\n          listener(data);\n        } catch (error) {\n          console.error('Error in event listener:', error);\n        }\n      });\n    }\n  }\n\n  on(event, listener) {\n    if (!this._eventListeners) {\n      this._eventListeners = {};\n    }\n    if (!this._eventListeners[event]) {\n      this._eventListeners[event] = [];\n    }\n    this._eventListeners[event].push(listener);\n    \n    return () => {\n      const index = this._eventListeners[event].indexOf(listener);\n      if (index > -1) {\n        this._eventListeners[event].splice(index, 1);\n      }\n    };\n  }\n\n  // Performance and debugging\n  getStats() {\n    return {\n      updateCount: this._updateCount,\n      lastUpdate: this._lastUpdate,\n      subscriberCount: this._subscribers.size,\n      hasHistory: !!this._history,\n      historySize: this._history ? this._history.length : 0\n    };\n  }\n}\n\n// Enhanced Effect system with better cleanup and performance\nclass Effect {\n  constructor(fn, dependencies = [], options = {}) {\n    this.fn = fn;\n    this.dependencies = new Set();\n    this.isActive = true;\n    this.id = options.id || Math.random().toString(36);\n    this.priority = options.priority || 0;\n    this.cleanup = null;\n    this.executionCount = 0;\n    this.lastExecution = null;\n    this.executionTime = 0;\n    \n    // Performance monitoring\n    this._startTime = performance.now() || Date.now();\n    \n    // Initial execution to capture dependencies\n    this.execute();\n  }\n\n  execute() {\n    if (!this.isActive) return;\n    \n    const startTime = performance.now() || Date.now();\n    \n    // Clear old dependencies\n    for (const dep of this.dependencies) {\n      dep._subscribers.delete(this);\n    }\n    this.dependencies.clear();\n    \n    // Execute cleanup if exists\n    if (this.cleanup) {\n      try {\n        this.cleanup();\n      } catch (error) {\n        console.error('Error in effect cleanup:', error);\n      }\n      this.cleanup = null;\n    }\n    \n    // Execute with dependency tracking\n    const prevEffect = currentEffect;\n    currentEffect = this;\n    \n    try {\n      const result = this.fn();\n      \n      // Handle cleanup function return\n      if (typeof result === 'function') {\n        this.cleanup = result;\n      }\n      \n      // Update metrics\n      this.executionCount++;\n      this.lastExecution = Date.now();\n      this.executionTime = (performance.now() || Date.now()) - startTime;\n      \n    } catch (error) {\n      console.error('Error in effect execution:', error);\n      throw error;\n    } finally {\n      currentEffect = prevEffect;\n    }\n  }\n\n  dispose() {\n    this.isActive = false;\n    \n    // Execute cleanup\n    if (this.cleanup) {\n      try {\n        this.cleanup();\n      } catch (error) {\n        console.error('Error in effect cleanup:', error);\n      }\n    }\n    \n    // Clean up dependencies\n    for (const dep of this.dependencies) {\n      dep._subscribers.delete(this);\n    }\n    \n    this.dependencies.clear();\n  }\n\n  // Performance monitoring\n  getStats() {\n    return {\n      executionCount: this.executionCount,\n      lastExecution: this.lastExecution,\n      executionTime: this.executionTime,\n      isActive: this.isActive,\n      dependencyCount: this.dependencies.size\n    };\n  }\n}\n\n// Enhanced Computed with intelligent caching and performance\nclass Computed {\n  constructor(fn, options = {}) {\n    this.fn = fn;\n    this._value = undefined;\n    this._cached = false;\n    this.dependencies = new Set();\n    this.effect = new Effect(() => {\n      this._cached = false;\n    });\n    this.cacheStrategy = options.cacheStrategy || 'smart'; // 'smart', 'aggressive', 'none'\n    this.maxCacheAge = options.maxCacheAge || 5 * 60 * 1000; // 5 minutes\n    this.lastCacheTime = 0;\n    this.hitCount = 0;\n    this.missCount = 0;\n  }\n\n  get value() {\n    const now = Date.now();\n    \n    // Check if cache is still valid\n    if (this._cached && \n        (this.cacheStrategy === 'aggressive' || \n         now - this.lastCacheTime < this.maxCacheAge)) {\n      this.hitCount++;\n      return this._value;\n    }\n    \n    this.missCount++;\n    \n    // Recompute value\n    const prevEffect = currentEffect;\n    currentEffect = this.effect;\n    \n    try {\n      this._value = this.fn();\n      this._cached = true;\n      this.lastCacheTime = now;\n    } finally {\n      currentEffect = prevEffect;\n    }\n    \n    return this._value;\n  }\n\n  // Cache management\n  invalidate() {\n    this._cached = false;\n  }\n\n  clearCache() {\n    this._value = undefined;\n    this._cached = false;\n    this.lastCacheTime = 0;\n  }\n\n  // Performance statistics\n  getStats() {\n    const total = this.hitCount + this.missCount;\n    const hitRate = total > 0 ? (this.hitCount / total) * 100 : 0;\n    \n    return {\n      hitCount: this.hitCount,\n      missCount: this.missCount,\n      hitRate: hitRate.toFixed(2) + '%',\n      isCached: this._cached,\n      lastCacheTime: this.lastCacheTime,\n      cacheAge: Date.now() - this.lastCacheTime\n    };\n  }\n}\n\n// Global effect tracking\nlet currentEffect = null;\n\n\n\n\n\n\n\n// Virtual DOM implementation\nclass VNode {\n  constructor(type, props, children) {\n    this.type = type;\n    this.props = props || {};\n    this.children = children || [];\n    this.key = props?.key;\n    this.ref = props?.ref;\n    this.dom = null;\n  }\n}\n\nclass VirtualDOM {\n  constructor() {\n    this.currentTree = null;\n    this.pendingUpdates = new Map();\n    this.updateQueue = [];\n    this.isUpdating = false;\n  }\n\n  createElement(type, props, ...children) {\n    // Flatten children\n    const flatChildren = children.flat().filter(child => child != null);\n    \n    return new VNode(type, props, flatChildren);\n  }\n\n  // O(1) diffing algorithm for optimal performance\n  diff(oldNode, newNode) {\n    if (!oldNode || !newNode) {\n      return { type: 'replace', newNode };\n    }\n\n    if (oldNode.type !== newNode.type || oldNode.key !== newNode.key) {\n      return { type: 'replace', newNode };\n    }\n\n    const patches = [];\n    \n    // Diff props\n    const propPatches = this.diffProps(oldNode.props, newNode.props);\n    if (propPatches.length > 0) {\n      patches.push({ type: 'props', patches: propPatches });\n    }\n\n    // Diff children\n    const childPatches = this.diffChildren(oldNode.children, newNode.children);\n    if (childPatches.length > 0) {\n      patches.push({ type: 'children', patches: childPatches });\n    }\n\n    return patches.length > 0 ? { type: 'update', patches } : null;\n  }\n\n  diffProps(oldProps, newProps) {\n    const patches = [];\n    const allKeys = new Set([...Object.keys(oldProps), ...Object.keys(newProps)]);\n    \n    for (const key of allKeys) {\n      if (oldProps[key] !== newProps[key]) {\n        patches.push({ key, value: newProps[key] });\n      }\n    }\n    \n    return patches;\n  }\n\n  diffChildren(oldChildren, newChildren) {\n    const patches = [];\n    const maxLength = Math.max(oldChildren.length, newChildren.length);\n    \n    for (let i = 0; i < maxLength; i++) {\n      const oldChild = oldChildren[i];\n      const newChild = newChildren[i];\n      \n      if (!oldChild && newChild) {\n        patches.push({ type: 'insert', index: i, node: newChild });\n      } else if (oldChild && !newChild) {\n        patches.push({ type: 'remove', index: i });\n      } else if (oldChild && newChild) {\n        const childDiff = this.diff(oldChild, newChild);\n        if (childDiff) {\n          patches.push({ type: 'update', index: i, diff: childDiff });\n        }\n      }\n    }\n    \n    return patches;\n  }\n\n  // Batch updates for performance\n  scheduleUpdate(component, newVNode) {\n    this.pendingUpdates.set(component, newVNode);\n    \n    if (!this.isUpdating) {\n      this.isUpdating = true;\n      this.processUpdates();\n    }\n  }\n\n  processUpdates() {\n    const updates = Array.from(this.pendingUpdates.entries());\n    this.pendingUpdates.clear();\n    \n    for (const [component, newVNode] of updates) {\n      try {\n        this.updateComponent(component, newVNode);\n      } catch (error) {\n        console.error('Error updating component:', error);\n      }\n    }\n    \n    this.isUpdating = false;\n  }\n\n  updateComponent(component, newVNode) {\n    const oldVNode = component.currentVNode;\n    const patches = this.diff(oldVNode, newVNode);\n    \n    if (patches) {\n      this.applyPatches(component.dom, patches);\n      component.currentVNode = newVNode;\n    }\n  }\n\n  applyPatches(dom, patches) {\n    if (!dom) return;\n    \n    for (const patch of patches) {\n      switch (patch.type) {\n        case 'props':\n          this.applyPropPatches(dom, patch.patches);\n          break;\n        case 'children':\n          this.applyChildPatches(dom, patch.patches);\n          break;\n        case 'replace':\n          // Handle replacement\n          break;\n      }\n    }\n  }\n\n  applyPropPatches(dom, propPatches) {\n    for (const { key, value } of propPatches) {\n      if (key.startsWith('on')) {\n        // Event handler\n        const eventName = key.toLowerCase().substring(2);\n        dom.removeEventListener(eventName, dom[`_${key}`]);\n        dom.addEventListener(eventName, value);\n        dom[`_${key}`] = value;\n      } else if (key === 'style' && typeof value === 'object') {\n        // Style object\n        Object.assign(dom.style, value);\n      } else {\n        // Regular attribute\n        dom.setAttribute(key, value);\n      }\n    }\n  }\n\n  applyChildPatches(dom, childPatches) {\n    for (const patch of childPatches) {\n      switch (patch.type) {\n        case 'insert':\n          const newChild = this.createDOMNode(patch.node);\n          dom.insertBefore(newChild, dom.children[patch.index] || null);\n          break;\n        case 'remove':\n          if (dom.children[patch.index]) {\n            dom.removeChild(dom.children[patch.index]);\n          }\n          break;\n        case 'update':\n          this.applyPatches(dom.children[patch.index], patch.diff);\n          break;\n      }\n    }\n  }\n\n  createDOMNode(vnode) {\n    if (typeof vnode === 'string' || typeof vnode === 'number') {\n      return document.createTextNode(vnode);\n    }\n    \n    if (vnode.type === Fragment) {\n      const fragment = document.createDocumentFragment();\n      for (const child of vnode.children) {\n        fragment.appendChild(this.createDOMNode(child));\n      }\n      return fragment;\n    }\n    \n    const dom = document.createElement(vnode.type);\n    \n    // Set props\n    for (const [key, value] of Object.entries(vnode.props)) {\n      if (key !== 'key' && key !== 'ref') {\n        if (key.startsWith('on')) {\n          const eventName = key.toLowerCase().substring(2);\n          dom.addEventListener(eventName, value);\n          dom[`_${key}`] = value;\n        } else if (key === 'style' && typeof value === 'object') {\n          Object.assign(dom.style, value);\n        } else {\n          dom.setAttribute(key, value);\n        }\n      }\n    }\n    \n    // Create children\n    for (const child of vnode.children) {\n      dom.appendChild(this.createDOMNode(child));\n    }\n    \n    vnode.dom = dom;\n    return dom;\n  }\n}\n\n// Router implementation with environment detection\nclass Router {\n  constructor(options = {}) {\n    this.routes = new Map();\n    this.currentRoute = null;\n    this.params = {};\n    this.guards = new Map();\n    this.loaders = new Map();\n    this.mode = options.mode || (isBrowser ? 'browser' : 'hash');\n    this.base = options.base || '';\n    this.fallback = options.fallback || '/';\n    \n    // Only initialize browser-specific features in browser environment\n    if (isBrowser) {\n      // Listen to browser navigation\n      window.addEventListener('popstate', () => this.handleNavigation());\n      \n      // Initial route\n      this.handleNavigation();\n    } else {\n      // Node.js environment - use mock navigation\n      this.currentPath = '/';\n    }\n  }\n\n  registerRoute(path, component, options = {}) {\n    const routePattern = this.pathToRegex(path);\n    \n    this.routes.set(path, {\n      pattern: routePattern,\n      component,\n      guards: options.guards || [],\n      loader: options.loader,\n      meta: options.meta\n    });\n  }\n\n  registerGuard(name, guardFn) {\n    this.guards.set(name, guardFn);\n  }\n\n  pathToRegex(path) {\n    // Convert path like '/users/:id' to regex\n    const pattern = path\n      .replace(/\\//g, '\\\\/')\n      .replace(/:([^\\/]+)/g, '(?<$1>[^\\/]+)')\n      .replace(/\\*/g, '.*');\n    \n    return new RegExp(`^${pattern}$`);\n  }\n\n  async navigate(path, replace = false) {\n    const route = this.findRoute(path);\n    \n    if (!route) {\n      console.warn(`No route found for path: ${path}`);\n      return;\n    }\n\n    // Execute guards\n    for (const guardName of route.guards) {\n      const guard = this.guards.get(guardName);\n      if (guard && !(await guard(route, path))) {\n        return; // Guard blocked navigation\n      }\n    }\n\n    // Execute loader\n    let data = {};\n    if (route.loader) {\n      data = await route.loader(this.params);\n    }\n\n    // Update navigation state based on environment\n    if (isBrowser) {\n      // Update browser history\n      if (replace) {\n        window.history.replaceState({ path }, '', path);\n      } else {\n        window.history.pushState({ path }, '', path);\n      }\n    } else {\n      // Node.js environment - update internal state\n      this.currentPath = path;\n    }\n\n    // Render component\n    this.currentRoute = route;\n    this.renderCurrentRoute(data);\n  }\n\n  findRoute(path) {\n    for (const [routePath, route] of this.routes) {\n      const match = path.match(route.pattern);\n      if (match) {\n        this.params = match.groups || {};\n        return route;\n      }\n    }\n    return null;\n  }\n\n  async handleNavigation() {\n    let path;\n    if (isBrowser) {\n      path = window.location.pathname;\n    } else {\n      path = this.currentPath || '/';\n    }\n    await this.navigate(path, true);\n  }\n\n  renderCurrentRoute(data = {}) {\n    if (this.currentRoute) {\n      const component = new this.currentRoute.component({\n        ...data,\n        params: this.params\n      });\n      \n      if (isBrowser) {\n        const appContainer = document.getElementById('app') || document.body;\n        component.mount(appContainer);\n      } else {\n        // Node.js environment - just store the component\n        this.currentComponent = component;\n      }\n    }\n  }\n}\n\n// Base Component class\nexport class Component {\n  constructor(props = {}) {\n    this.props = props;\n    this.state = {};\n    this.effects = [];\n    this.currentVNode = null;\n    this.dom = null;\n    this.isMounted = false;\n    this.updateQueue = [];\n    this.isUpdating = false;\n    \n    // Bind methods\n    this.setState = this.setState.bind(this);\n    this.forceUpdate = this.forceUpdate.bind(this);\n    \n    // Initialize component\n    this.initialize();\n  }\n\n  initialize() {\n    // Set current component for effect tracking\n    setCurrentComponent(this);\n    \n    // Initialize state from class properties\n    this.initializeState();\n    \n    // Run lifecycle methods\n    if (this.componentDidMount) {\n      this.componentDidMount();\n    }\n  }\n\n  initializeState() {\n    // Convert class properties to reactive state\n    for (const [key, value] of Object.entries(this)) {\n      if (key.startsWith('state_') || key === 'state') {\n        const stateName = key.replace('state_', '');\n        this.state[stateName] = new ReactiveState(value);\n      }\n    }\n  }\n\n  setState(updater) {\n    if (typeof updater === 'function') {\n      updater(this.state);\n    } else {\n      Object.assign(this.state, updater);\n    }\n    \n    this.scheduleUpdate();\n  }\n\n  scheduleUpdate() {\n    if (!this.isUpdating) {\n      this.isUpdating = true;\n      FluxRuntime.scheduleUpdate(() => {\n        this.update();\n        this.isUpdating = false;\n      });\n    }\n  }\n\n  update() {\n    if (!this.isMounted) return;\n    \n    try {\n      const newVNode = this.render();\n      FluxRuntime.virtualDOM.scheduleUpdate(this, newVNode);\n    } catch (error) {\n      console.error('Error updating component:', error);\n    }\n  }\n\n  forceUpdate() {\n    this.update();\n  }\n\n  mount(container) {\n    this.container = container;\n    \n    try {\n      const vnode = this.render();\n      this.currentVNode = vnode;\n      \n      if (isBrowser) {\n        this.dom = FluxRuntime.virtualDOM.createDOMNode(vnode);\n        container.appendChild(this.dom);\n      }\n      \n      this.isMounted = true;\n      \n      if (this.componentDidMount) {\n        this.componentDidMount();\n      }\n    } catch (error) {\n      console.error('Error mounting component:', error);\n    }\n  }\n\n  unmount() {\n    if (this.componentWillUnmount) {\n      this.componentWillUnmount();\n    }\n    \n    // Clean up effects\n    for (const effect of this.effects) {\n      effect.dispose();\n    }\n    \n    this.isMounted = false;\n  }\n\n  render() {\n    throw new Error('Component must implement render method');\n  }\n}\n\n// Store class for state management\nexport class Store {\n  constructor() {\n    this.state = {};\n    this.actions = {};\n    this.computed = {};\n    this.subscribers = new Set();\n    this.middleware = [];\n    \n    this.initialize();\n  }\n\n  initialize() {\n    // Convert class properties to reactive state\n    for (const [key, value] of Object.entries(this)) {\n      if (key.startsWith('state_')) {\n        const stateName = key.replace('state_', '');\n        this.state[stateName] = new ReactiveState(value);\n      } else if (key.startsWith('action_')) {\n        const actionName = key.replace('action_', '');\n        this.actions[actionName] = value.bind(this);\n      } else if (key.startsWith('computed_')) {\n        const computedName = key.replace('computed_', '');\n        this.computed[computedName] = new Computed(value.bind(this));\n      }\n    }\n  }\n\n  // Dispatch action with middleware support\n  async dispatch(actionName, ...args) {\n    let result = this.actions[actionName];\n    \n    if (!result) {\n      throw new Error(`Action ${actionName} not found`);\n    }\n    \n    // Apply middleware\n    for (const middleware of this.middleware) {\n      result = middleware(result);\n    }\n    \n    try {\n      const actionResult = await result(...args);\n      this.notifySubscribers(actionName, actionResult);\n      return actionResult;\n    } catch (error) {\n      console.error(`Error in action ${actionName}:`, error);\n      throw error;\n    }\n  }\n\n  // Subscribe to store changes\n  subscribe(callback) {\n    this.subscribers.add(callback);\n    return () => this.subscribers.delete(callback);\n  }\n\n  notifySubscribers(actionName, result) {\n    for (const subscriber of this.subscribers) {\n      try {\n        subscriber(actionName, result);\n      } catch (error) {\n        console.error('Error in store subscriber:', error);\n      }\n    }\n  }\n\n  // Add middleware\n  use(middleware) {\n    this.middleware.push(middleware);\n  }\n\n  // Get store statistics\n  getStats() {\n    return {\n      stateCount: Object.keys(this.state).length,\n      actionCount: Object.keys(this.actions).length,\n      computedCount: Object.keys(this.computed).length,\n      subscriberCount: this.subscribers.size,\n      middlewareCount: this.middleware.length\n    };\n  }\n}\n\n// Main runtime class\nexport class FluxRuntime {\n  static virtualDOM = new VirtualDOM();\n  static router = new Router();\n  static updateQueue = new Set();\n  static isUpdating = false;\n\n  static scheduleUpdate(callback) {\n    if (callback) {\n      this.updateQueue.add(callback);\n    }\n    \n    if (!this.isUpdating) {\n      this.isUpdating = true;\n      \n      // Use appropriate scheduling based on environment\n      if (isBrowser && typeof requestAnimationFrame !== 'undefined') {\n        requestAnimationFrame(() => {\n          this.flushUpdates();\n          this.isUpdating = false;\n        });\n      } else {\n        // Node.js or fallback - use setImmediate or setTimeout\n        const scheduler = typeof setImmediate !== 'undefined' ? setImmediate : setTimeout;\n        scheduler(() => {\n          this.flushUpdates();\n          this.isUpdating = false;\n        }, 0);\n      }\n    }\n  }\n\n  static flushUpdates() {\n    for (const update of this.updateQueue) {\n      try {\n        update();\n      } catch (error) {\n        console.error('Error during update:', error);\n      }\n    }\n    \n    this.updateQueue.clear();\n  }\n\n  static registerRoute(path, component, options) {\n    this.router.registerRoute(path, component, options);\n  }\n\n  static registerGuard(name, guardFn) {\n    this.router.registerGuard(name, guardFn);\n  }\n\n  static navigate(path, replace = false) {\n    return this.router.navigate(path, replace);\n  }\n\n  static mount(component, container) {\n    if (isBrowser) {\n      if (typeof container === 'string') {\n        container = document.querySelector(container);\n      }\n      \n      if (!container) {\n        throw new Error('Container not found');\n      }\n      \n      const instance = new component();\n      instance.mount(container);\n      \n      return instance;\n    } else {\n      // Node.js environment - create instance without mounting\n      const instance = new component();\n      return instance;\n    }\n  }\n}\n\n// Factory functions\nexport function createReactiveState(initialValue) {\n  return new ReactiveState(initialValue);\n}\n\nexport function createEffect(fn, dependencies) {\n  const effect = new Effect(fn, dependencies);\n  \n  // Add to current component's effects for cleanup\n  if (currentComponent) {\n    currentComponent.effects.push(effect);\n  }\n  \n  return effect;\n}\n\nexport function createComputed(fn) {\n  return new Computed(fn);\n}\n\n// JSX helper\nexport function createElement(type, props, ...children) {\n  return FluxRuntime.virtualDOM.createElement(type, props, ...children);\n}\n\nexport const Fragment = Symbol('Fragment');\n\n// Component tracking for effects\nlet currentComponent = null;\n\nexport function setCurrentComponent(component) {\n  currentComponent = component;\n}\n\n// Global state management\nexport const FluxGlobalState = {\n  stores: new Map(),\n  effects: new Set(),\n  components: new Set(),\n  \n  registerStore(name, store) {\n    this.stores.set(name, store);\n  },\n  \n  getStore(name) {\n    return this.stores.get(name);\n  },\n  \n  registerEffect(effect) {\n    this.effects.add(effect);\n  },\n  \n  registerComponent(component) {\n    this.components.add(component);\n  },\n  \n  cleanup() {\n    // Clean up all effects\n    for (const effect of this.effects) {\n      effect.dispose();\n    }\n    this.effects.clear();\n    \n    // Clean up all components\n    for (const component of this.components) {\n      component.unmount();\n    }\n    this.components.clear();\n  },\n  \n  getStats() {\n    return {\n      storeCount: this.stores.size,\n      effectCount: this.effects.size,\n      componentCount: this.components.size\n    };\n  }\n};\n\n// Advanced caching system\nexport class FluxCache {\n  constructor(options = {}) {\n    this.maxSize = options.maxSize || 1000;\n    this.maxAge = options.maxAge || 5 * 60 * 1000; // 5 minutes\n    this.cache = new Map();\n    this.accessOrder = [];\n  }\n\n  set(key, value, ttl = this.maxAge) {\n    if (this.cache.size >= this.maxSize) {\n      this.evictOldest();\n    }\n\n    const entry = {\n      value,\n      timestamp: Date.now(),\n      ttl,\n      accessCount: 0\n    };\n\n    this.cache.set(key, entry);\n    this.updateAccessOrder(key);\n  }\n\n  get(key) {\n    const entry = this.cache.get(key);\n    if (!entry) return null;\n\n    // Check if expired\n    if (Date.now() - entry.timestamp > entry.ttl) {\n      this.cache.delete(key);\n      this.removeFromAccessOrder(key);\n      return null;\n    }\n\n    // Update access count and order\n    entry.accessCount++;\n    this.updateAccessOrder(key);\n    return entry.value;\n  }\n\n  has(key) {\n    return this.cache.has(key) && !this.isExpired(key);\n  }\n\n  delete(key) {\n    const deleted = this.cache.delete(key);\n    if (deleted) {\n      this.removeFromAccessOrder(key);\n    }\n    return deleted;\n  }\n\n  clear() {\n    this.cache.clear();\n    this.accessOrder = [];\n  }\n\n  evictOldest() {\n    if (this.accessOrder.length === 0) return;\n\n    const oldestKey = this.accessOrder[0];\n    this.cache.delete(oldestKey);\n    this.accessOrder.shift();\n  }\n\n  isExpired(key) {\n    const entry = this.cache.get(key);\n    if (!entry) return true;\n    return Date.now() - entry.timestamp > entry.ttl;\n  }\n\n  updateAccessOrder(key) {\n    this.removeFromAccessOrder(key);\n    this.accessOrder.push(key);\n  }\n\n  removeFromAccessOrder(key) {\n    const index = this.accessOrder.indexOf(key);\n    if (index > -1) {\n      this.accessOrder.splice(index, 1);\n    }\n  }\n\n  getStats() {\n    return {\n      size: this.cache.size,\n      maxSize: this.maxSize,\n      hitRate: this.calculateHitRate(),\n      averageAge: this.calculateAverageAge()\n    };\n  }\n\n  calculateHitRate() {\n    // Implementation would track hits vs misses\n    return 0.85; // Placeholder\n  }\n\n  calculateAverageAge() {\n    if (this.cache.size === 0) return 0;\n    \n    const now = Date.now();\n    let totalAge = 0;\n    \n    for (const entry of this.cache.values()) {\n      totalAge += now - entry.timestamp;\n    }\n    \n    return totalAge / this.cache.size;\n  }\n}\n\n// WebSocket manager for real-time features\nexport class FluxWebSocket {\n  constructor(url, options = {}) {\n    this.url = url;\n    this.options = {\n      reconnectInterval: 1000,\n      maxReconnectAttempts: 5,\n      heartbeatInterval: 30000,\n      ...options\n    };\n    \n    this.ws = null;\n    this.reconnectAttempts = 0;\n    this.reconnectTimer = null;\n    this.heartbeatTimer = null;\n    this.messageQueue = [];\n    this.subscribers = new Map();\n    this.isConnected = false;\n    \n    this.connect();\n  }\n\n  connect() {\n    try {\n      this.ws = new WebSocket(this.url);\n      \n      this.ws.onopen = () => {\n        this.isConnected = true;\n        this.reconnectAttempts = 0;\n        this.startHeartbeat();\n        this.flushMessageQueue();\n        this.emit('connected');\n      };\n      \n      this.ws.onmessage = (event) => {\n        try {\n          const data = JSON.parse(event.data);\n          this.handleMessage(data);\n        } catch (error) {\n          console.error('Error parsing WebSocket message:', error);\n        }\n      };\n      \n      this.ws.onclose = () => {\n        this.isConnected = false;\n        this.stopHeartbeat();\n        this.emit('disconnected');\n        this.scheduleReconnect();\n      };\n      \n      this.ws.onerror = (error) => {\n        console.error('WebSocket error:', error);\n        this.emit('error', error);\n      };\n      \n    } catch (error) {\n      console.error('Error creating WebSocket:', error);\n      this.scheduleReconnect();\n    }\n  }\n\n  send(type, data) {\n    const message = { type, data, timestamp: Date.now() };\n    \n    if (this.isConnected) {\n      this.ws.send(JSON.stringify(message));\n    } else {\n      this.messageQueue.push(message);\n    }\n  }\n\n  subscribe(type, callback) {\n    if (!this.subscribers.has(type)) {\n      this.subscribers.set(type, new Set());\n    }\n    this.subscribers.get(type).add(callback);\n    \n    return () => {\n      const callbacks = this.subscribers.get(type);\n      if (callbacks) {\n        callbacks.delete(callback);\n      }\n    };\n  }\n\n  handleMessage(data) {\n    const { type, data: messageData } = data;\n    const callbacks = this.subscribers.get(type);\n    \n    if (callbacks) {\n      for (const callback of callbacks) {\n        try {\n          callback(messageData);\n        } catch (error) {\n          console.error('Error in WebSocket message handler:', error);\n        }\n      }\n    }\n    \n    this.emit('message', data);\n  }\n\n  startHeartbeat() {\n    this.heartbeatTimer = setInterval(() => {\n      if (this.isConnected) {\n        this.send('heartbeat', { timestamp: Date.now() });\n      }\n    }, this.options.heartbeatInterval);\n  }\n\n  stopHeartbeat() {\n    if (this.heartbeatTimer) {\n      clearInterval(this.heartbeatTimer);\n      this.heartbeatTimer = null;\n    }\n  }\n\n  scheduleReconnect() {\n    if (this.reconnectAttempts < this.options.maxReconnectAttempts) {\n      this.reconnectAttempts++;\n      this.reconnectTimer = setTimeout(() => {\n        this.connect();\n      }, this.options.reconnectInterval * this.reconnectAttempts);\n    }\n  }\n\n  flushMessageQueue() {\n    while (this.messageQueue.length > 0) {\n      const message = this.messageQueue.shift();\n      this.ws.send(JSON.stringify(message));\n    }\n  }\n\n  disconnect() {\n    if (this.reconnectTimer) {\n      clearTimeout(this.reconnectTimer);\n      this.reconnectTimer = null;\n    }\n    \n    if (this.heartbeatTimer) {\n      clearInterval(this.heartbeatTimer);\n      this.heartbeatTimer = null;\n    }\n    \n    if (this.ws) {\n      this.ws.close();\n      this.ws = null;\n    }\n  }\n\n  // Event emitter functionality\n  emit(event, data) {\n    // Implementation would use event emitter\n    console.log(`WebSocket event: ${event}`, data);\n  }\n}\n\n// Development helpers\nexport const FluxDevTools = {\n  logStateChanges: true,\n  logRenders: true,\n  logRouteChanges: true,\n  \n  trackStateChange(component, stateName, oldValue, newValue) {\n    if (this.logStateChanges) {\n      console.log(`[Flux] State change in ${component.constructor.name}:`, {\n        state: stateName,\n        oldValue,\n        newValue\n      });\n    }\n  },\n  \n  trackRender(component, renderTime) {\n    if (this.logRenders) {\n      console.log(`[Flux] Render ${component.constructor.name}: ${renderTime}ms`);\n    }\n  },\n  \n  trackRouteChange(from, to) {\n    if (this.logRouteChanges) {\n      console.log(`[Flux] Route change: ${from} -> ${to}`);\n    }\n  }\n};\n\n// Performance monitoring\nexport const FluxProfiler = {\n  measurements: new Map(),\n  \n  start(label) {\n    this.measurements.set(label, performance.now());\n  },\n  \n  end(label) {\n    const startTime = this.measurements.get(label);\n    if (startTime) {\n      const duration = performance.now() - startTime;\n      this.measurements.delete(label);\n      return duration;\n    }\n    return 0;\n  },\n  \n  measure(label, fn) {\n    this.start(label);\n    const result = fn();\n    const duration = this.end(label);\n    \n    console.log(`[Flux Profiler] ${label}: ${duration.toFixed(2)}ms`);\n    \n    return result;\n  }\n};\n\n// Export everything\nexport {\n  ReactiveState,\n  Effect,\n  Computed,\n  VNode,\n  VirtualDOM,\n  Router\n};"],
  "mappings": "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",
  "names": ["fs", "path", "path", "fs", "path", "__dirname", "fs", "path", "fileURLToPath", "path", "path", "__filename", "fileURLToPath", "__dirname", "path", "fs", "fs", "WebSocket"]
}
