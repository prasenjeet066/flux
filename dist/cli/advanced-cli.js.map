{
  "version": 3,
  "sources": ["../../src/compiler/lexer.js", "../../src/ast/nodes.js", "../../src/compiler/parser.js", "../../src/compiler/codegen.js", "../../src/errors.js", "../../src/compiler/index.js", "../../src/runtime/index.js", "../../src/config/index.js", "../../src/storage/index.js", "../../src/cli/dev-server.js", "../../src/cli/advanced-cli.js"],
  "sourcesContent": ["// flux-core/src/compiler/lexer.js\n// Tokenizes Flux source code into tokens\n\nexport class FluxLexer {\n  constructor(source) {\n    this.source = source;\n    this.position = 0;\n    this.start = 0;\n    this.line = 1;\n    this.column = 1;\n    this.tokens = [];\n    this.errors = [];\n  }\n\n  // Token types\n  static TOKEN_TYPES = {\n    // Literals\n    IDENTIFIER: 'IDENTIFIER',\n    NUMBER: 'NUMBER',\n    STRING: 'STRING',\n    BOOLEAN: 'BOOLEAN',\n    \n    // Keywords\n    COMPONENT: 'COMPONENT',\n    STATE: 'STATE',\n    PROP: 'PROP',\n    METHOD: 'METHOD',\n    RENDER: 'RENDER',\n    EFFECT: 'EFFECT',\n    COMPUTED: 'COMPUTED',\n    STORE: 'STORE',\n    ACTION: 'ACTION',\n    LIFECYCLE: 'LIFECYCLE',\n    GUARD: 'GUARD',\n    ROUTER: 'ROUTER',\n    ROUTE: 'ROUTE',\n    USE: 'USE',\n    IMPORT: 'IMPORT',\n    EXPORT: 'EXPORT',\n    ASYNC: 'ASYNC',\n    AWAIT: 'AWAIT',\n    IF: 'IF',\n    ELSE: 'ELSE',\n    FOR: 'FOR',\n    WHILE: 'WHILE',\n    RETURN: 'RETURN',\n    TRY: 'TRY',\n    CATCH: 'CATCH',\n    FINALLY: 'FINALLY',\n    \n    // Operators\n    ASSIGN: 'ASSIGN',\n    PLUS_ASSIGN: 'PLUS_ASSIGN',\n    MINUS_ASSIGN: 'MINUS_ASSIGN',\n    PLUS: 'PLUS',\n    MINUS: 'MINUS',\n    MULTIPLY: 'MULTIPLY',\n    DIVIDE: 'DIVIDE',\n    MODULO: 'MODULO',\n    EQUALS: 'EQUALS',\n    NOT_EQUALS: 'NOT_EQUALS',\n    LESS_THAN: 'LESS_THAN',\n    GREATER_THAN: 'GREATER_THAN',\n    LESS_EQUAL: 'LESS_EQUAL',\n    GREATER_EQUAL: 'GREATER_EQUAL',\n    LOGICAL_AND: 'LOGICAL_AND',\n    LOGICAL_OR: 'LOGICAL_OR',\n    LOGICAL_NOT: 'LOGICAL_NOT',\n    \n    // Delimiters\n    LEFT_PAREN: 'LEFT_PAREN',\n    RIGHT_PAREN: 'RIGHT_PAREN',\n    LEFT_BRACE: 'LEFT_BRACE',\n    RIGHT_BRACE: 'RIGHT_BRACE',\n    LEFT_BRACKET: 'LEFT_BRACKET',\n    RIGHT_BRACKET: 'RIGHT_BRACKET',\n    SEMICOLON: 'SEMICOLON',\n    COMMA: 'COMMA',\n    DOT: 'DOT',\n    COLON: 'COLON',\n    QUESTION: 'QUESTION',\n    \n    // JSX-like tokens\n    JSX_OPEN: 'JSX_OPEN',\n    JSX_CLOSE: 'JSX_CLOSE',\n    JSX_SELF_CLOSE: 'JSX_SELF_CLOSE',\n    JSX_TEXT: 'JSX_TEXT',\n    \n    // Decorators\n    AT: 'AT',\n    \n    // Special\n    NEWLINE: 'NEWLINE',\n    EOF: 'EOF',\n    UNKNOWN: 'UNKNOWN'\n  };\n\n  static KEYWORDS = {\n    'component': 'COMPONENT',\n    'state': 'STATE',\n    'prop': 'PROP',\n    'method': 'METHOD',\n    'render': 'RENDER',\n    'effect': 'EFFECT',\n    'computed': 'COMPUTED',\n    'store': 'STORE',\n    'action': 'ACTION',\n    'lifecycle': 'LIFECYCLE',\n    'guard': 'GUARD',\n    'router': 'ROUTER',\n    'route': 'ROUTE',\n    'use': 'USE',\n    'import': 'IMPORT',\n    'export': 'EXPORT',\n    'async': 'ASYNC',\n    'await': 'AWAIT',\n    'if': 'IF',\n    'else': 'ELSE',\n    'for': 'FOR',\n    'while': 'WHILE',\n    'return': 'RETURN',\n    'try': 'TRY',\n    'catch': 'CATCH',\n    'finally': 'FINALLY',\n    'true': 'BOOLEAN',\n    'false': 'BOOLEAN',\n    'null': 'BOOLEAN',\n    'undefined': 'BOOLEAN'\n  };\n\n  tokenize() {\n    while (!this.isAtEnd()) {\n      this.scanToken();\n    }\n    \n    this.addToken(FluxLexer.TOKEN_TYPES.EOF);\n    return this.tokens;\n  }\n\n  scanToken() {\n    this.start = this.position;\n    const c = this.advance();\n    \n    switch (c) {\n      case ' ':\n      case '\\r':\n      case '\\t':\n        break; // Ignore whitespace\n      \n      case '\\n':\n        this.line++;\n        this.column = 1;\n        this.addToken(FluxLexer.TOKEN_TYPES.NEWLINE);\n        break;\n      \n      case '(':\n        this.addToken(FluxLexer.TOKEN_TYPES.LEFT_PAREN);\n        break;\n      case ')':\n        this.addToken(FluxLexer.TOKEN_TYPES.RIGHT_PAREN);\n        break;\n      case '{':\n        this.addToken(FluxLexer.TOKEN_TYPES.LEFT_BRACE);\n        break;\n      case '}':\n        this.addToken(FluxLexer.TOKEN_TYPES.RIGHT_BRACE);\n        break;\n      case '[':\n        this.addToken(FluxLexer.TOKEN_TYPES.LEFT_BRACKET);\n        break;\n      case ']':\n        this.addToken(FluxLexer.TOKEN_TYPES.RIGHT_BRACKET);\n        break;\n      case ';':\n        this.addToken(FluxLexer.TOKEN_TYPES.SEMICOLON);\n        break;\n      case ',':\n        this.addToken(FluxLexer.TOKEN_TYPES.COMMA);\n        break;\n      case '.':\n        this.addToken(FluxLexer.TOKEN_TYPES.DOT);\n        break;\n      case ':':\n        this.addToken(FluxLexer.TOKEN_TYPES.COLON);\n        break;\n      case '?':\n        this.addToken(FluxLexer.TOKEN_TYPES.QUESTION);\n        break;\n      case '@':\n        this.addToken(FluxLexer.TOKEN_TYPES.AT);\n        break;\n      \n      case '+':\n        this.addToken(this.match('=') ? \n          FluxLexer.TOKEN_TYPES.PLUS_ASSIGN : \n          FluxLexer.TOKEN_TYPES.PLUS\n        );\n        break;\n      case '-':\n        this.addToken(this.match('=') ? \n          FluxLexer.TOKEN_TYPES.MINUS_ASSIGN : \n          FluxLexer.TOKEN_TYPES.MINUS\n        );\n        break;\n      case '*':\n        this.addToken(FluxLexer.TOKEN_TYPES.MULTIPLY);\n        break;\n      case '%':\n        this.addToken(FluxLexer.TOKEN_TYPES.MODULO);\n        break;\n      \n      case '!':\n        this.addToken(this.match('=') ? \n          FluxLexer.TOKEN_TYPES.NOT_EQUALS : \n          FluxLexer.TOKEN_TYPES.LOGICAL_NOT\n        );\n        break;\n      case '=':\n        this.addToken(this.match('=') ? \n          FluxLexer.TOKEN_TYPES.EQUALS : \n          FluxLexer.TOKEN_TYPES.ASSIGN\n        );\n        break;\n      case '<':\n        if (this.peek() === '/') {\n          this.advance(); // consume '/'\n          this.addToken(FluxLexer.TOKEN_TYPES.JSX_CLOSE);\n        } else if (this.match('=')) {\n          this.addToken(FluxLexer.TOKEN_TYPES.LESS_EQUAL);\n        } else {\n          this.addToken(FluxLexer.TOKEN_TYPES.JSX_OPEN);\n        }\n        break;\n      case '>':\n        this.addToken(this.match('=') ? \n          FluxLexer.TOKEN_TYPES.GREATER_EQUAL : \n          FluxLexer.TOKEN_TYPES.GREATER_THAN\n        );\n        break;\n      \n      case '&':\n        if (this.match('&')) {\n          this.addToken(FluxLexer.TOKEN_TYPES.LOGICAL_AND);\n        }\n        break;\n      case '|':\n        if (this.match('|')) {\n          this.addToken(FluxLexer.TOKEN_TYPES.LOGICAL_OR);\n        }\n        break;\n      \n      case '/':\n        if (this.match('/')) {\n          // Single line comment\n          while (this.peek() !== '\\n' && !this.isAtEnd()) {\n            this.advance();\n          }\n        } else if (this.match('*')) {\n          // Multi-line comment\n          this.blockComment();\n        } else if (this.match('>')) {\n          this.addToken(FluxLexer.TOKEN_TYPES.JSX_SELF_CLOSE);\n        } else {\n          this.addToken(FluxLexer.TOKEN_TYPES.DIVIDE);\n        }\n        break;\n      \n      case '\"':\n      case \"'\":\n        this.string(c);\n        break;\n      \n      default:\n        if (this.isDigit(c)) {\n          this.number();\n        } else if (this.isAlpha(c)) {\n          this.identifier();\n        } else {\n          this.addToken(FluxLexer.TOKEN_TYPES.UNKNOWN, c);\n        }\n        break;\n    }\n  }\n\n  identifier() {\n    while (this.isAlphaNumeric(this.peek())) {\n      this.advance();\n    }\n    \n    const text = this.source.substring(this.start, this.position);\n    const type = FluxLexer.KEYWORDS[text] || FluxLexer.TOKEN_TYPES.IDENTIFIER;\n    this.addToken(type, text);\n  }\n\n  number() {\n    while (this.isDigit(this.peek())) {\n      this.advance();\n    }\n    \n    // Look for decimal part\n    if (this.peek() === '.' && this.isDigit(this.peekNext())) {\n      this.advance(); // consume '.'\n      while (this.isDigit(this.peek())) {\n        this.advance();\n      }\n    }\n    \n    const value = parseFloat(this.source.substring(this.start, this.position));\n    this.addToken(FluxLexer.TOKEN_TYPES.NUMBER, value);\n  }\n\n  string(quote) {\n    while (this.peek() !== quote && !this.isAtEnd()) {\n      if (this.peek() === '\\n') this.line++;\n      this.advance();\n    }\n    \n    if (this.isAtEnd()) {\n      throw new Error(`Unterminated string at line ${this.line}`);\n    }\n    \n    this.advance(); // closing quote\n    \n    const value = this.source.substring(this.start + 1, this.position - 1);\n    this.addToken(FluxLexer.TOKEN_TYPES.STRING, value);\n  }\n\n  blockComment() {\n    while (!this.isAtEnd()) {\n      if (this.peek() === '*' && this.peekNext() === '/') {\n        this.advance(); // consume '*'\n        this.advance(); // consume '/'\n        break;\n      }\n      if (this.peek() === '\\n') this.line++;\n      this.advance();\n    }\n  }\n\n  match(expected) {\n    if (this.isAtEnd()) return false;\n    if (this.source.charAt(this.position) !== expected) return false;\n    \n    this.position++;\n    this.column++;\n    return true;\n  }\n\n  peek() {\n    if (this.isAtEnd()) return '\\0';\n    return this.source.charAt(this.position);\n  }\n\n  peekNext() {\n    if (this.position + 1 >= this.source.length) return '\\0';\n    return this.source.charAt(this.position + 1);\n  }\n\n  isAlpha(c) {\n    return (c >= 'a' && c <= 'z') ||\n           (c >= 'A' && c <= 'Z') ||\n           c === '_';\n  }\n\n  isAlphaNumeric(c) {\n    return this.isAlpha(c) || this.isDigit(c);\n  }\n\n  isDigit(c) {\n    return c >= '0' && c <= '9';\n  }\n\n  isAtEnd() {\n    return this.position >= this.source.length;\n  }\n\n  advance() {\n    this.column++;\n    return this.source.charAt(this.position++);\n  }\n\n  addToken(type, literal = null) {\n    let text;\n    if (type === FluxLexer.TOKEN_TYPES.EOF) {\n      text = '';\n    } else {\n      text = this.source.substring(this.start, this.position);\n    }\n    this.tokens.push({\n      type,\n      lexeme: text,\n      literal,\n      line: this.line,\n      column: this.column - text.length\n    });\n  }\n}", "// flux-core/src/ast/nodes.js\n// Abstract Syntax Tree node definitions for Flux language\n\nexport class ASTNode {\n  constructor(type, location) {\n    this.type = type;\n    this.location = location;\n  }\n}\n\n// Program root\nexport class Program extends ASTNode {\n  constructor(body, location) {\n    super('Program', location);\n    this.body = body; // Array of top-level statements\n  }\n}\n\n// Imports and Exports\nexport class ImportDeclaration extends ASTNode {\n  constructor(specifiers, source, location) {\n    super('ImportDeclaration', location);\n    this.specifiers = specifiers;\n    this.source = source;\n  }\n}\n\nexport class ImportSpecifier extends ASTNode {\n  constructor(imported, local, location) {\n    super('ImportSpecifier', location);\n    this.imported = imported;\n    this.local = local;\n  }\n}\n\nexport class ExportDeclaration extends ASTNode {\n  constructor(declaration, location) {\n    super('ExportDeclaration', location);\n    this.declaration = declaration;\n  }\n}\n\n// Component Declaration\nexport class ComponentDeclaration extends ASTNode {\n  constructor(name, decorators, body, location) {\n    super('ComponentDeclaration', location);\n    this.name = name;\n    this.decorators = decorators || [];\n    this.body = body;\n    this.state = [];\n    this.props = [];\n    this.methods = [];\n    this.effects = [];\n    this.computed = [];\n    this.render = null;\n    this.lifecycle = [];\n    \n    // Organize body items\n    this.organizeBody();\n  }\n  \n  organizeBody() {\n    for (const item of this.body) {\n      switch (item.type) {\n        case 'StateDeclaration':\n          this.state.push(item);\n          break;\n        case 'PropDeclaration':\n          this.props.push(item);\n          break;\n        case 'MethodDeclaration':\n          this.methods.push(item);\n          break;\n        case 'EffectDeclaration':\n          this.effects.push(item);\n          break;\n        case 'ComputedDeclaration':\n          this.computed.push(item);\n          break;\n        case 'RenderDeclaration':\n          this.render = item;\n          break;\n        case 'LifecycleDeclaration':\n          this.lifecycle.push(item);\n          break;\n      }\n    }\n  }\n}\n\n// Store Declaration\nexport class StoreDeclaration extends ASTNode {\n  constructor(name, body, location) {\n    super('StoreDeclaration', location);\n    this.name = name;\n    this.body = body;\n    this.state = [];\n    this.actions = [];\n    this.computed = [];\n    \n    this.organizeBody();\n  }\n  \n  organizeBody() {\n    for (const item of this.body) {\n      switch (item.type) {\n        case 'StateDeclaration':\n          this.state.push(item);\n          break;\n        case 'ActionDeclaration':\n          this.actions.push(item);\n          break;\n        case 'ComputedDeclaration':\n          this.computed.push(item);\n          break;\n      }\n    }\n  }\n}\n\n// Declarations\nexport class StateDeclaration extends ASTNode {\n  constructor(name, initialValue, typeAnnotation, location) {\n    super('StateDeclaration', location);\n    this.name = name;\n    this.initialValue = initialValue;\n    this.typeAnnotation = typeAnnotation;\n  }\n}\n\nexport class PropDeclaration extends ASTNode {\n  constructor(name, typeAnnotation, defaultValue, location) {\n    super('PropDeclaration', location);\n    this.name = name;\n    this.typeAnnotation = typeAnnotation;\n    this.defaultValue = defaultValue;\n  }\n}\n\nexport class MethodDeclaration extends ASTNode {\n  constructor(name, parameters, body, isAsync, location) {\n    super('MethodDeclaration', location);\n    this.name = name;\n    this.parameters = parameters;\n    this.body = body;\n    this.isAsync = isAsync;\n  }\n}\n\nexport class ActionDeclaration extends ASTNode {\n  constructor(name, parameters, body, isAsync, location) {\n    super('ActionDeclaration', location);\n    this.name = name;\n    this.parameters = parameters;\n    this.body = body;\n    this.isAsync = isAsync;\n  }\n}\n\nexport class EffectDeclaration extends ASTNode {\n  constructor(dependencies, body, location) {\n    super('EffectDeclaration', location);\n    this.dependencies = dependencies;\n    this.body = body;\n  }\n}\n\nexport class ComputedDeclaration extends ASTNode {\n  constructor(name, body, location) {\n    super('ComputedDeclaration', location);\n    this.name = name;\n    this.body = body;\n  }\n}\n\nexport class RenderDeclaration extends ASTNode {\n  constructor(body, location) {\n    super('RenderDeclaration', location);\n    this.body = body;\n  }\n}\n\nexport class LifecycleDeclaration extends ASTNode {\n  constructor(phase, body, isAsync, location) {\n    super('LifecycleDeclaration', location);\n    this.phase = phase; // 'mounted', 'updated', 'unmounted', etc.\n    this.body = body;\n    this.isAsync = isAsync;\n  }\n}\n\n// Decorators\nexport class Decorator extends ASTNode {\n  constructor(name, arguments_, location) {\n    super('Decorator', location);\n    this.name = name;\n    this.arguments = arguments_ || [];\n  }\n}\n\n// Expressions\nexport class BinaryExpression extends ASTNode {\n  constructor(left, operator, right, location) {\n    super('BinaryExpression', location);\n    this.left = left;\n    this.operator = operator;\n    this.right = right;\n  }\n}\n\nexport class UnaryExpression extends ASTNode {\n  constructor(operator, operand, location) {\n    super('UnaryExpression', location);\n    this.operator = operator;\n    this.operand = operand;\n  }\n}\n\nexport class AssignmentExpression extends ASTNode {\n  constructor(left, operator, right, location) {\n    super('AssignmentExpression', location);\n    this.left = left;\n    this.operator = operator;\n    this.right = right;\n  }\n}\n\nexport class CallExpression extends ASTNode {\n  constructor(callee, arguments_, location) {\n    super('CallExpression', location);\n    this.callee = callee;\n    this.arguments = arguments_;\n  }\n}\n\nexport class MemberExpression extends ASTNode {\n  constructor(object, property, computed, location) {\n    super('MemberExpression', location);\n    this.object = object;\n    this.property = property;\n    this.computed = computed;\n  }\n}\n\nexport class ConditionalExpression extends ASTNode {\n  constructor(test, consequent, alternate, location) {\n    super('ConditionalExpression', location);\n    this.test = test;\n    this.consequent = consequent;\n    this.alternate = alternate;\n  }\n}\n\nexport class ArrayExpression extends ASTNode {\n  constructor(elements, location) {\n    super('ArrayExpression', location);\n    this.elements = elements;\n  }\n}\n\nexport class ObjectExpression extends ASTNode {\n  constructor(properties, location) {\n    super('ObjectExpression', location);\n    this.properties = properties;\n  }\n}\n\nexport class Property extends ASTNode {\n  constructor(key, value, kind, location) {\n    super('Property', location);\n    this.key = key;\n    this.value = value;\n    this.kind = kind || 'init';\n  }\n}\n\n// Literals\nexport class Literal extends ASTNode {\n  constructor(value, location) {\n    super('Literal', location);\n    this.value = value;\n  }\n}\n\nexport class Identifier extends ASTNode {\n  constructor(name, location) {\n    super('Identifier', location);\n    this.name = name;\n  }\n}\n\n// JSX-like Nodes\nexport class JSXElement extends ASTNode {\n  constructor(openingElement, children, closingElement, location) {\n    super('JSXElement', location);\n    this.openingElement = openingElement;\n    this.children = children;\n    this.closingElement = closingElement;\n    this.selfClosing = !closingElement;\n  }\n}\n\nexport class JSXOpeningElement extends ASTNode {\n  constructor(name, attributes, selfClosing, location) {\n    super('JSXOpeningElement', location);\n    this.name = name;\n    this.attributes = attributes;\n    this.selfClosing = selfClosing;\n  }\n}\n\nexport class JSXClosingElement extends ASTNode {\n  constructor(name, location) {\n    super('JSXClosingElement', location);\n    this.name = name;\n  }\n}\n\nexport class JSXAttribute extends ASTNode {\n  constructor(name, value, location) {\n    super('JSXAttribute', location);\n    this.name = name;\n    this.value = value;\n  }\n}\n\nexport class JSXExpressionContainer extends ASTNode {\n  constructor(expression, location) {\n    super('JSXExpressionContainer', location);\n    this.expression = expression;\n  }\n}\n\nexport class JSXText extends ASTNode {\n  constructor(value, location) {\n    super('JSXText', location);\n    this.value = value;\n  }\n}\n\n// Statements\nexport class ExpressionStatement extends ASTNode {\n  constructor(expression, location) {\n    super('ExpressionStatement', location);\n    this.expression = expression;\n  }\n}\n\nexport class BlockStatement extends ASTNode {\n  constructor(body, location) {\n    super('BlockStatement', location);\n    this.body = body;\n  }\n}\n\nexport class IfStatement extends ASTNode {\n  constructor(test, consequent, alternate, location) {\n    super('IfStatement', location);\n    this.test = test;\n    this.consequent = consequent;\n    this.alternate = alternate;\n  }\n}\n\nexport class WhileStatement extends ASTNode {\n  constructor(test, body, location) {\n    super('WhileStatement', location);\n    this.test = test;\n    this.body = body;\n  }\n}\n\nexport class ForStatement extends ASTNode {\n  constructor(init, test, update, body, location) {\n    super('ForStatement', location);\n    this.init = init;\n    this.test = test;\n    this.update = update;\n    this.body = body;\n  }\n}\n\nexport class ReturnStatement extends ASTNode {\n  constructor(argument, location) {\n    super('ReturnStatement', location);\n    this.argument = argument;\n  }\n}\n\nexport class TryStatement extends ASTNode {\n  constructor(block, handler, finalizer, location) {\n    super('TryStatement', location);\n    this.block = block;\n    this.handler = handler;\n    this.finalizer = finalizer;\n  }\n}\n\nexport class CatchClause extends ASTNode {\n  constructor(param, body, location) {\n    super('CatchClause', location);\n    this.param = param;\n    this.body = body;\n  }\n}\n\nexport class ThrowStatement extends ASTNode {\n  constructor(argument, location) {\n    super('ThrowStatement', location);\n    this.argument = argument;\n  }\n}\n\nexport class VariableDeclaration extends ASTNode {\n  constructor(declarations, kind, location) {\n    super('VariableDeclaration', location);\n    this.declarations = declarations;\n    this.kind = kind; // 'var', 'let', 'const'\n  }\n}\n\nexport class VariableDeclarator extends ASTNode {\n  constructor(id, init, location) {\n    super('VariableDeclarator', location);\n    this.id = id;\n    this.init = init;\n  }\n}\n\n// Route specific nodes\nexport class RouteDeclaration extends ASTNode {\n  constructor(path, component, guards, loaders, meta, location) {\n    super('RouteDeclaration', location);\n    this.path = path;\n    this.component = component;\n    this.guards = guards || [];\n    this.loaders = loaders || [];\n    this.meta = meta;\n  }\n}\n\nexport class GuardDeclaration extends ASTNode {\n  constructor(name, parameters, body, location) {\n    super('GuardDeclaration', location);\n    this.name = name;\n    this.parameters = parameters;\n    this.body = body;\n  }\n}\n\n// Type annotations\nexport class TypeAnnotation extends ASTNode {\n  constructor(typeAnnotation, location) {\n    super('TypeAnnotation', location);\n    this.typeAnnotation = typeAnnotation;\n  }\n}\n\nexport class TSStringKeyword extends ASTNode {\n  constructor(location) {\n    super('TSStringKeyword', location);\n  }\n}\n\nexport class TSNumberKeyword extends ASTNode {\n  constructor(location) {\n    super('TSNumberKeyword', location);\n  }\n}\n\nexport class TSBooleanKeyword extends ASTNode {\n  constructor(location) {\n    super('TSBooleanKeyword', location);\n  }\n}\n\nexport class TSArrayType extends ASTNode {\n  constructor(elementType, location) {\n    super('TSArrayType', location);\n    this.elementType = elementType;\n  }\n}\n\nexport class TSUnionType extends ASTNode {\n  constructor(types, location) {\n    super('TSUnionType', location);\n    this.types = types;\n  }\n}\n\n// Utility function to create location object\nexport function createLocation(startLine, startColumn, endLine, endColumn) {\n  return {\n    start: { line: startLine, column: startColumn },\n    end: { line: endLine, column: endColumn }\n  };\n}", "// flux-core/src/compiler/parser.js\n// Recursive descent parser for Flux language\n\nimport { FluxLexer } from './lexer.js';\nimport * as AST from '../ast/nodes.js';\n\nexport class FluxParser {\n  constructor(tokens) {\n    this.tokens = tokens;\n    this.current = 0;\n    this.errors = [];\n  }\n\n  static parse(source) {\n    const lexer = new FluxLexer(source);\n    const tokens = lexer.tokenize();\n    const parser = new FluxParser(tokens);\n    return parser.program();\n  }\n\n  program() {\n    const body = [];\n    \n    while (!this.isAtEnd()) {\n      // Skip newlines at top level\n      if (this.check('NEWLINE')) {\n        this.advance();\n        continue;\n      }\n      \n      const stmt = this.topLevelStatement();\n      if (stmt) body.push(stmt);\n    }\n    \n    return new AST.Program(body, this.getCurrentLocation());\n  }\n\n  topLevelStatement() {\n    try {\n      if (this.match('IMPORT')) {\n        return this.importDeclaration();\n      }\n      \n      if (this.match('EXPORT')) {\n        return this.exportDeclaration();\n      }\n      \n      // Handle decorators\n      const decorators = [];\n      while (this.check('AT')) {\n        decorators.push(this.decorator());\n      }\n      \n      if (this.match('COMPONENT')) {\n        return this.componentDeclaration(decorators);\n      }\n      \n      if (this.match('STORE')) {\n        return this.storeDeclaration(decorators);\n      }\n      \n      if (this.match('GUARD')) {\n        return this.guardDeclaration(decorators);\n      }\n      \n      return this.statement();\n    } catch (error) {\n      this.synchronize();\n      throw error;\n    }\n  }\n\n  importDeclaration() {\n    const specifiers = [];\n    \n    if (this.check('LEFT_BRACE')) {\n      // Named imports: import { name1, name2 } from 'module'\n      this.consume('LEFT_BRACE', 'Expected \"{\"');\n      \n      do {\n        const imported = this.consume('IDENTIFIER', 'Expected identifier');\n        let local = imported;\n        \n        if (this.match('AS')) {\n          local = this.consume('IDENTIFIER', 'Expected identifier after \"as\"');\n        }\n        \n        specifiers.push(new AST.ImportSpecifier(\n          new AST.Identifier(imported.lexeme),\n          new AST.Identifier(local.lexeme)\n        ));\n      } while (this.match('COMMA'));\n      \n      this.consume('RIGHT_BRACE', 'Expected \"}\"');\n    } else {\n      // Default import: import name from 'module'\n      const name = this.consume('IDENTIFIER', 'Expected identifier');\n      specifiers.push(new AST.ImportSpecifier(\n        new AST.Identifier('default'),\n        new AST.Identifier(name.lexeme)\n      ));\n    }\n    \n    this.consume('FROM', 'Expected \"from\"');\n    const source = this.consume('STRING', 'Expected module path');\n    \n    return new AST.ImportDeclaration(\n      specifiers,\n      new AST.Literal(source.literal),\n      this.getCurrentLocation()\n    );\n  }\n\n  exportDeclaration() {\n    const declaration = this.topLevelStatement();\n    return new AST.ExportDeclaration(declaration, this.getCurrentLocation());\n  }\n\n  decorator() {\n    this.consume('AT', 'Expected \"@\"');\n    const name = this.consume('IDENTIFIER', 'Expected decorator name');\n    \n    let args = [];\n    if (this.match('LEFT_PAREN')) {\n      args = this.argumentList();\n      this.consume('RIGHT_PAREN', 'Expected \")\"');\n    }\n    \n    return new AST.Decorator(\n      new AST.Identifier(name.lexeme),\n      args,\n      this.getCurrentLocation()\n    );\n  }\n\n  componentDeclaration(decorators = []) {\n    const name = this.consume('IDENTIFIER', 'Expected component name');\n    \n    this.consume('LEFT_BRACE', 'Expected \"{\"');\n    \n    const body = [];\n    while (!this.check('RIGHT_BRACE') && !this.isAtEnd()) {\n      if (this.check('NEWLINE')) {\n        this.advance();\n        continue;\n      }\n      \n      const member = this.componentMember();\n      if (member) body.push(member);\n    }\n    \n    this.consume('RIGHT_BRACE', 'Expected \"}\"');\n    \n    return new AST.ComponentDeclaration(\n      new AST.Identifier(name.lexeme),\n      decorators,\n      body,\n      this.getCurrentLocation()\n    );\n  }\n\n  componentMember() {\n    if (this.match('STATE')) {\n      return this.stateDeclaration();\n    }\n    \n    if (this.match('PROP')) {\n      return this.propDeclaration();\n    }\n    \n    if (this.match('METHOD')) {\n      return this.methodDeclaration();\n    }\n    \n    if (this.match('EFFECT')) {\n      return this.effectDeclaration();\n    }\n    \n    if (this.match('COMPUTED')) {\n      return this.computedDeclaration();\n    }\n    \n    if (this.match('RENDER')) {\n      return this.renderDeclaration();\n    }\n    \n    if (this.match('LIFECYCLE')) {\n      return this.lifecycleDeclaration();\n    }\n    \n    return this.statement();\n  }\n\n  stateDeclaration() {\n    const name = this.consume('IDENTIFIER', 'Expected state variable name');\n    \n    let typeAnnotation = null;\n    if (this.match('COLON')) {\n      typeAnnotation = this.typeAnnotation();\n    }\n    \n    let initialValue = null;\n    if (this.match('ASSIGN')) {\n      initialValue = this.expression();\n    }\n    \n    return new AST.StateDeclaration(\n      new AST.Identifier(name.lexeme),\n      initialValue,\n      typeAnnotation,\n      this.getCurrentLocation()\n    );\n  }\n\n  propDeclaration() {\n    const name = this.consume('IDENTIFIER', 'Expected prop name');\n    \n    let typeAnnotation = null;\n    if (this.match('COLON')) {\n      typeAnnotation = this.typeAnnotation();\n    }\n    \n    let defaultValue = null;\n    if (this.match('ASSIGN')) {\n      defaultValue = this.expression();\n    }\n    \n    return new AST.PropDeclaration(\n      new AST.Identifier(name.lexeme),\n      typeAnnotation,\n      defaultValue,\n      this.getCurrentLocation()\n    );\n  }\n\n  methodDeclaration() {\n    const isAsync = this.match('ASYNC');\n    const name = this.consume('IDENTIFIER', 'Expected method name');\n    \n    this.consume('LEFT_PAREN', 'Expected \"(\"');\n    const parameters = this.parameterList();\n    this.consume('RIGHT_PAREN', 'Expected \")\"');\n    \n    const body = this.blockStatement();\n    \n    return new AST.MethodDeclaration(\n      new AST.Identifier(name.lexeme),\n      parameters,\n      body,\n      isAsync,\n      this.getCurrentLocation()\n    );\n  }\n\n  effectDeclaration() {\n    let dependencies = [];\n    \n    if (this.match('ON')) {\n      // effect on dependency1, dependency2 { ... }\n      dependencies.push(this.expression());\n      \n      while (this.match('COMMA')) {\n        dependencies.push(this.expression());\n      }\n    }\n    \n    const body = this.blockStatement();\n    \n    return new AST.EffectDeclaration(\n      dependencies,\n      body,\n      this.getCurrentLocation()\n    );\n  }\n\n  computedDeclaration() {\n    const name = this.consume('IDENTIFIER', 'Expected computed property name');\n    \n    this.consume('LEFT_PAREN', 'Expected \"(\"');\n    this.consume('RIGHT_PAREN', 'Expected \")\"');\n    \n    const body = this.blockStatement();\n    \n    return new AST.ComputedDeclaration(\n      new AST.Identifier(name.lexeme),\n      body,\n      this.getCurrentLocation()\n    );\n  }\n\n  renderDeclaration() {\n    const body = this.blockStatement();\n    \n    return new AST.RenderDeclaration(\n      body,\n      this.getCurrentLocation()\n    );\n  }\n\n  lifecycleDeclaration() {\n    const isAsync = this.match('ASYNC');\n    const phase = this.consume('IDENTIFIER', 'Expected lifecycle phase');\n    \n    this.consume('LEFT_PAREN', 'Expected \"(\"');\n    this.consume('RIGHT_PAREN', 'Expected \")\"');\n    \n    const body = this.blockStatement();\n    \n    return new AST.LifecycleDeclaration(\n      phase.lexeme,\n      body,\n      isAsync,\n      this.getCurrentLocation()\n    );\n  }\n\n  storeDeclaration(decorators = []) {\n    const name = this.consume('IDENTIFIER', 'Expected store name');\n    \n    this.consume('LEFT_BRACE', 'Expected \"{\"');\n    \n    const body = [];\n    while (!this.check('RIGHT_BRACE') && !this.isAtEnd()) {\n      if (this.check('NEWLINE')) {\n        this.advance();\n        continue;\n      }\n      \n      const member = this.storeMember();\n      if (member) body.push(member);\n    }\n    \n    this.consume('RIGHT_BRACE', 'Expected \"}\"');\n    \n    return new AST.StoreDeclaration(\n      new AST.Identifier(name.lexeme),\n      body,\n      this.getCurrentLocation()\n    );\n  }\n\n  storeMember() {\n    if (this.match('STATE')) {\n      return this.stateDeclaration();\n    }\n    \n    if (this.match('ACTION')) {\n      return this.actionDeclaration();\n    }\n    \n    if (this.match('COMPUTED')) {\n      return this.computedDeclaration();\n    }\n    \n    return this.statement();\n  }\n\n  actionDeclaration() {\n    const isAsync = this.match('ASYNC');\n    const name = this.consume('IDENTIFIER', 'Expected action name');\n    \n    this.consume('LEFT_PAREN', 'Expected \"(\"');\n    const parameters = this.parameterList();\n    this.consume('RIGHT_PAREN', 'Expected \")\"');\n    \n    const body = this.blockStatement();\n    \n    return new AST.ActionDeclaration(\n      new AST.Identifier(name.lexeme),\n      parameters,\n      body,\n      isAsync,\n      this.getCurrentLocation()\n    );\n  }\n\n  guardDeclaration(decorators = []) {\n    const name = this.consume('IDENTIFIER', 'Expected guard name');\n    \n    this.consume('LEFT_PAREN', 'Expected \"(\"');\n    const parameters = this.parameterList();\n    this.consume('RIGHT_PAREN', 'Expected \")\"');\n    \n    const body = this.blockStatement();\n    \n    return new AST.GuardDeclaration(\n      new AST.Identifier(name.lexeme),\n      parameters,\n      body,\n      this.getCurrentLocation()\n    );\n  }\n\n  // Statements\n  statement() {\n    if (this.match('IF')) {\n      return this.ifStatement();\n    }\n    \n    if (this.match('WHILE')) {\n      return this.whileStatement();\n    }\n    \n    if (this.match('FOR')) {\n      return this.forStatement();\n    }\n    \n    if (this.match('RETURN')) {\n      return this.returnStatement();\n    }\n    \n    if (this.match('TRY')) {\n      return this.tryStatement();\n    }\n    \n    if (this.match('LEFT_BRACE')) {\n      return this.blockStatement();\n    }\n    \n    return this.expressionStatement();\n  }\n\n  ifStatement() {\n    this.consume('LEFT_PAREN', 'Expected \"(\" after \"if\"');\n    const test = this.expression();\n    this.consume('RIGHT_PAREN', 'Expected \")\" after if condition');\n    \n    const consequent = this.statement();\n    let alternate = null;\n    \n    if (this.match('ELSE')) {\n      alternate = this.statement();\n    }\n    \n    return new AST.IfStatement(test, consequent, alternate, this.getCurrentLocation());\n  }\n\n  whileStatement() {\n    this.consume('LEFT_PAREN', 'Expected \"(\" after \"while\"');\n    const test = this.expression();\n    this.consume('RIGHT_PAREN', 'Expected \")\" after while condition');\n    \n    const body = this.statement();\n    \n    return new AST.WhileStatement(test, body, this.getCurrentLocation());\n  }\n\n  forStatement() {\n    this.consume('LEFT_PAREN', 'Expected \"(\" after \"for\"');\n    \n    let init = null;\n    if (!this.check('SEMICOLON')) {\n      init = this.expression();\n    }\n    this.consume('SEMICOLON', 'Expected \";\" after for loop initializer');\n    \n    let test = null;\n    if (!this.check('SEMICOLON')) {\n      test = this.expression();\n    }\n    this.consume('SEMICOLON', 'Expected \";\" after for loop condition');\n    \n    let update = null;\n    if (!this.check('RIGHT_PAREN')) {\n      update = this.expression();\n    }\n    this.consume('RIGHT_PAREN', 'Expected \")\" after for clauses');\n    \n    const body = this.statement();\n    \n    return new AST.ForStatement(init, test, update, body, this.getCurrentLocation());\n  }\n\n  returnStatement() {\n    let argument = null;\n    \n    if (!this.check('NEWLINE') && !this.check('SEMICOLON')) {\n      argument = this.expression();\n    }\n    \n    return new AST.ReturnStatement(argument, this.getCurrentLocation());\n  }\n\n  tryStatement() {\n    const block = this.blockStatement();\n    \n    let handler = null;\n    if (this.match('CATCH')) {\n      this.consume('LEFT_PAREN', 'Expected \"(\" after \"catch\"');\n      const param = this.consume('IDENTIFIER', 'Expected catch parameter');\n      this.consume('RIGHT_PAREN', 'Expected \")\" after catch parameter');\n      \n      const body = this.blockStatement();\n      handler = new AST.CatchClause(\n        new AST.Identifier(param.lexeme),\n        body,\n        this.getCurrentLocation()\n      );\n    }\n    \n    let finalizer = null;\n    if (this.match('FINALLY')) {\n      finalizer = this.blockStatement();\n    }\n    \n    return new AST.TryStatement(block, handler, finalizer, this.getCurrentLocation());\n  }\n\n  blockStatement() {\n    this.consume('LEFT_BRACE', 'Expected \"{\"');\n    \n    const body = [];\n    while (!this.check('RIGHT_BRACE') && !this.isAtEnd()) {\n      if (this.check('NEWLINE')) {\n        this.advance();\n        continue;\n      }\n      \n      body.push(this.statement());\n    }\n    \n    this.consume('RIGHT_BRACE', 'Expected \"}\"');\n    \n    return new AST.BlockStatement(body, this.getCurrentLocation());\n  }\n\n  expressionStatement() {\n    const expr = this.expression();\n    return new AST.ExpressionStatement(expr, this.getCurrentLocation());\n  }\n\n  // Expressions\n  expression() {\n    return this.assignment();\n  }\n\n  assignment() {\n    const expr = this.ternary();\n    \n    if (this.match('ASSIGN', 'PLUS_ASSIGN', 'MINUS_ASSIGN')) {\n      const operator = this.previous();\n      const value = this.assignment();\n      \n      if (expr.type !== 'Identifier') {\n        throw new Error('Invalid assignment target');\n      }\n      \n      return new AST.AssignmentExpression(\n        expr,\n        operator.lexeme,\n        value,\n        this.getCurrentLocation()\n      );\n    }\n    \n    return expr;\n  }\n\n  ternary() {\n    let expr = this.logicalOr();\n    \n    if (this.match('QUESTION')) {\n      const consequent = this.expression();\n      this.consume('COLON', 'Expected \":\" in ternary expression');\n      const alternate = this.ternary();\n      \n      expr = new AST.ConditionalExpression(\n        expr,\n        consequent,\n        alternate,\n        this.getCurrentLocation()\n      );\n    }\n    \n    return expr;\n  }\n\n  logicalOr() {\n    let expr = this.logicalAnd();\n    \n    while (this.match('LOGICAL_OR')) {\n      const operator = this.previous();\n      const right = this.logicalAnd();\n      expr = new AST.BinaryExpression(\n        expr,\n        operator.lexeme,\n        right,\n        this.getCurrentLocation()\n      );\n    }\n    \n    return expr;\n  }\n\n  logicalAnd() {\n    let expr = this.equality();\n    \n    while (this.match('LOGICAL_AND')) {\n      const operator = this.previous();\n      const right = this.equality();\n      expr = new AST.BinaryExpression(\n        expr,\n        operator.lexeme,\n        right,\n        this.getCurrentLocation()\n      );\n    }\n    \n    return expr;\n  }\n\n  equality() {\n    let expr = this.comparison();\n    \n    while (this.match('EQUALS', 'NOT_EQUALS')) {\n      const operator = this.previous();\n      const right = this.comparison();\n      expr = new AST.BinaryExpression(\n        expr,\n        operator.lexeme,\n        right,\n        this.getCurrentLocation()\n      );\n    }\n    \n    return expr;\n  }\n\n  comparison() {\n    let expr = this.addition();\n    \n    while (this.match('GREATER_THAN', 'GREATER_EQUAL', 'LESS_THAN', 'LESS_EQUAL')) {\n      const operator = this.previous();\n      const right = this.addition();\n      expr = new AST.BinaryExpression(\n        expr,\n        operator.lexeme,\n        right,\n        this.getCurrentLocation()\n      );\n    }\n    \n    return expr;\n  }\n\n  addition() {\n    let expr = this.multiplication();\n    \n    while (this.match('PLUS', 'MINUS')) {\n      const operator = this.previous();\n      const right = this.multiplication();\n      expr = new AST.BinaryExpression(\n        expr,\n        operator.lexeme,\n        right,\n        this.getCurrentLocation()\n      );\n    }\n    \n    return expr;\n  }\n\n  multiplication() {\n    let expr = this.unary();\n    \n    while (this.match('MULTIPLY', 'DIVIDE', 'MODULO')) {\n      const operator = this.previous();\n      const right = this.unary();\n      expr = new AST.BinaryExpression(\n        expr,\n        operator.lexeme,\n        right,\n        this.getCurrentLocation()\n      );\n    }\n    \n    return expr;\n  }\n\n  unary() {\n    if (this.match('LOGICAL_NOT', 'MINUS', 'PLUS')) {\n      const operator = this.previous();\n      const right = this.unary();\n      return new AST.UnaryExpression(\n        operator.lexeme,\n        right,\n        this.getCurrentLocation()\n      );\n    }\n    \n    return this.postfix();\n  }\n\n  postfix() {\n    let expr = this.primary();\n    \n    while (true) {\n      if (this.match('LEFT_PAREN')) {\n        // Function call\n        const args = this.argumentList();\n        this.consume('RIGHT_PAREN', 'Expected \")\" after arguments');\n        \n        expr = new AST.CallExpression(\n          expr,\n          args,\n          this.getCurrentLocation()\n        );\n      } else if (this.match('LEFT_BRACKET')) {\n        // Array access\n        const index = this.expression();\n        this.consume('RIGHT_BRACKET', 'Expected \"]\" after array index');\n        \n        expr = new AST.MemberExpression(\n          expr,\n          index,\n          true, // computed\n          this.getCurrentLocation()\n        );\n      } else if (this.match('DOT')) {\n        // Property access\n        const property = this.consume('IDENTIFIER', 'Expected property name');\n        \n        expr = new AST.MemberExpression(\n          expr,\n          new AST.Identifier(property.lexeme),\n          false, // not computed\n          this.getCurrentLocation()\n        );\n      } else {\n        break;\n      }\n    }\n    \n    return expr;\n  }\n\n  primary() {\n    if (this.match('BOOLEAN')) {\n      return new AST.Literal(this.previous().literal, this.getCurrentLocation());\n    }\n    \n    if (this.match('NUMBER')) {\n      return new AST.Literal(this.previous().literal, this.getCurrentLocation());\n    }\n    \n    if (this.match('STRING')) {\n      return new AST.Literal(this.previous().literal, this.getCurrentLocation());\n    }\n    \n    if (this.match('IDENTIFIER')) {\n      return new AST.Identifier(this.previous().lexeme, this.getCurrentLocation());\n    }\n    \n    if (this.match('LEFT_PAREN')) {\n      const expr = this.expression();\n      this.consume('RIGHT_PAREN', 'Expected \")\" after expression');\n      return expr;\n    }\n    \n    if (this.match('LEFT_BRACKET')) {\n      // Array literal\n      const elements = [];\n      \n      if (!this.check('RIGHT_BRACKET')) {\n        do {\n          elements.push(this.expression());\n        } while (this.match('COMMA'));\n      }\n      \n      this.consume('RIGHT_BRACKET', 'Expected \"]\" after array elements');\n      \n      return new AST.ArrayExpression(elements, this.getCurrentLocation());\n    }\n    \n    if (this.match('LEFT_BRACE')) {\n      // Object literal\n      const properties = [];\n      \n      if (!this.check('RIGHT_BRACE')) {\n        do {\n          if (this.check('NEWLINE')) {\n            this.advance();\n            continue;\n          }\n          \n          let key;\n          if (this.match('STRING')) {\n            key = new AST.Literal(this.previous().literal);\n          } else {\n            const name = this.consume('IDENTIFIER', 'Expected property name');\n            key = new AST.Identifier(name.lexeme);\n          }\n          \n          this.consume('COLON', 'Expected \":\" after property name');\n          const value = this.expression();\n          \n          properties.push(new AST.Property(key, value, 'init', this.getCurrentLocation()));\n        } while (this.match('COMMA'));\n      }\n      \n      this.consume('RIGHT_BRACE', 'Expected \"}\" after object properties');\n      \n      return new AST.ObjectExpression(properties, this.getCurrentLocation());\n    }\n    \n    // JSX Element\n    if (this.check('JSX_OPEN')) {\n      return this.jsxElement();\n    }\n    \n    throw new Error(`Unexpected token: ${this.peek().lexeme} at line ${this.peek().line}`);\n  }\n\n  jsxElement() {\n    this.consume('JSX_OPEN', 'Expected \"<\"');\n    \n    // Element name\n    const name = this.consume('IDENTIFIER', 'Expected element name');\n    const elementName = new AST.Identifier(name.lexeme);\n    \n    // Attributes\n    const attributes = [];\n    while (!this.check('GREATER_THAN') && !this.check('JSX_SELF_CLOSE') && !this.isAtEnd()) {\n      attributes.push(this.jsxAttribute());\n    }\n    \n    // Self-closing tag\n    if (this.match('JSX_SELF_CLOSE')) {\n      return new AST.JSXElement(\n        new AST.JSXOpeningElement(elementName, attributes, true),\n        [],\n        null,\n        this.getCurrentLocation()\n      );\n    }\n    \n    this.consume('GREATER_THAN', 'Expected \">\" after opening tag');\n    \n    // Children\n    const children = [];\n    while (!this.check('JSX_CLOSE') && !this.isAtEnd()) {\n      if (this.check('JSX_OPEN') && this.peekNext().type === 'IDENTIFIER') {\n        // Nested element\n        children.push(this.jsxElement());\n      } else if (this.check('LEFT_BRACE')) {\n        // Expression\n        this.advance(); // consume '{'\n        const expr = this.expression();\n        this.consume('RIGHT_BRACE', 'Expected \"}\" after JSX expression');\n        children.push(new AST.JSXExpressionContainer(expr));\n      } else {\n        // Text content\n        let text = '';\n        while (!this.check('JSX_OPEN') && !this.check('JSX_CLOSE') && !this.check('LEFT_BRACE') && !this.isAtEnd()) {\n          text += this.advance().lexeme;\n        }\n        if (text.trim()) {\n          children.push(new AST.JSXText(text.trim()));\n        }\n      }\n    }\n    \n    // Closing tag\n    this.consume('JSX_CLOSE', 'Expected closing tag');\n    const closingName = this.consume('IDENTIFIER', 'Expected closing tag name');\n    this.consume('GREATER_THAN', 'Expected \">\" after closing tag');\n    \n    if (closingName.lexeme !== name.lexeme) {\n      throw new Error(`Mismatched JSX tags: ${name.lexeme} and ${closingName.lexeme}`);\n    }\n    \n    return new AST.JSXElement(\n      new AST.JSXOpeningElement(elementName, attributes, false),\n      children,\n      new AST.JSXClosingElement(new AST.Identifier(closingName.lexeme)),\n      this.getCurrentLocation()\n    );\n  }\n\n  jsxAttribute() {\n    let name;\n    if (this.check('AT')) {\n      this.advance(); // consume '@'\n      const eventName = this.consume('IDENTIFIER', 'Expected event name after @');\n      name = new AST.Identifier('@' + eventName.lexeme);\n    } else {\n      const attrName = this.consume('IDENTIFIER', 'Expected attribute name');\n      name = new AST.Identifier(attrName.lexeme);\n    }\n    \n    if (this.match('ASSIGN')) {\n      let value;\n      if (this.match('STRING')) {\n        value = new AST.Literal(this.previous().literal);\n      } else if (this.match('LEFT_BRACE')) {\n        const expr = this.expression();\n        this.consume('RIGHT_BRACE', 'Expected \"}\" after JSX expression');\n        value = new AST.JSXExpressionContainer(expr);\n      } else {\n        throw new Error('Expected attribute value');\n      }\n      \n      return new AST.JSXAttribute(\n        new AST.Identifier(name.lexeme),\n        value,\n        this.getCurrentLocation()\n      );\n    }\n    \n    // Boolean attribute\n    return new AST.JSXAttribute(\n      new AST.Identifier(name.lexeme),\n      new AST.Literal(true),\n      this.getCurrentLocation()\n    );\n  }\n\n  parameterList() {\n    const parameters = [];\n    \n    if (!this.check('RIGHT_PAREN')) {\n      do {\n        const name = this.consume('IDENTIFIER', 'Expected parameter name');\n        \n        let typeAnnotation = null;\n        if (this.match('COLON')) {\n          typeAnnotation = this.typeAnnotation();\n        }\n        \n        let defaultValue = null;\n        if (this.match('ASSIGN')) {\n          defaultValue = this.expression();\n        }\n        \n        parameters.push({\n          name: new AST.Identifier(name.lexeme),\n          typeAnnotation,\n          defaultValue\n        });\n      } while (this.match('COMMA'));\n    }\n    \n    return parameters;\n  }\n\n  argumentList() {\n    const args = [];\n    \n    if (!this.check('RIGHT_PAREN')) {\n      do {\n        args.push(this.expression());\n      } while (this.match('COMMA'));\n    }\n    \n    return args;\n  }\n\n  typeAnnotation() {\n    if (this.match('IDENTIFIER')) {\n      const typeName = this.previous().lexeme;\n      \n      switch (typeName) {\n        case 'string':\n          return new AST.TSStringKeyword();\n        case 'number':\n          return new AST.TSNumberKeyword();\n        case 'boolean':\n          return new AST.TSBooleanKeyword();\n        default:\n          return new AST.Identifier(typeName);\n      }\n    }\n    \n    throw new Error('Expected type annotation');\n  }\n\n  // Utility methods\n  match(...types) {\n    for (const type of types) {\n      if (this.check(type)) {\n        this.advance();\n        return true;\n      }\n    }\n    return false;\n  }\n\n  check(type) {\n    if (this.isAtEnd()) return false;\n    return this.peek().type === type;\n  }\n\n  advance() {\n    if (!this.isAtEnd()) this.current++;\n    return this.previous();\n  }\n\n  isAtEnd() {\n    return this.peek().type === 'EOF';\n  }\n\n  peek() {\n    return this.tokens[this.current];\n  }\n\n  peekNext() {\n    if (this.current + 1 >= this.tokens.length) {\n      return this.tokens[this.tokens.length - 1]; // EOF\n    }\n    return this.tokens[this.current + 1];\n  }\n\n  previous() {\n    return this.tokens[this.current - 1];\n  }\n\n  consume(type, message) {\n    if (this.check(type)) return this.advance();\n    \n    const current = this.peek();\n    throw new Error(`${message}. Got ${current.type} \"${current.lexeme}\" at line ${current.line}`);\n  }\n\n  synchronize() {\n    this.advance();\n    \n    while (!this.isAtEnd()) {\n      if (this.previous().type === 'NEWLINE') return;\n      \n      switch (this.peek().type) {\n        case 'COMPONENT':\n        case 'STORE':\n        case 'GUARD':\n        case 'IF':\n        case 'FOR':\n        case 'WHILE':\n        case 'RETURN':\n          return;\n      }\n      \n      this.advance();\n    }\n  }\n\n  getCurrentLocation() {\n    const token = this.peek();\n    return AST.createLocation(token.line, token.column, token.line, token.column);\n  }\n}", "// flux-core/src/compiler/codegen.js\n// Code generator that converts Flux AST to optimized JavaScript\n\nimport * as AST from '../ast/nodes.js';\n\nexport class FluxCodeGenerator {\n  constructor(options = {}) {\n    this.options = {\n      target: 'modern', // 'modern' or 'legacy'\n      minify: false,\n      sourceMaps: true,\n      optimizations: true,\n      ...options\n    };\n    this.indent = 0;\n    this.output = [];\n    this.imports = new Set();\n    this.componentCount = 0;\n    this.storeCount = 0;\n    this.errors = [];\n  }\n\n  generate(ast) {\n    this.output = [];\n    this.indent = 0;\n    \n    // Add runtime imports\n    this.addLine(\"import { FluxRuntime, Component, Store, createReactiveState, createEffect, createComputed } from '@flux/runtime';\");\n    this.addLine(\"import { createElement, Fragment } from '@flux/jsx';\");\n    this.addLine(\"\");\n    \n    this.visit(ast);\n    \n    return this.output.join('\\n');\n  }\n\n  visit(node) {\n    const methodName = `visit${node.type}`;\n    if (this[methodName]) {\n      return this[methodName](node);\n    }\n    \n    console.warn(`No visitor method for ${node.type}`);\n    return '';\n  }\n\n  visitProgram(node) {\n    for (const statement of node.body) {\n      this.visit(statement);\n      this.addLine(\"\");\n    }\n  }\n\n  visitImportDeclaration(node) {\n    const specifiers = node.specifiers.map(spec => {\n      if (spec.imported.name === 'default') {\n        return spec.local.name;\n      }\n      return spec.imported.name === spec.local.name \n        ? spec.imported.name \n        : `${spec.imported.name} as ${spec.local.name}`;\n    }).join(', ');\n    \n    this.addLine(`import { ${specifiers} } from ${JSON.stringify(node.source.value)};`);\n  }\n\n  visitExportDeclaration(node) {\n    this.add(\"export \");\n    this.visit(node.declaration);\n  }\n\n  visitComponentDeclaration(node) {\n    const componentName = node.name.name;\n    this.componentCount++;\n    \n    this.addLine(`class ${componentName} extends Component {`);\n    this.indent++;\n    \n    // Constructor\n    this.addLine(\"constructor(props = {}) {\");\n    this.indent++;\n    this.addLine(\"super(props);\");\n    this.addLine(\"\");\n    \n    // Initialize state\n    if (node.state.length > 0) {\n      this.addLine(\"// Initialize state\");\n      for (const stateDecl of node.state) {\n        const name = stateDecl.name.name;\n        const initialValue = stateDecl.initialValue \n          ? this.visit(stateDecl.initialValue) \n          : 'null';\n        \n        this.addLine(`this.${name} = createReactiveState(${initialValue});`);\n      }\n      this.addLine(\"\");\n    }\n    \n    // Initialize computed properties\n    if (node.computed.length > 0) {\n      this.addLine(\"// Initialize computed properties\");\n      for (const computedDecl of node.computed) {\n        const name = computedDecl.name.name;\n        this.addLine(`this.${name} = createComputed(() => {`);\n        this.indent++;\n        this.visit(computedDecl.body);\n        this.indent--;\n        this.addLine(\"});\");\n      }\n      this.addLine(\"\");\n    }\n    \n    // Initialize effects\n    if (node.effects.length > 0) {\n      this.addLine(\"// Initialize effects\");\n      for (let i = 0; i < node.effects.length; i++) {\n        const effect = node.effects[i];\n        const deps = effect.dependencies.map(dep => this.visit(dep)).join(', ');\n        \n        this.addLine(`this.effect${i} = createEffect(() => {`);\n        this.indent++;\n        this.visit(effect.body);\n        this.indent--;\n        this.addLine(`}, [${deps}]);`);\n      }\n      this.addLine(\"\");\n    }\n    \n    this.indent--;\n    this.addLine(\"}\");\n    this.addLine(\"\");\n    \n    // Generate methods\n    for (const method of node.methods) {\n      this.visitMethodDeclaration(method);\n    }\n    \n    // Generate lifecycle methods\n    for (const lifecycle of node.lifecycle) {\n      this.visitLifecycleDeclaration(lifecycle);\n    }\n    \n    // Generate render method\n    if (node.render) {\n      this.visitRenderDeclaration(node.render);\n    }\n    \n    this.indent--;\n    this.addLine(\"}\");\n    this.addLine(\"\");\n    \n    // Add component registration\n    this.addLine(`${componentName}.displayName = '${componentName}';`);\n    \n    // Handle route decorators\n    const routeDecorator = node.decorators.find(d => d.name.name === 'route');\n    if (routeDecorator) {\n      const path = routeDecorator.arguments[0];\n      this.addLine(`FluxRuntime.registerRoute(${this.visit(path)}, ${componentName});`);\n    }\n  }\n\n  visitStoreDeclaration(node) {\n    const storeName = node.name.name;\n    this.storeCount++;\n    \n    this.addLine(`class ${storeName} extends Store {`);\n    this.indent++;\n    \n    // Constructor\n    this.addLine(\"constructor() {\");\n    this.indent++;\n    this.addLine(\"super();\");\n    this.addLine(\"\");\n    \n    // Initialize state\n    if (node.state.length > 0) {\n      this.addLine(\"// Initialize state\");\n      for (const stateDecl of node.state) {\n        const name = stateDecl.name.name;\n        const initialValue = stateDecl.initialValue \n          ? this.visit(stateDecl.initialValue) \n          : 'null';\n        \n        this.addLine(`this.${name} = createReactiveState(${initialValue});`);\n      }\n      this.addLine(\"\");\n    }\n    \n    // Initialize computed properties\n    if (node.computed.length > 0) {\n      this.addLine(\"// Initialize computed properties\");\n      for (const computedDecl of node.computed) {\n        const name = computedDecl.name.name;\n        this.addLine(`this.${name} = createComputed(() => {`);\n        this.indent++;\n        this.visit(computedDecl.body);\n        this.indent--;\n        this.addLine(\"});\");\n      }\n      this.addLine(\"\");\n    }\n    \n    this.indent--;\n    this.addLine(\"}\");\n    this.addLine(\"\");\n    \n    // Generate actions\n    for (const action of node.actions) {\n      this.visitActionDeclaration(action);\n    }\n    \n    this.indent--;\n    this.addLine(\"}\");\n    this.addLine(\"\");\n    \n    // Create singleton instance\n    this.addLine(`const ${storeName}Instance = new ${storeName}();`);\n    this.addLine(`export { ${storeName}Instance as ${storeName} };`);\n  }\n\n  visitMethodDeclaration(node) {\n    const name = node.name.name;\n    const asyncKeyword = node.isAsync ? 'async ' : '';\n    const params = node.parameters.map(p => p.name.name).join(', ');\n    \n    this.addLine(`${asyncKeyword}${name}(${params}) {`);\n    this.indent++;\n    this.visit(node.body);\n    this.indent--;\n    this.addLine(\"}\");\n    this.addLine(\"\");\n  }\n\n  visitActionDeclaration(node) {\n    const name = node.name.name;\n    const asyncKeyword = node.isAsync ? 'async ' : '';\n    const params = node.parameters.map(p => p.name.name).join(', ');\n    \n    this.addLine(`${asyncKeyword}${name}(${params}) {`);\n    this.indent++;\n    this.visit(node.body);\n    this.indent--;\n    this.addLine(\"}\");\n    this.addLine(\"\");\n  }\n\n  visitLifecycleDeclaration(node) {\n    const phase = node.phase;\n    const asyncKeyword = node.isAsync ? 'async ' : '';\n    \n    this.addLine(`${asyncKeyword}${phase}() {`);\n    this.indent++;\n    this.visit(node.body);\n    this.indent--;\n    this.addLine(\"}\");\n    this.addLine(\"\");\n  }\n\n  visitRenderDeclaration(node) {\n    this.addLine(\"render() {\");\n    this.indent++;\n    this.addLine(\"return (\");\n    this.indent++;\n    this.visit(node.body);\n    this.indent--;\n    this.addLine(\");\");\n    this.indent--;\n    this.addLine(\"}\");\n    this.addLine(\"\");\n  }\n\n  visitBlockStatement(node) {\n    for (let i = 0; i < node.body.length; i++) {\n      this.visit(node.body[i]);\n      \n      // Add semicolon for expression statements\n      if (node.body[i].type === 'ExpressionStatement') {\n        this.add(';');\n      }\n      \n      if (i < node.body.length - 1) {\n        this.addLine(\"\");\n      }\n    }\n  }\n\n  visitExpressionStatement(node) {\n    this.add(this.getIndent());\n    this.visit(node.expression);\n  }\n\n  visitIfStatement(node) {\n    this.add(`${this.getIndent()}if (`);\n    this.visit(node.test);\n    this.add(') ');\n    this.visit(node.consequent);\n    \n    if (node.alternate) {\n      this.add(' else ');\n      this.visit(node.alternate);\n    }\n  }\n\n  visitWhileStatement(node) {\n    this.add(`${this.getIndent()}while (`);\n    this.visit(node.test);\n    this.add(') ');\n    this.visit(node.body);\n  }\n\n  visitForStatement(node) {\n    this.add(`${this.getIndent()}for (`);\n    if (node.init) this.visit(node.init);\n    this.add('; ');\n    if (node.test) this.visit(node.test);\n    this.add('; ');\n    if (node.update) this.visit(node.update);\n    this.add(') ');\n    this.visit(node.body);\n  }\n\n  visitReturnStatement(node) {\n    this.add(`${this.getIndent()}return`);\n    if (node.argument) {\n      this.add(' ');\n      this.visit(node.argument);\n    }\n  }\n\n  visitTryStatement(node) {\n    this.add(`${this.getIndent()}try `);\n    this.visit(node.block);\n    \n    if (node.handler) {\n      this.add(` catch (${node.handler.param.name}) `);\n      this.visit(node.handler.body);\n    }\n    \n    if (node.finalizer) {\n      this.add(' finally ');\n      this.visit(node.finalizer);\n    }\n  }\n\n  visitBinaryExpression(node) {\n    this.visit(node.left);\n    this.add(` ${node.operator} `);\n    this.visit(node.right);\n  }\n\n  visitUnaryExpression(node) {\n    this.add(node.operator);\n    this.visit(node.operand);\n  }\n\n  visitAssignmentExpression(node) {\n    // Handle reactive state assignments\n    if (node.left.type === 'MemberExpression' && \n        node.left.object.type === 'Identifier' &&\n        node.left.object.name === 'this') {\n      \n      // Convert this.state = value to this.state.value = value\n      this.add('this.');\n      this.visit(node.left.property);\n      this.add('.value ');\n      this.add(node.operator);\n      this.add(' ');\n      this.visit(node.right);\n    } else {\n      this.visit(node.left);\n      this.add(` ${node.operator} `);\n      this.visit(node.right);\n    }\n  }\n\n  visitCallExpression(node) {\n    this.visit(node.callee);\n    this.add('(');\n    \n    for (let i = 0; i < node.arguments.length; i++) {\n      this.visit(node.arguments[i]);\n      if (i < node.arguments.length - 1) {\n        this.add(', ');\n      }\n    }\n    \n    this.add(')');\n  }\n\n  visitMemberExpression(node) {\n    this.visit(node.object);\n    \n    if (node.computed) {\n      this.add('[');\n      this.visit(node.property);\n      this.add(']');\n    } else {\n      this.add('.');\n      this.visit(node.property);\n    }\n  }\n\n  visitConditionalExpression(node) {\n    this.visit(node.test);\n    this.add(' ? ');\n    this.visit(node.consequent);\n    this.add(' : ');\n    this.visit(node.alternate);\n  }\n\n  visitArrayExpression(node) {\n    this.add('[');\n    \n    for (let i = 0; i < node.elements.length; i++) {\n      this.visit(node.elements[i]);\n      if (i < node.elements.length - 1) {\n        this.add(', ');\n      }\n    }\n    \n    this.add(']');\n  }\n\n  visitObjectExpression(node) {\n    this.add('{');\n    \n    if (node.properties.length > 0) {\n      this.addLine(\"\");\n      this.indent++;\n      \n      for (let i = 0; i < node.properties.length; i++) {\n        this.add(this.getIndent());\n        this.visit(node.properties[i]);\n        if (i < node.properties.length - 1) {\n          this.add(',');\n        }\n        this.addLine(\"\");\n      }\n      \n      this.indent--;\n      this.add(this.getIndent());\n    }\n    \n    this.add('}');\n  }\n\n  visitProperty(node) {\n    this.visit(node.key);\n    this.add(': ');\n    this.visit(node.value);\n  }\n\n  visitLiteral(node) {\n    if (typeof node.value === 'string') {\n      this.add(JSON.stringify(node.value));\n    } else {\n      this.add(String(node.value));\n    }\n  }\n\n  visitIdentifier(node) {\n    // Handle reactive state access\n    if (this.isInRenderContext() && this.isReactiveState(node.name)) {\n      this.add(`this.${node.name}.value`);\n    } else {\n      this.add(node.name);\n    }\n  }\n\n  visitJSXElement(node) {\n    this.add('createElement(');\n    \n    // Element name\n    if (node.openingElement.name.name.charAt(0).toLowerCase() === node.openingElement.name.name.charAt(0)) {\n      // HTML element\n      this.add(`'${node.openingElement.name.name}'`);\n    } else {\n      // Component\n      this.add(node.openingElement.name.name);\n    }\n    \n    // Props\n    if (node.openingElement.attributes.length > 0) {\n      this.add(', {');\n      \n      for (let i = 0; i < node.openingElement.attributes.length; i++) {\n        const attr = node.openingElement.attributes[i];\n        this.add(`${attr.name.name}: `);\n        \n        if (attr.value.type === 'JSXExpressionContainer') {\n          this.visit(attr.value.expression);\n        } else {\n          this.visit(attr.value);\n        }\n        \n        if (i < node.openingElement.attributes.length - 1) {\n          this.add(', ');\n        }\n      }\n      \n      this.add('}');\n    } else {\n      this.add(', null');\n    }\n    \n    // Children\n    if (node.children.length > 0) {\n      for (const child of node.children) {\n        this.add(', ');\n        \n        if (child.type === 'JSXText') {\n          this.add(JSON.stringify(child.value));\n        } else if (child.type === 'JSXExpressionContainer') {\n          this.visit(child.expression);\n        } else {\n          this.visit(child);\n        }\n      }\n    }\n    \n    this.add(')');\n  }\n\n  visitJSXExpressionContainer(node) {\n    this.visit(node.expression);\n  }\n\n  visitJSXText(node) {\n    this.add(JSON.stringify(node.value));\n  }\n\n  // Utility methods\n  isInRenderContext() {\n    // Simple heuristic - in a real implementation, we'd track context properly\n    return true;\n  }\n\n  isReactiveState(name) {\n    // Check if this identifier refers to a reactive state variable\n    // In a real implementation, we'd have proper scope tracking\n    return true;\n  }\n\n  add(text) {\n    this.output.push(text);\n  }\n\n  addLine(text = \"\") {\n    this.output.push(text + '\\n');\n  }\n\n  getIndent() {\n    return '  '.repeat(this.indent);\n  }\n}\n\n// Runtime optimization helpers\nexport class FluxOptimizer {\n  constructor() {\n    this.optimizations = [\n      this.eliminateDeadCode,\n      this.inlineConstants,\n      this.optimizeReactiveUpdates,\n      this.bundleComponents\n    ];\n  }\n\n  optimize(ast) {\n    let optimizedAst = ast;\n    \n    for (const optimization of this.optimizations) {\n      optimizedAst = optimization(optimizedAst);\n    }\n    \n    return optimizedAst;\n  }\n\n  eliminateDeadCode(ast) {\n    // Remove unused variables, functions, and imports\n    return ast;\n  }\n\n  inlineConstants(ast) {\n    // Inline constant values at compile time\n    return ast;\n  }\n\n  optimizeReactiveUpdates(ast) {\n    // Minimize reactive dependency tracking\n    return ast;\n  }\n\n  bundleComponents(ast) {\n    // Optimize component bundling and code splitting\n    return ast;\n  }\n}", "// flux-core/src/errors.js\n// Error handling system for Flux compiler\n\nexport class FluxError extends Error {\n  constructor(message, details = null) {\n    super(message);\n    this.name = 'FluxError';\n    this.details = details;\n    this.timestamp = new Date();\n  }\n}\n\nexport class LexerError extends FluxError {\n  constructor(message, line, column, source) {\n    super(`Lexer Error: ${message}`);\n    this.name = 'LexerError';\n    this.line = line;\n    this.column = column;\n    this.source = source;\n  }\n  \n  format() {\n    return this.formatError('Lexer Error', this.message);\n  }\n}\n\nexport class ParserError extends FluxError {\n  constructor(message, token, expected = null) {\n    super(`Parser Error: ${message}`);\n    this.name = 'ParserError';\n    this.token = token;\n    this.expected = expected;\n    this.line = token ? token.line : 1;\n    this.column = token ? token.column : 1;\n  }\n  \n  format() {\n    let message = this.message;\n    if (this.expected) {\n      message += ` (expected ${this.expected})`;\n    }\n    return this.formatError('Parser Error', message);\n  }\n}\n\nexport class SemanticError extends FluxError {\n  constructor(message, node, suggestion = null) {\n    super(`Semantic Error: ${message}`);\n    this.name = 'SemanticError';\n    this.node = node;\n    this.suggestion = suggestion;\n    this.line = node ? node.location?.line : 1;\n    this.column = node ? node.location?.column : 1;\n  }\n  \n  format() {\n    let message = this.message;\n    if (this.suggestion) {\n      message += `\\nSuggestion: ${this.suggestion}`;\n    }\n    return this.formatError('Semantic Error', message);\n  }\n}\n\nexport class CodegenError extends FluxError {\n  constructor(message, node, context = null) {\n    super(`Code Generation Error: ${message}`);\n    this.name = 'CodegenError';\n    this.node = node;\n    this.context = context;\n    this.line = node ? node.location?.line : 1;\n    this.column = node ? node.location?.column : 1;\n  }\n  \n  format() {\n    let message = this.message;\n    if (this.context) {\n      message += `\\nContext: ${this.context}`;\n    }\n    return this.formatError('Code Generation Error', message);\n  }\n}\n\nexport class RuntimeError extends FluxError {\n  constructor(message, component = null, stack = null) {\n    super(`Runtime Error: ${message}`);\n    this.name = 'RuntimeError';\n    this.component = component;\n    this.stack = stack;\n  }\n  \n  format() {\n    let message = this.message;\n    if (this.component) {\n      message += `\\nComponent: ${this.component}`;\n    }\n    return this.formatError('Runtime Error', message);\n  }\n}\n\n// Error formatter utility\nexport class ErrorFormatter {\n  static formatError(error, source = null) {\n    if (error.format) {\n      return error.format();\n    }\n    \n    let output = `${error.name}: ${error.message}\\n`;\n    \n    if (error.line && error.column) {\n      output += `at line ${error.line}, column ${error.column}\\n`;\n      \n      if (source) {\n        output += this.formatSourceContext(source, error.line, error.column);\n      }\n    }\n    \n    if (error.stack) {\n      output += `\\nStack trace:\\n${error.stack}`;\n    }\n    \n    return output;\n  }\n  \n  static formatSourceContext(source, line, column, contextLines = 3) {\n    const lines = source.split('\\n');\n    const startLine = Math.max(1, line - contextLines);\n    const endLine = Math.min(lines.length, line + contextLines);\n    \n    let output = '\\nSource context:\\n';\n    \n    for (let i = startLine; i <= endLine; i++) {\n      const marker = i === line ? '>>> ' : '    ';\n      const lineNumber = i.toString().padStart(3);\n      const content = lines[i - 1] || '';\n      \n      output += `${marker}${lineNumber}: ${content}\\n`;\n      \n      if (i === line && column > 0) {\n        const indent = '    ' + ' '.repeat(column - 1);\n        output += `${indent}^\\n`;\n      }\n    }\n    \n    return output;\n  }\n  \n  static formatErrorList(errors, source = null) {\n    if (errors.length === 0) return '';\n    \n    let output = `\\n${errors.length} error(s) found:\\n\\n`;\n    \n    for (let i = 0; i < errors.length; i++) {\n      const error = errors[i];\n      output += `${i + 1}. ${this.formatError(error, source)}\\n`;\n      \n      if (i < errors.length - 1) {\n        output += '\\n';\n      }\n    }\n    \n    return output;\n  }\n}\n\n// Error collector for batch processing\nexport class ErrorCollector {\n  constructor() {\n    this.errors = [];\n    this.warnings = [];\n    this.maxErrors = 100; // Prevent infinite error loops\n  }\n  \n  addError(error) {\n    if (this.errors.length < this.maxErrors) {\n      this.errors.push(error);\n    }\n  }\n  \n  addWarning(warning) {\n    this.warnings.push(warning);\n  }\n  \n  hasErrors() {\n    return this.errors.length > 0;\n  }\n  \n  hasWarnings() {\n    return this.warnings.length > 0;\n  }\n  \n  clear() {\n    this.errors = [];\n    this.warnings = [];\n  }\n  \n  formatAll(source = null) {\n    let output = '';\n    \n    if (this.errors.length > 0) {\n      output += ErrorFormatter.formatErrorList(this.errors, source);\n    }\n    \n    if (this.warnings.length > 0) {\n      output += `\\n${this.warnings.length} warning(s):\\n`;\n      for (const warning of this.warnings) {\n        output += `- ${warning.message}\\n`;\n      }\n    }\n    \n    return output;\n  }\n}", "// flux-core/src/compiler/index.js\n// Main compiler entry point\n\nimport { FluxLexer } from './lexer.js';\nimport { FluxParser } from './parser.js';\nimport { FluxCodeGenerator } from './codegen.js';\nimport { FluxError } from '../errors.js';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nexport class FluxCompiler {\n  constructor(options = {}) {\n    this.options = {\n      target: 'js', // 'js' or 'wasm'\n      minify: false,\n      sourceMaps: true,\n      optimizations: true,\n      outputDir: 'dist',\n      treeShaking: true,\n      codeSplitting: false,\n      bundleAnalysis: false,\n      watchMode: false,\n      incremental: true,\n      parallel: true,\n      maxWorkers: 4,\n      ...options\n    };\n    \n    this.errors = [];\n    this.warnings = [];\n    this.compilationCache = new Map();\n    this.dependencyGraph = new Map();\n    this.optimizer = new FluxOptimizer(this.options);\n    this.bundler = new FluxBundler(this.options);\n  }\n\n  async compileFile(filePath) {\n    try {\n      // Read source file\n      const source = await fs.readFile(filePath, 'utf-8');\n      \n      // Compile source\n      const result = this.compile(source, filePath);\n      \n      if (this.errors.length > 0) {\n        throw new FluxError('Compilation failed', this.errors);\n      }\n      \n      return result;\n    } catch (error) {\n      if (error instanceof FluxError) {\n        throw error;\n      }\n      throw new FluxError(`Failed to read file ${filePath}: ${error.message}`);\n    }\n  }\n\n  compile(source, filePath = '<unknown>') {\n    try {\n      // Reset error state\n      this.errors = [];\n      this.warnings = [];\n      \n      // Tokenize\n      const lexer = new FluxLexer(source);\n      const tokens = lexer.tokenize();\n      \n      if (lexer.errors.length > 0) {\n        this.errors.push(...lexer.errors);\n        return null;\n      }\n      \n      // Parse\n      const parser = new FluxParser(tokens);\n      const ast = parser.program();\n      \n      if (parser.errors.length > 0) {\n        this.errors.push(...parser.errors);\n        return null;\n      }\n      \n      // Generate code\n      const generator = new FluxCodeGenerator(this.options);\n      const output = generator.generate(ast);\n      \n      if (generator.errors.length > 0) {\n        this.errors.push(...generator.errors);\n        return null;\n      }\n      \n      return {\n        source,\n        ast,\n        output,\n        sourceMap: generator.sourceMap,\n        filePath\n      };\n    } catch (error) {\n      this.errors.push({\n        message: error.message,\n        file: filePath,\n        line: 1,\n        column: 1\n      });\n      return null;\n    }\n  }\n\n  async build() {\n    const projectRoot = process.cwd();\n    const fluxConfig = await this.loadConfig(projectRoot);\n    \n    // Find all .flux files\n    const fluxFiles = await this.findFluxFiles(projectRoot);\n    \n    if (fluxFiles.length === 0) {\n      throw new FluxError('No .flux files found in project');\n    }\n    \n    console.log(`Found ${fluxFiles.length} Flux files to compile`);\n    \n    // Compile each file\n    const results = [];\n    for (const file of fluxFiles) {\n      const result = await this.compileFile(file);\n      if (result) {\n        results.push(result);\n      }\n    }\n    \n    if (this.errors.length > 0) {\n      throw new FluxError('Build failed', this.errors);\n    }\n    \n    // Write output files\n    await this.writeBuildOutput(results, projectRoot);\n    \n    return results;\n  }\n\n  async findFluxFiles(rootDir) {\n    const files = [];\n    \n    async function scan(dir) {\n      const entries = await fs.readdir(dir, { withFileTypes: true });\n      \n      for (const entry of entries) {\n        const fullPath = path.join(dir, entry.name);\n        \n        if (entry.isDirectory() && !entry.name.startsWith('.') && entry.name !== 'node_modules') {\n          await scan(fullPath);\n        } else if (entry.isFile() && entry.name.endsWith('.flux')) {\n          files.push(fullPath);\n        }\n      }\n    }\n    \n    await scan(rootDir);\n    return files;\n  }\n\n  async loadConfig(projectRoot) {\n    const configPath = path.join(projectRoot, 'flux.config.js');\n    \n    try {\n      if (await fs.pathExists(configPath)) {\n        const config = await import(configPath);\n        return config.default || config;\n      }\n    } catch (error) {\n      console.warn(`Warning: Could not load flux.config.js: ${error.message}`);\n    }\n    \n    return {};\n  }\n\n  async writeBuildOutput(results, projectRoot) {\n    const outputDir = path.join(projectRoot, this.options.outputDir);\n    \n    // Ensure output directory exists\n    await fs.ensureDir(outputDir);\n    \n    // Write compiled files\n    for (const result of results) {\n      const relativePath = path.relative(projectRoot, result.filePath);\n      const outputPath = path.join(\n        outputDir,\n        relativePath.replace(/\\.flux$/, '.js')\n      );\n      \n      await fs.ensureDir(path.dirname(outputPath));\n      await fs.writeFile(outputPath, result.output);\n      \n      // Write source map if enabled\n      if (this.options.sourceMaps && result.sourceMap) {\n        await fs.writeFile(outputPath + '.map', JSON.stringify(result.sourceMap));\n      }\n    }\n    \n    // Write runtime files\n    await this.writeRuntimeFiles(outputDir);\n    \n    // Write index.html if it doesn't exist\n    const indexPath = path.join(outputDir, 'index.html');\n    if (!await fs.pathExists(indexPath)) {\n      await this.writeDefaultIndexHtml(indexPath);\n    }\n  }\n\n  async writeRuntimeFiles(outputDir) {\n    const runtimeDir = path.join(outputDir, 'runtime');\n    await fs.ensureDir(runtimeDir);\n    \n    // Copy runtime files\n    const runtimeSource = path.join(__dirname, '../runtime');\n    await fs.copy(runtimeSource, runtimeDir);\n  }\n\n  async writeDefaultIndexHtml(outputPath) {\n    const html = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Flux App</title>\n</head>\n<body>\n    <div id=\"root\"></div>\n    <script type=\"module\" src=\"./app.js\"></script>\n</body>\n</html>`;\n    \n    await fs.writeFile(outputPath, html);\n  }\n\n  async writeOutput(result, outputPath) {\n    await fs.ensureDir(path.dirname(outputPath));\n    await fs.writeFile(outputPath, result.output);\n    \n    if (this.options.sourceMaps && result.sourceMap) {\n      await fs.writeFile(outputPath + '.map', JSON.stringify(result.sourceMap));\n    }\n  }\n}\n\n// Advanced compiler optimization system\nclass FluxOptimizer {\n  constructor(options) {\n    this.options = options;\n    this.optimizations = new Map();\n    this.analysis = new Map();\n  }\n\n  optimize(ast, context) {\n    if (!this.options.optimizations) return ast;\n    \n    let optimizedAst = ast;\n    \n    // Apply various optimizations\n    optimizedAst = this.constantFolding(optimizedAst);\n    optimizedAst = this.deadCodeElimination(optimizedAst);\n    optimizedAst = this.inlineExpansion(optimizedAst);\n    optimizedAst = this.hoisting(optimizedAst);\n    \n    return optimizedAst;\n  }\n\n  constantFolding(ast) {\n    // Fold constant expressions at compile time\n    return ast;\n  }\n\n  deadCodeElimination(ast) {\n    // Remove unreachable code\n    return ast;\n  }\n\n  inlineExpansion(ast) {\n    // Inline small functions\n    return ast;\n  }\n\n  hoisting(ast) {\n    // Hoist variable declarations\n    return ast;\n  }\n\n  analyze(ast) {\n    // Analyze code for optimization opportunities\n    const analysis = {\n      complexity: this.calculateComplexity(ast),\n      dependencies: this.findDependencies(ast),\n      performance: this.analyzePerformance(ast)\n    };\n    \n    this.analysis.set(ast, analysis);\n    return analysis;\n  }\n\n  calculateComplexity(ast) {\n    // Calculate cyclomatic complexity\n    return 1; // Placeholder\n  }\n\n  findDependencies(ast) {\n    // Find all dependencies\n    return []; // Placeholder\n  }\n\n  analyzePerformance(ast) {\n    // Analyze performance characteristics\n    return {}; // Placeholder\n  }\n}\n\n// Advanced bundling system\nclass FluxBundler {\n  constructor(options) {\n    this.options = options;\n    this.bundles = new Map();\n    this.chunks = new Map();\n  }\n\n  createBundle(entryPoints, dependencies) {\n    if (!this.options.codeSplitting) {\n      return this.createSingleBundle(entryPoints, dependencies);\n    }\n    \n    return this.createSplitBundles(entryPoints, dependencies);\n  }\n\n  createSingleBundle(entryPoints, dependencies) {\n    // Create a single bundle\n    return {\n      type: 'single',\n      code: this.mergeCode(entryPoints, dependencies),\n      sourceMap: this.mergeSourceMaps(entryPoints, dependencies)\n    };\n  }\n\n  createSplitBundles(entryPoints, dependencies) {\n    // Create multiple bundles for code splitting\n    const bundles = [];\n    \n    for (const entryPoint of entryPoints) {\n      const bundle = this.createBundleForEntry(entryPoint, dependencies);\n      bundles.push(bundle);\n    }\n    \n    return bundles;\n  }\n\n  createBundleForEntry(entryPoint, dependencies) {\n    // Create bundle for specific entry point\n    return {\n      type: 'entry',\n      entry: entryPoint,\n      code: this.generateEntryCode(entryPoint, dependencies),\n      dependencies: this.getEntryDependencies(entryPoint, dependencies)\n    };\n  }\n\n  mergeCode(entryPoints, dependencies) {\n    // Merge all code into single output\n    return entryPoints.map(ep => ep.code).join('\\n');\n  }\n\n  mergeSourceMaps(entryPoints, dependencies) {\n    // Merge source maps\n    return {}; // Placeholder\n  }\n\n  generateEntryCode(entryPoint, dependencies) {\n    // Generate code for entry point\n    return entryPoint.code;\n  }\n\n  getEntryDependencies(entryPoint, dependencies) {\n    // Get dependencies for entry point\n    return dependencies.filter(dep => dep.entryPoint === entryPoint);\n  }\n}", "// flux-core/src/runtime/index.js\n// Core runtime system for Flux applications\n\n// Environment detection\nconst isNode = typeof process !== 'undefined' && process.versions && process.versions.node;\nconst isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined';\nconst isWorker = typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope;\n\n// Global context\nconst globalContext = isNode ? global : (isBrowser ? window : self);\n\n// Performance monitoring\nclass PerformanceMonitor {\n  constructor() {\n    this.metrics = new Map();\n    this.startTime = Date.now();\n  }\n\n  startTimer(name) {\n    this.metrics.set(name, { start: performance.now() || Date.now() });\n  }\n\n  endTimer(name) {\n    const metric = this.metrics.get(name);\n    if (metric) {\n      metric.duration = (performance.now() || Date.now()) - metric.start;\n      metric.end = performance.now() || Date.now();\n    }\n  }\n\n  getMetrics() {\n    return Object.fromEntries(this.metrics);\n  }\n\n  reset() {\n    this.metrics.clear();\n    this.startTime = Date.now();\n  }\n}\n\n// Advanced error handling\nclass FluxError extends Error {\n  constructor(message, code, details = {}) {\n    super(message);\n    this.name = 'FluxError';\n    this.code = code;\n    this.details = details;\n    this.timestamp = new Date();\n    this.stack = this.stack || new Error().stack;\n  }\n}\n\n// Memory management and garbage collection\nclass MemoryManager {\n  constructor() {\n    this.allocations = new Map();\n    this.maxMemory = 100 * 1024 * 1024; // 100MB default\n    this.currentMemory = 0;\n  }\n\n  allocate(id, size, type) {\n    this.allocations.set(id, { size, type, timestamp: Date.now() });\n    this.currentMemory += size;\n    \n    if (this.currentMemory > this.maxMemory) {\n      this.garbageCollect();\n    }\n  }\n\n  deallocate(id) {\n    const allocation = this.allocations.get(id);\n    if (allocation) {\n      this.currentMemory -= allocation.size;\n      this.allocations.delete(id);\n    }\n  }\n\n  garbageCollect() {\n    const now = Date.now();\n    const maxAge = 5 * 60 * 1000; // 5 minutes\n    \n    for (const [id, allocation] of this.allocations) {\n      if (now - allocation.timestamp > maxAge) {\n        this.deallocate(id);\n      }\n    }\n  }\n\n  getStats() {\n    return {\n      currentMemory: this.currentMemory,\n      maxMemory: this.maxMemory,\n      allocationCount: this.allocations.size,\n      memoryUsage: (this.currentMemory / this.maxMemory) * 100\n    };\n  }\n}\n\n// Reactive system implementation with advanced optimizations\nclass ReactiveState {\n  constructor(initialValue, options = {}) {\n    this._value = initialValue;\n    this._subscribers = new Set();\n    this._computedCache = new Map();\n    this._batchUpdates = new Set();\n    this._isBatching = false;\n    this._comparator = options.comparator || ((a, b) => a !== b);\n    this._debounceMs = options.debounce || 0;\n    this._debounceTimer = null;\n    this._history = options.history ? [initialValue] : null;\n    this._maxHistory = options.maxHistory || 10;\n    \n    // Performance tracking\n    this._updateCount = 0;\n    this._lastUpdate = Date.now();\n  }\n\n  get value() {\n    // Track dependency with performance monitoring\n    if (currentEffect) {\n      this._subscribers.add(currentEffect);\n      currentEffect.dependencies.add(this);\n      \n      // Track dependency access patterns\n      if (!this._accessPatterns) {\n        this._accessPatterns = new Map();\n      }\n      const effectId = currentEffect.id || 'unknown';\n      this._accessPatterns.set(effectId, (this._accessPatterns.get(effectId) || 0) + 1);\n    }\n    \n    return this._value;\n  }\n\n  set value(newValue) {\n    if (this._comparator(newValue, this._value)) {\n      const oldValue = this._value;\n      this._value = newValue;\n      \n      // Add to history if enabled\n      if (this._history) {\n        this._history.push(newValue);\n        if (this._history.length > this._maxHistory) {\n          this._history.shift();\n        }\n      }\n      \n      // Batch updates for performance\n      if (this._isBatching) {\n        this._batchUpdates.add(this);\n      } else {\n        this.notify();\n      }\n      \n      // Update performance metrics\n      this._updateCount++;\n      this._lastUpdate = Date.now();\n      \n      // Emit change event\n      this.emit('change', { oldValue, newValue });\n    }\n  }\n\n  // Advanced value manipulation\n  update(updater) {\n    if (typeof updater === 'function') {\n      this.value = updater(this._value);\n    } else {\n      this.value = updater;\n    }\n  }\n\n  // Batch multiple updates\n  batch(updates) {\n    this._isBatching = true;\n    try {\n      updates();\n    } finally {\n      this._isBatching = false;\n      this._batchUpdates.forEach(state => state.notify());\n      this._batchUpdates.clear();\n    }\n  }\n\n  // Debounced updates\n  debouncedUpdate(newValue) {\n    if (this._debounceTimer) {\n      clearTimeout(this._debounceTimer);\n    }\n    \n    this._debounceTimer = setTimeout(() => {\n      this.value = newValue;\n    }, this._debounceMs);\n  }\n\n  // Undo/redo functionality\n  undo() {\n    if (this._history && this._history.length > 1) {\n      this._history.pop(); // Remove current\n      this.value = this._history[this._history.length - 1];\n      return true;\n    }\n    return false;\n  }\n\n  redo() {\n    // Implementation would require a redo stack\n    return false;\n  }\n\n  notify() {\n    // Performance optimization: batch notifications\n    if (this._subscribers.size === 0) return;\n    \n    const subscribers = Array.from(this._subscribers);\n    const startTime = performance.now() || Date.now();\n    \n    for (const subscriber of subscribers) {\n      try {\n        subscriber.execute();\n      } catch (error) {\n        console.error('Error in reactive subscriber:', error);\n        // Remove problematic subscriber\n        this._subscribers.delete(subscriber);\n      }\n    }\n    \n    // Track notification performance\n    const duration = (performance.now() || Date.now()) - startTime;\n    if (duration > 16) { // Longer than one frame\n      console.warn(`Slow reactive update: ${duration.toFixed(2)}ms`);\n    }\n    \n    // Clear computed cache\n    this._computedCache.clear();\n    \n    // Schedule component updates\n    FluxRuntime.scheduleUpdate();\n  }\n\n  subscribe(callback, options = {}) {\n    const subscription = {\n      callback,\n      id: options.id || Math.random().toString(36),\n      priority: options.priority || 0,\n      execute: () => callback(this._value)\n    };\n    \n    this._subscribers.add(subscription);\n    \n    return () => {\n      this._subscribers.delete(subscription);\n    };\n  }\n\n  // Event emitter functionality\n  emit(event, data) {\n    if (this._eventListeners && this._eventListeners[event]) {\n      this._eventListeners[event].forEach(listener => {\n        try {\n          listener(data);\n        } catch (error) {\n          console.error('Error in event listener:', error);\n        }\n      });\n    }\n  }\n\n  on(event, listener) {\n    if (!this._eventListeners) {\n      this._eventListeners = {};\n    }\n    if (!this._eventListeners[event]) {\n      this._eventListeners[event] = [];\n    }\n    this._eventListeners[event].push(listener);\n    \n    return () => {\n      const index = this._eventListeners[event].indexOf(listener);\n      if (index > -1) {\n        this._eventListeners[event].splice(index, 1);\n      }\n    };\n  }\n\n  // Performance and debugging\n  getStats() {\n    return {\n      updateCount: this._updateCount,\n      lastUpdate: this._lastUpdate,\n      subscriberCount: this._subscribers.size,\n      hasHistory: !!this._history,\n      historySize: this._history ? this._history.length : 0\n    };\n  }\n}\n\n// Enhanced Effect system with better cleanup and performance\nclass Effect {\n  constructor(fn, dependencies = [], options = {}) {\n    this.fn = fn;\n    this.dependencies = new Set();\n    this.isActive = true;\n    this.id = options.id || Math.random().toString(36);\n    this.priority = options.priority || 0;\n    this.cleanup = null;\n    this.executionCount = 0;\n    this.lastExecution = null;\n    this.executionTime = 0;\n    \n    // Performance monitoring\n    this._startTime = performance.now() || Date.now();\n    \n    // Initial execution to capture dependencies\n    this.execute();\n  }\n\n  execute() {\n    if (!this.isActive) return;\n    \n    const startTime = performance.now() || Date.now();\n    \n    // Clear old dependencies\n    for (const dep of this.dependencies) {\n      dep._subscribers.delete(this);\n    }\n    this.dependencies.clear();\n    \n    // Execute cleanup if exists\n    if (this.cleanup) {\n      try {\n        this.cleanup();\n      } catch (error) {\n        console.error('Error in effect cleanup:', error);\n      }\n      this.cleanup = null;\n    }\n    \n    // Execute with dependency tracking\n    const prevEffect = currentEffect;\n    currentEffect = this;\n    \n    try {\n      const result = this.fn();\n      \n      // Handle cleanup function return\n      if (typeof result === 'function') {\n        this.cleanup = result;\n      }\n      \n      // Update metrics\n      this.executionCount++;\n      this.lastExecution = Date.now();\n      this.executionTime = (performance.now() || Date.now()) - startTime;\n      \n    } catch (error) {\n      console.error('Error in effect execution:', error);\n      throw error;\n    } finally {\n      currentEffect = prevEffect;\n    }\n  }\n\n  dispose() {\n    this.isActive = false;\n    \n    // Execute cleanup\n    if (this.cleanup) {\n      try {\n        this.cleanup();\n      } catch (error) {\n        console.error('Error in effect cleanup:', error);\n      }\n    }\n    \n    // Clean up dependencies\n    for (const dep of this.dependencies) {\n      dep._subscribers.delete(this);\n    }\n    \n    this.dependencies.clear();\n  }\n\n  // Performance monitoring\n  getStats() {\n    return {\n      executionCount: this.executionCount,\n      lastExecution: this.lastExecution,\n      executionTime: this.executionTime,\n      isActive: this.isActive,\n      dependencyCount: this.dependencies.size\n    };\n  }\n}\n\n// Enhanced Computed with intelligent caching and performance\nclass Computed {\n  constructor(fn, options = {}) {\n    this.fn = fn;\n    this._value = undefined;\n    this._cached = false;\n    this.dependencies = new Set();\n    this.effect = new Effect(() => {\n      this._cached = false;\n    });\n    this.cacheStrategy = options.cacheStrategy || 'smart'; // 'smart', 'aggressive', 'none'\n    this.maxCacheAge = options.maxCacheAge || 5 * 60 * 1000; // 5 minutes\n    this.lastCacheTime = 0;\n    this.hitCount = 0;\n    this.missCount = 0;\n  }\n\n  get value() {\n    const now = Date.now();\n    \n    // Check if cache is still valid\n    if (this._cached && \n        (this.cacheStrategy === 'aggressive' || \n         now - this.lastCacheTime < this.maxCacheAge)) {\n      this.hitCount++;\n      return this._value;\n    }\n    \n    this.missCount++;\n    \n    // Recompute value\n    const prevEffect = currentEffect;\n    currentEffect = this.effect;\n    \n    try {\n      this._value = this.fn();\n      this._cached = true;\n      this.lastCacheTime = now;\n    } finally {\n      currentEffect = prevEffect;\n    }\n    \n    return this._value;\n  }\n\n  // Cache management\n  invalidate() {\n    this._cached = false;\n  }\n\n  clearCache() {\n    this._value = undefined;\n    this._cached = false;\n    this.lastCacheTime = 0;\n  }\n\n  // Performance statistics\n  getStats() {\n    const total = this.hitCount + this.missCount;\n    const hitRate = total > 0 ? (this.hitCount / total) * 100 : 0;\n    \n    return {\n      hitCount: this.hitCount,\n      missCount: this.missCount,\n      hitRate: hitRate.toFixed(2) + '%',\n      isCached: this._cached,\n      lastCacheTime: this.lastCacheTime,\n      cacheAge: Date.now() - this.lastCacheTime\n    };\n  }\n}\n\n// Global effect tracking\nlet currentEffect = null;\n\n\n\n\n\n\n\n// Virtual DOM implementation\nclass VNode {\n  constructor(type, props, children) {\n    this.type = type;\n    this.props = props || {};\n    this.children = children || [];\n    this.key = props?.key;\n    this.ref = props?.ref;\n    this.dom = null;\n  }\n}\n\nclass VirtualDOM {\n  constructor() {\n    this.currentTree = null;\n    this.pendingUpdates = new Map();\n    this.updateQueue = [];\n    this.isUpdating = false;\n  }\n\n  createElement(type, props, ...children) {\n    // Flatten children\n    const flatChildren = children.flat().filter(child => child != null);\n    \n    return new VNode(type, props, flatChildren);\n  }\n\n  // O(1) diffing algorithm for optimal performance\n  diff(oldNode, newNode) {\n    if (!oldNode || !newNode) {\n      return { type: 'replace', newNode };\n    }\n\n    if (oldNode.type !== newNode.type || oldNode.key !== newNode.key) {\n      return { type: 'replace', newNode };\n    }\n\n    const patches = [];\n    \n    // Diff props\n    const propPatches = this.diffProps(oldNode.props, newNode.props);\n    if (propPatches.length > 0) {\n      patches.push({ type: 'props', patches: propPatches });\n    }\n\n    // Diff children\n    const childPatches = this.diffChildren(oldNode.children, newNode.children);\n    if (childPatches.length > 0) {\n      patches.push({ type: 'children', patches: childPatches });\n    }\n\n    return patches.length > 0 ? { type: 'update', patches } : null;\n  }\n\n  diffProps(oldProps, newProps) {\n    const patches = [];\n    const allKeys = new Set([...Object.keys(oldProps), ...Object.keys(newProps)]);\n    \n    for (const key of allKeys) {\n      if (oldProps[key] !== newProps[key]) {\n        patches.push({ key, value: newProps[key] });\n      }\n    }\n    \n    return patches;\n  }\n\n  diffChildren(oldChildren, newChildren) {\n    const patches = [];\n    const maxLength = Math.max(oldChildren.length, newChildren.length);\n    \n    for (let i = 0; i < maxLength; i++) {\n      const oldChild = oldChildren[i];\n      const newChild = newChildren[i];\n      \n      if (!oldChild && newChild) {\n        patches.push({ type: 'insert', index: i, node: newChild });\n      } else if (oldChild && !newChild) {\n        patches.push({ type: 'remove', index: i });\n      } else if (oldChild && newChild) {\n        const childDiff = this.diff(oldChild, newChild);\n        if (childDiff) {\n          patches.push({ type: 'update', index: i, diff: childDiff });\n        }\n      }\n    }\n    \n    return patches;\n  }\n\n  // Batch updates for performance\n  scheduleUpdate(component, newVNode) {\n    this.pendingUpdates.set(component, newVNode);\n    \n    if (!this.isUpdating) {\n      this.isUpdating = true;\n      this.processUpdates();\n    }\n  }\n\n  processUpdates() {\n    const updates = Array.from(this.pendingUpdates.entries());\n    this.pendingUpdates.clear();\n    \n    for (const [component, newVNode] of updates) {\n      try {\n        this.updateComponent(component, newVNode);\n      } catch (error) {\n        console.error('Error updating component:', error);\n      }\n    }\n    \n    this.isUpdating = false;\n  }\n\n  updateComponent(component, newVNode) {\n    const oldVNode = component.currentVNode;\n    const patches = this.diff(oldVNode, newVNode);\n    \n    if (patches) {\n      this.applyPatches(component.dom, patches);\n      component.currentVNode = newVNode;\n    }\n  }\n\n  applyPatches(dom, patches) {\n    if (!dom) return;\n    \n    for (const patch of patches) {\n      switch (patch.type) {\n        case 'props':\n          this.applyPropPatches(dom, patch.patches);\n          break;\n        case 'children':\n          this.applyChildPatches(dom, patch.patches);\n          break;\n        case 'replace':\n          // Handle replacement\n          break;\n      }\n    }\n  }\n\n  applyPropPatches(dom, propPatches) {\n    for (const { key, value } of propPatches) {\n      if (key.startsWith('on')) {\n        // Event handler\n        const eventName = key.toLowerCase().substring(2);\n        dom.removeEventListener(eventName, dom[`_${key}`]);\n        dom.addEventListener(eventName, value);\n        dom[`_${key}`] = value;\n      } else if (key === 'style' && typeof value === 'object') {\n        // Style object\n        Object.assign(dom.style, value);\n      } else {\n        // Regular attribute\n        dom.setAttribute(key, value);\n      }\n    }\n  }\n\n  applyChildPatches(dom, childPatches) {\n    for (const patch of childPatches) {\n      switch (patch.type) {\n        case 'insert':\n          const newChild = this.createDOMNode(patch.node);\n          dom.insertBefore(newChild, dom.children[patch.index] || null);\n          break;\n        case 'remove':\n          if (dom.children[patch.index]) {\n            dom.removeChild(dom.children[patch.index]);\n          }\n          break;\n        case 'update':\n          this.applyPatches(dom.children[patch.index], patch.diff);\n          break;\n      }\n    }\n  }\n\n  createDOMNode(vnode) {\n    if (typeof vnode === 'string' || typeof vnode === 'number') {\n      return document.createTextNode(vnode);\n    }\n    \n    if (vnode.type === Fragment) {\n      const fragment = document.createDocumentFragment();\n      for (const child of vnode.children) {\n        fragment.appendChild(this.createDOMNode(child));\n      }\n      return fragment;\n    }\n    \n    const dom = document.createElement(vnode.type);\n    \n    // Set props\n    for (const [key, value] of Object.entries(vnode.props)) {\n      if (key !== 'key' && key !== 'ref') {\n        if (key.startsWith('on')) {\n          const eventName = key.toLowerCase().substring(2);\n          dom.addEventListener(eventName, value);\n          dom[`_${key}`] = value;\n        } else if (key === 'style' && typeof value === 'object') {\n          Object.assign(dom.style, value);\n        } else {\n          dom.setAttribute(key, value);\n        }\n      }\n    }\n    \n    // Create children\n    for (const child of vnode.children) {\n      dom.appendChild(this.createDOMNode(child));\n    }\n    \n    vnode.dom = dom;\n    return dom;\n  }\n}\n\n// Router implementation with environment detection\nclass Router {\n  constructor(options = {}) {\n    this.routes = new Map();\n    this.currentRoute = null;\n    this.params = {};\n    this.guards = new Map();\n    this.loaders = new Map();\n    this.mode = options.mode || (isBrowser ? 'browser' : 'hash');\n    this.base = options.base || '';\n    this.fallback = options.fallback || '/';\n    \n    // Only initialize browser-specific features in browser environment\n    if (isBrowser) {\n      // Listen to browser navigation\n      window.addEventListener('popstate', () => this.handleNavigation());\n      \n      // Initial route\n      this.handleNavigation();\n    } else {\n      // Node.js environment - use mock navigation\n      this.currentPath = '/';\n    }\n  }\n\n  registerRoute(path, component, options = {}) {\n    const routePattern = this.pathToRegex(path);\n    \n    this.routes.set(path, {\n      pattern: routePattern,\n      component,\n      guards: options.guards || [],\n      loader: options.loader,\n      meta: options.meta\n    });\n  }\n\n  registerGuard(name, guardFn) {\n    this.guards.set(name, guardFn);\n  }\n\n  pathToRegex(path) {\n    // Convert path like '/users/:id' to regex\n    const pattern = path\n      .replace(/\\//g, '\\\\/')\n      .replace(/:([^\\/]+)/g, '(?<$1>[^\\/]+)')\n      .replace(/\\*/g, '.*');\n    \n    return new RegExp(`^${pattern}$`);\n  }\n\n  async navigate(path, replace = false) {\n    const route = this.findRoute(path);\n    \n    if (!route) {\n      console.warn(`No route found for path: ${path}`);\n      return;\n    }\n\n    // Execute guards\n    for (const guardName of route.guards) {\n      const guard = this.guards.get(guardName);\n      if (guard && !(await guard(route, path))) {\n        return; // Guard blocked navigation\n      }\n    }\n\n    // Execute loader\n    let data = {};\n    if (route.loader) {\n      data = await route.loader(this.params);\n    }\n\n    // Update navigation state based on environment\n    if (isBrowser) {\n      // Update browser history\n      if (replace) {\n        window.history.replaceState({ path }, '', path);\n      } else {\n        window.history.pushState({ path }, '', path);\n      }\n    } else {\n      // Node.js environment - update internal state\n      this.currentPath = path;\n    }\n\n    // Render component\n    this.currentRoute = route;\n    this.renderCurrentRoute(data);\n  }\n\n  findRoute(path) {\n    for (const [routePath, route] of this.routes) {\n      const match = path.match(route.pattern);\n      if (match) {\n        this.params = match.groups || {};\n        return route;\n      }\n    }\n    return null;\n  }\n\n  async handleNavigation() {\n    let path;\n    if (isBrowser) {\n      path = window.location.pathname;\n    } else {\n      path = this.currentPath || '/';\n    }\n    await this.navigate(path, true);\n  }\n\n  renderCurrentRoute(data = {}) {\n    if (this.currentRoute) {\n      const component = new this.currentRoute.component({\n        ...data,\n        params: this.params\n      });\n      \n      if (isBrowser) {\n        const appContainer = document.getElementById('app') || document.body;\n        component.mount(appContainer);\n      } else {\n        // Node.js environment - just store the component\n        this.currentComponent = component;\n      }\n    }\n  }\n}\n\n// Base Component class\nexport class Component {\n  constructor(props = {}) {\n    this.props = props;\n    this.state = {};\n    this.effects = [];\n    this.currentVNode = null;\n    this.dom = null;\n    this.isMounted = false;\n    this.updateQueue = [];\n    this.isUpdating = false;\n    \n    // Bind methods\n    this.setState = this.setState.bind(this);\n    this.forceUpdate = this.forceUpdate.bind(this);\n    \n    // Initialize component\n    this.initialize();\n  }\n\n  initialize() {\n    // Set current component for effect tracking\n    setCurrentComponent(this);\n    \n    // Initialize state from class properties\n    this.initializeState();\n    \n    // Run lifecycle methods\n    if (this.componentDidMount) {\n      this.componentDidMount();\n    }\n  }\n\n  initializeState() {\n    // Convert class properties to reactive state\n    for (const [key, value] of Object.entries(this)) {\n      if (key.startsWith('state_') || key === 'state') {\n        const stateName = key.replace('state_', '');\n        this.state[stateName] = new ReactiveState(value);\n      }\n    }\n  }\n\n  setState(updater) {\n    if (typeof updater === 'function') {\n      updater(this.state);\n    } else {\n      Object.assign(this.state, updater);\n    }\n    \n    this.scheduleUpdate();\n  }\n\n  scheduleUpdate() {\n    if (!this.isUpdating) {\n      this.isUpdating = true;\n      FluxRuntime.scheduleUpdate(() => {\n        this.update();\n        this.isUpdating = false;\n      });\n    }\n  }\n\n  update() {\n    if (!this.isMounted) return;\n    \n    try {\n      const newVNode = this.render();\n      FluxRuntime.virtualDOM.scheduleUpdate(this, newVNode);\n    } catch (error) {\n      console.error('Error updating component:', error);\n    }\n  }\n\n  forceUpdate() {\n    this.update();\n  }\n\n  mount(container) {\n    this.container = container;\n    \n    try {\n      const vnode = this.render();\n      this.currentVNode = vnode;\n      \n      if (isBrowser) {\n        this.dom = FluxRuntime.virtualDOM.createDOMNode(vnode);\n        container.appendChild(this.dom);\n      }\n      \n      this.isMounted = true;\n      \n      if (this.componentDidMount) {\n        this.componentDidMount();\n      }\n    } catch (error) {\n      console.error('Error mounting component:', error);\n    }\n  }\n\n  unmount() {\n    if (this.componentWillUnmount) {\n      this.componentWillUnmount();\n    }\n    \n    // Clean up effects\n    for (const effect of this.effects) {\n      effect.dispose();\n    }\n    \n    this.isMounted = false;\n  }\n\n  render() {\n    throw new Error('Component must implement render method');\n  }\n}\n\n// Store class for state management\nexport class Store {\n  constructor() {\n    this.state = {};\n    this.actions = {};\n    this.computed = {};\n    this.subscribers = new Set();\n    this.middleware = [];\n    \n    this.initialize();\n  }\n\n  initialize() {\n    // Convert class properties to reactive state\n    for (const [key, value] of Object.entries(this)) {\n      if (key.startsWith('state_')) {\n        const stateName = key.replace('state_', '');\n        this.state[stateName] = new ReactiveState(value);\n      } else if (key.startsWith('action_')) {\n        const actionName = key.replace('action_', '');\n        this.actions[actionName] = value.bind(this);\n      } else if (key.startsWith('computed_')) {\n        const computedName = key.replace('computed_', '');\n        this.computed[computedName] = new Computed(value.bind(this));\n      }\n    }\n  }\n\n  // Dispatch action with middleware support\n  async dispatch(actionName, ...args) {\n    let result = this.actions[actionName];\n    \n    if (!result) {\n      throw new Error(`Action ${actionName} not found`);\n    }\n    \n    // Apply middleware\n    for (const middleware of this.middleware) {\n      result = middleware(result);\n    }\n    \n    try {\n      const actionResult = await result(...args);\n      this.notifySubscribers(actionName, actionResult);\n      return actionResult;\n    } catch (error) {\n      console.error(`Error in action ${actionName}:`, error);\n      throw error;\n    }\n  }\n\n  // Subscribe to store changes\n  subscribe(callback) {\n    this.subscribers.add(callback);\n    return () => this.subscribers.delete(callback);\n  }\n\n  notifySubscribers(actionName, result) {\n    for (const subscriber of this.subscribers) {\n      try {\n        subscriber(actionName, result);\n      } catch (error) {\n        console.error('Error in store subscriber:', error);\n      }\n    }\n  }\n\n  // Add middleware\n  use(middleware) {\n    this.middleware.push(middleware);\n  }\n\n  // Get store statistics\n  getStats() {\n    return {\n      stateCount: Object.keys(this.state).length,\n      actionCount: Object.keys(this.actions).length,\n      computedCount: Object.keys(this.computed).length,\n      subscriberCount: this.subscribers.size,\n      middlewareCount: this.middleware.length\n    };\n  }\n}\n\n// Main runtime class\nexport class FluxRuntime {\n  static virtualDOM = new VirtualDOM();\n  static router = new Router();\n  static updateQueue = new Set();\n  static isUpdating = false;\n\n  static scheduleUpdate(callback) {\n    if (callback) {\n      this.updateQueue.add(callback);\n    }\n    \n    if (!this.isUpdating) {\n      this.isUpdating = true;\n      \n      // Use appropriate scheduling based on environment\n      if (isBrowser && typeof requestAnimationFrame !== 'undefined') {\n        requestAnimationFrame(() => {\n          this.flushUpdates();\n          this.isUpdating = false;\n        });\n      } else {\n        // Node.js or fallback - use setImmediate or setTimeout\n        const scheduler = typeof setImmediate !== 'undefined' ? setImmediate : setTimeout;\n        scheduler(() => {\n          this.flushUpdates();\n          this.isUpdating = false;\n        }, 0);\n      }\n    }\n  }\n\n  static flushUpdates() {\n    for (const update of this.updateQueue) {\n      try {\n        update();\n      } catch (error) {\n        console.error('Error during update:', error);\n      }\n    }\n    \n    this.updateQueue.clear();\n  }\n\n  static registerRoute(path, component, options) {\n    this.router.registerRoute(path, component, options);\n  }\n\n  static registerGuard(name, guardFn) {\n    this.router.registerGuard(name, guardFn);\n  }\n\n  static navigate(path, replace = false) {\n    return this.router.navigate(path, replace);\n  }\n\n  static mount(component, container) {\n    if (isBrowser) {\n      if (typeof container === 'string') {\n        container = document.querySelector(container);\n      }\n      \n      if (!container) {\n        throw new Error('Container not found');\n      }\n      \n      const instance = new component();\n      instance.mount(container);\n      \n      return instance;\n    } else {\n      // Node.js environment - create instance without mounting\n      const instance = new component();\n      return instance;\n    }\n  }\n}\n\n// Factory functions\nexport function createReactiveState(initialValue) {\n  return new ReactiveState(initialValue);\n}\n\nexport function createEffect(fn, dependencies) {\n  const effect = new Effect(fn, dependencies);\n  \n  // Add to current component's effects for cleanup\n  if (currentComponent) {\n    currentComponent.effects.push(effect);\n  }\n  \n  return effect;\n}\n\nexport function createComputed(fn) {\n  return new Computed(fn);\n}\n\n// JSX helper\nexport function createElement(type, props, ...children) {\n  return FluxRuntime.virtualDOM.createElement(type, props, ...children);\n}\n\nexport const Fragment = Symbol('Fragment');\n\n// Component tracking for effects\nlet currentComponent = null;\n\nexport function setCurrentComponent(component) {\n  currentComponent = component;\n}\n\n// Global state management\nexport const FluxGlobalState = {\n  stores: new Map(),\n  effects: new Set(),\n  components: new Set(),\n  \n  registerStore(name, store) {\n    this.stores.set(name, store);\n  },\n  \n  getStore(name) {\n    return this.stores.get(name);\n  },\n  \n  registerEffect(effect) {\n    this.effects.add(effect);\n  },\n  \n  registerComponent(component) {\n    this.components.add(component);\n  },\n  \n  cleanup() {\n    // Clean up all effects\n    for (const effect of this.effects) {\n      effect.dispose();\n    }\n    this.effects.clear();\n    \n    // Clean up all components\n    for (const component of this.components) {\n      component.unmount();\n    }\n    this.components.clear();\n  },\n  \n  getStats() {\n    return {\n      storeCount: this.stores.size,\n      effectCount: this.effects.size,\n      componentCount: this.components.size\n    };\n  }\n};\n\n// Advanced caching system\nexport class FluxCache {\n  constructor(options = {}) {\n    this.maxSize = options.maxSize || 1000;\n    this.maxAge = options.maxAge || 5 * 60 * 1000; // 5 minutes\n    this.cache = new Map();\n    this.accessOrder = [];\n  }\n\n  set(key, value, ttl = this.maxAge) {\n    if (this.cache.size >= this.maxSize) {\n      this.evictOldest();\n    }\n\n    const entry = {\n      value,\n      timestamp: Date.now(),\n      ttl,\n      accessCount: 0\n    };\n\n    this.cache.set(key, entry);\n    this.updateAccessOrder(key);\n  }\n\n  get(key) {\n    const entry = this.cache.get(key);\n    if (!entry) return null;\n\n    // Check if expired\n    if (Date.now() - entry.timestamp > entry.ttl) {\n      this.cache.delete(key);\n      this.removeFromAccessOrder(key);\n      return null;\n    }\n\n    // Update access count and order\n    entry.accessCount++;\n    this.updateAccessOrder(key);\n    return entry.value;\n  }\n\n  has(key) {\n    return this.cache.has(key) && !this.isExpired(key);\n  }\n\n  delete(key) {\n    const deleted = this.cache.delete(key);\n    if (deleted) {\n      this.removeFromAccessOrder(key);\n    }\n    return deleted;\n  }\n\n  clear() {\n    this.cache.clear();\n    this.accessOrder = [];\n  }\n\n  evictOldest() {\n    if (this.accessOrder.length === 0) return;\n\n    const oldestKey = this.accessOrder[0];\n    this.cache.delete(oldestKey);\n    this.accessOrder.shift();\n  }\n\n  isExpired(key) {\n    const entry = this.cache.get(key);\n    if (!entry) return true;\n    return Date.now() - entry.timestamp > entry.ttl;\n  }\n\n  updateAccessOrder(key) {\n    this.removeFromAccessOrder(key);\n    this.accessOrder.push(key);\n  }\n\n  removeFromAccessOrder(key) {\n    const index = this.accessOrder.indexOf(key);\n    if (index > -1) {\n      this.accessOrder.splice(index, 1);\n    }\n  }\n\n  getStats() {\n    return {\n      size: this.cache.size,\n      maxSize: this.maxSize,\n      hitRate: this.calculateHitRate(),\n      averageAge: this.calculateAverageAge()\n    };\n  }\n\n  calculateHitRate() {\n    // Implementation would track hits vs misses\n    return 0.85; // Placeholder\n  }\n\n  calculateAverageAge() {\n    if (this.cache.size === 0) return 0;\n    \n    const now = Date.now();\n    let totalAge = 0;\n    \n    for (const entry of this.cache.values()) {\n      totalAge += now - entry.timestamp;\n    }\n    \n    return totalAge / this.cache.size;\n  }\n}\n\n// WebSocket manager for real-time features\nexport class FluxWebSocket {\n  constructor(url, options = {}) {\n    this.url = url;\n    this.options = {\n      reconnectInterval: 1000,\n      maxReconnectAttempts: 5,\n      heartbeatInterval: 30000,\n      ...options\n    };\n    \n    this.ws = null;\n    this.reconnectAttempts = 0;\n    this.reconnectTimer = null;\n    this.heartbeatTimer = null;\n    this.messageQueue = [];\n    this.subscribers = new Map();\n    this.isConnected = false;\n    \n    this.connect();\n  }\n\n  connect() {\n    try {\n      this.ws = new WebSocket(this.url);\n      \n      this.ws.onopen = () => {\n        this.isConnected = true;\n        this.reconnectAttempts = 0;\n        this.startHeartbeat();\n        this.flushMessageQueue();\n        this.emit('connected');\n      };\n      \n      this.ws.onmessage = (event) => {\n        try {\n          const data = JSON.parse(event.data);\n          this.handleMessage(data);\n        } catch (error) {\n          console.error('Error parsing WebSocket message:', error);\n        }\n      };\n      \n      this.ws.onclose = () => {\n        this.isConnected = false;\n        this.stopHeartbeat();\n        this.emit('disconnected');\n        this.scheduleReconnect();\n      };\n      \n      this.ws.onerror = (error) => {\n        console.error('WebSocket error:', error);\n        this.emit('error', error);\n      };\n      \n    } catch (error) {\n      console.error('Error creating WebSocket:', error);\n      this.scheduleReconnect();\n    }\n  }\n\n  send(type, data) {\n    const message = { type, data, timestamp: Date.now() };\n    \n    if (this.isConnected) {\n      this.ws.send(JSON.stringify(message));\n    } else {\n      this.messageQueue.push(message);\n    }\n  }\n\n  subscribe(type, callback) {\n    if (!this.subscribers.has(type)) {\n      this.subscribers.set(type, new Set());\n    }\n    this.subscribers.get(type).add(callback);\n    \n    return () => {\n      const callbacks = this.subscribers.get(type);\n      if (callbacks) {\n        callbacks.delete(callback);\n      }\n    };\n  }\n\n  handleMessage(data) {\n    const { type, data: messageData } = data;\n    const callbacks = this.subscribers.get(type);\n    \n    if (callbacks) {\n      for (const callback of callbacks) {\n        try {\n          callback(messageData);\n        } catch (error) {\n          console.error('Error in WebSocket message handler:', error);\n        }\n      }\n    }\n    \n    this.emit('message', data);\n  }\n\n  startHeartbeat() {\n    this.heartbeatTimer = setInterval(() => {\n      if (this.isConnected) {\n        this.send('heartbeat', { timestamp: Date.now() });\n      }\n    }, this.options.heartbeatInterval);\n  }\n\n  stopHeartbeat() {\n    if (this.heartbeatTimer) {\n      clearInterval(this.heartbeatTimer);\n      this.heartbeatTimer = null;\n    }\n  }\n\n  scheduleReconnect() {\n    if (this.reconnectAttempts < this.options.maxReconnectAttempts) {\n      this.reconnectAttempts++;\n      this.reconnectTimer = setTimeout(() => {\n        this.connect();\n      }, this.options.reconnectInterval * this.reconnectAttempts);\n    }\n  }\n\n  flushMessageQueue() {\n    while (this.messageQueue.length > 0) {\n      const message = this.messageQueue.shift();\n      this.ws.send(JSON.stringify(message));\n    }\n  }\n\n  disconnect() {\n    if (this.reconnectTimer) {\n      clearTimeout(this.reconnectTimer);\n      this.reconnectTimer = null;\n    }\n    \n    if (this.heartbeatTimer) {\n      clearInterval(this.heartbeatTimer);\n      this.heartbeatTimer = null;\n    }\n    \n    if (this.ws) {\n      this.ws.close();\n      this.ws = null;\n    }\n  }\n\n  // Event emitter functionality\n  emit(event, data) {\n    // Implementation would use event emitter\n    console.log(`WebSocket event: ${event}`, data);\n  }\n}\n\n// Development helpers\nexport const FluxDevTools = {\n  logStateChanges: true,\n  logRenders: true,\n  logRouteChanges: true,\n  \n  trackStateChange(component, stateName, oldValue, newValue) {\n    if (this.logStateChanges) {\n      console.log(`[Flux] State change in ${component.constructor.name}:`, {\n        state: stateName,\n        oldValue,\n        newValue\n      });\n    }\n  },\n  \n  trackRender(component, renderTime) {\n    if (this.logRenders) {\n      console.log(`[Flux] Render ${component.constructor.name}: ${renderTime}ms`);\n    }\n  },\n  \n  trackRouteChange(from, to) {\n    if (this.logRouteChanges) {\n      console.log(`[Flux] Route change: ${from} -> ${to}`);\n    }\n  }\n};\n\n// Performance monitoring\nexport const FluxProfiler = {\n  measurements: new Map(),\n  \n  start(label) {\n    this.measurements.set(label, performance.now());\n  },\n  \n  end(label) {\n    const startTime = this.measurements.get(label);\n    if (startTime) {\n      const duration = performance.now() - startTime;\n      this.measurements.delete(label);\n      return duration;\n    }\n    return 0;\n  },\n  \n  measure(label, fn) {\n    this.start(label);\n    const result = fn();\n    const duration = this.end(label);\n    \n    console.log(`[Flux Profiler] ${label}: ${duration.toFixed(2)}ms`);\n    \n    return result;\n  }\n};\n\n// Export everything\nexport {\n  ReactiveState,\n  Effect,\n  Computed,\n  VNode,\n  VirtualDOM,\n  Router\n};", "// Configuration management system for Flux applications\nimport fs from 'fs-extra';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nclass ConfigManager {\n  constructor(options = {}) {\n    this.options = {\n      configDir: options.configDir || 'src/config',\n      environment: options.environment || process.env.NODE_ENV || 'development',\n      configFile: options.configFile || 'config.js',\n      secretsFile: options.secretsFile || '.env',\n      validateOnLoad: options.validateOnLoad !== false,\n      cache: options.cache !== false,\n      ...options\n    };\n    \n    this.config = new Map();\n    this.secrets = new Map();\n    this.loaded = false;\n    this.watchers = new Map();\n    \n    this.loadConfiguration();\n  }\n\n  async loadConfiguration() {\n    try {\n      // Load environment variables\n      await this.loadEnvironmentVariables();\n      \n      // Load main configuration\n      await this.loadMainConfig();\n      \n      // Load environment-specific configuration\n      await this.loadEnvironmentConfig();\n      \n      // Load secrets\n      await this.loadSecrets();\n      \n      // Validate configuration\n      if (this.options.validateOnLoad) {\n        await this.validateConfiguration();\n      }\n      \n      this.loaded = true;\n      console.log('\u2705 Configuration loaded successfully');\n      \n    } catch (error) {\n      console.error('\u274C Failed to load configuration:', error);\n      throw error;\n    }\n  }\n\n  async loadEnvironmentVariables() {\n    // Load from .env file if it exists\n    const envPath = path.resolve(this.options.secretsFile);\n    if (await fs.pathExists(envPath)) {\n      try {\n        const envContent = await fs.readFile(envPath, 'utf-8');\n        const envVars = this.parseEnvFile(envContent);\n        \n        for (const [key, value] of Object.entries(envVars)) {\n          process.env[key] = value;\n        }\n      } catch (error) {\n        console.warn('Warning: Could not load .env file:', error.message);\n      }\n    }\n  }\n\n  parseEnvFile(content) {\n    const envVars = {};\n    const lines = content.split('\\n');\n    \n    for (const line of lines) {\n      const trimmed = line.trim();\n      if (trimmed && !trimmed.startsWith('#')) {\n        const [key, ...valueParts] = trimmed.split('=');\n        if (key && valueParts.length > 0) {\n          envVars[key.trim()] = valueParts.join('=').trim();\n        }\n      }\n    }\n    \n    return envVars;\n  }\n\n  async loadMainConfig() {\n    const configPath = path.resolve(this.options.configDir, this.options.configFile);\n    \n    if (await fs.pathExists(configPath)) {\n      try {\n        const config = await import(configPath);\n        const configData = config.default || config;\n        \n        // Merge with environment variables\n        this.config.set('main', this.interpolateEnvVars(configData));\n      } catch (error) {\n        console.warn('Warning: Could not load main config:', error.message);\n        this.config.set('main', {});\n      }\n    } else {\n      this.config.set('main', {});\n    }\n  }\n\n  async loadEnvironmentConfig() {\n    const envConfigPath = path.resolve(this.options.configDir, `${this.options.environment}.js`);\n    \n    if (await fs.pathExists(envConfigPath)) {\n      try {\n        const config = await import(envConfigPath);\n        const configData = config.default || config;\n        \n        // Merge with main config\n        const mainConfig = this.config.get('main') || {};\n        const envConfig = this.interpolateEnvVars(configData);\n        \n        this.config.set('environment', this.mergeConfigs(mainConfig, envConfig));\n      } catch (error) {\n        console.warn(`Warning: Could not load ${this.options.environment} config:`, error.message);\n        this.config.set('environment', this.config.get('main') || {});\n      }\n    } else {\n      this.config.set('environment', this.config.get('main') || {});\n    }\n  }\n\n  async loadSecrets() {\n    const secretsPath = path.resolve(this.options.configDir, 'secrets.js');\n    \n    if (await fs.pathExists(secretsPath)) {\n      try {\n        const secrets = await import(secretsPath);\n        const secretsData = secrets.default || secrets;\n        \n        this.secrets = new Map(Object.entries(secretsData));\n      } catch (error) {\n        console.warn('Warning: Could not load secrets:', error.message);\n      }\n    }\n  }\n\n  interpolateEnvVars(config) {\n    if (typeof config === 'string') {\n      return config.replace(/\\$\\{([^}]+)\\}/g, (match, key) => {\n        return process.env[key] || match;\n      });\n    }\n    \n    if (Array.isArray(config)) {\n      return config.map(item => this.interpolateEnvVars(item));\n    }\n    \n    if (typeof config === 'object' && config !== null) {\n      const result = {};\n      for (const [key, value] of Object.entries(config)) {\n        result[key] = this.interpolateEnvVars(value);\n      }\n      return result;\n    }\n    \n    return config;\n  }\n\n  mergeConfigs(base, override) {\n    const result = { ...base };\n    \n    for (const [key, value] of Object.entries(override)) {\n      if (typeof value === 'object' && value !== null && !Array.isArray(value)) {\n        result[key] = this.mergeConfigs(result[key] || {}, value);\n      } else {\n        result[key] = value;\n      }\n    }\n    \n    return result;\n  }\n\n  async validateConfiguration() {\n    const config = this.config.get('environment');\n    \n    // Validate required fields\n    const required = ['app', 'server', 'database'];\n    for (const field of required) {\n      if (!config[field]) {\n        throw new Error(`Missing required configuration: ${field}`);\n      }\n    }\n    \n    // Validate specific configurations\n    await this.validateAppConfig(config.app);\n    await this.validateServerConfig(config.server);\n    await this.validateDatabaseConfig(config.database);\n    \n    console.log('\u2705 Configuration validation passed');\n  }\n\n  async validateAppConfig(appConfig) {\n    if (!appConfig.name) {\n      throw new Error('App name is required');\n    }\n    \n    if (!appConfig.version) {\n      throw new Error('App version is required');\n    }\n  }\n\n  async validateServerConfig(serverConfig) {\n    if (!serverConfig.port) {\n      throw new Error('Server port is required');\n    }\n    \n    if (serverConfig.port < 1 || serverConfig.port > 65535) {\n      throw new Error('Server port must be between 1 and 65535');\n    }\n  }\n\n  async validateDatabaseConfig(dbConfig) {\n    if (!dbConfig.host) {\n      throw new Error('Database host is required');\n    }\n    \n    if (!dbConfig.port) {\n      throw new Error('Database port is required');\n    }\n    \n    if (!dbConfig.database) {\n      throw new Error('Database name is required');\n    }\n  }\n\n  // Configuration access methods\n  get(key, defaultValue = undefined) {\n    const config = this.config.get('environment');\n    return this.getNestedValue(config, key, defaultValue);\n  }\n\n  getNestedValue(obj, path, defaultValue) {\n    const keys = path.split('.');\n    let current = obj;\n    \n    for (const key of keys) {\n      if (current && typeof current === 'object' && key in current) {\n        current = current[key];\n      } else {\n        return defaultValue;\n      }\n    }\n    \n    return current !== undefined ? current : defaultValue;\n  }\n\n  set(key, value) {\n    const config = this.config.get('environment');\n    this.setNestedValue(config, key, value);\n  }\n\n  setNestedValue(obj, path, value) {\n    const keys = path.split('.');\n    const lastKey = keys.pop();\n    let current = obj;\n    \n    for (const key of keys) {\n      if (!(key in current) || typeof current[key] !== 'object') {\n        current[key] = {};\n      }\n      current = current[key];\n    }\n    \n    current[lastKey] = value;\n  }\n\n  // Secret access\n  getSecret(key, defaultValue = undefined) {\n    return this.secrets.get(key) || defaultValue;\n  }\n\n  setSecret(key, value) {\n    this.secrets.set(key, value);\n  }\n\n  // Configuration watching\n  watch(key, callback) {\n    if (!this.watchers.has(key)) {\n      this.watchers.set(key, new Set());\n    }\n    this.watchers.get(key).add(callback);\n    \n    return () => {\n      const watchers = this.watchers.get(key);\n      if (watchers) {\n        watchers.delete(callback);\n      }\n    };\n  }\n\n  notifyWatchers(key, oldValue, newValue) {\n    const watchers = this.watchers.get(key);\n    if (watchers) {\n      for (const callback of watchers) {\n        try {\n          callback(oldValue, newValue);\n        } catch (error) {\n          console.error('Error in config watcher:', error);\n        }\n      }\n    }\n  }\n\n  // Configuration reloading\n  async reload() {\n    this.loaded = false;\n    this.config.clear();\n    await this.loadConfiguration();\n  }\n\n  // Configuration export\n  export() {\n    const config = this.config.get('environment');\n    return JSON.parse(JSON.stringify(config));\n  }\n\n  // Configuration validation\n  isValid() {\n    return this.loaded;\n  }\n\n  // Get all configuration keys\n  getKeys() {\n    const config = this.config.get('environment');\n    return this.getAllKeys(config);\n  }\n\n  getAllKeys(obj, prefix = '') {\n    const keys = [];\n    \n    for (const [key, value] of Object.entries(obj)) {\n      const fullKey = prefix ? `${prefix}.${key}` : key;\n      \n      if (typeof value === 'object' && value !== null && !Array.isArray(value)) {\n        keys.push(...this.getAllKeys(value, fullKey));\n      } else {\n        keys.push(fullKey);\n      }\n    }\n    \n    return keys;\n  }\n\n  // Configuration search\n  search(query) {\n    const config = this.config.get('environment');\n    const results = [];\n    \n    for (const key of this.getKeys()) {\n      if (key.toLowerCase().includes(query.toLowerCase())) {\n        results.push({\n          key,\n          value: this.get(key)\n        });\n      }\n    }\n    \n    return results;\n  }\n\n  // Configuration diff\n  diff(otherConfig) {\n    const currentConfig = this.config.get('environment');\n    const diff = {\n      added: {},\n      modified: {},\n      removed: {}\n    };\n    \n    // Find added and modified\n    for (const [key, value] of Object.entries(otherConfig)) {\n      if (!(key in currentConfig)) {\n        diff.added[key] = value;\n      } else if (JSON.stringify(currentConfig[key]) !== JSON.stringify(value)) {\n        diff.modified[key] = {\n          old: currentConfig[key],\n          new: value\n        };\n      }\n    }\n    \n    // Find removed\n    for (const key of Object.keys(currentConfig)) {\n      if (!(key in otherConfig)) {\n        diff.removed[key] = currentConfig[key];\n      }\n    }\n    \n    return diff;\n  }\n}\n\n// Create default instance\nexport const configManager = new ConfigManager();\n\n// Export the class and instance\nexport { ConfigManager };\nexport default configManager;", "// Storage management system for Flux applications\nimport fs from 'fs-extra';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\nimport { FluxCache } from '../runtime/index.js';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nclass StorageManager {\n  constructor(options = {}) {\n    this.options = {\n      basePath: options.basePath || 'storage',\n      publicPath: options.publicPath || 'public',\n      uploadsPath: options.uploadsPath || 'uploads',\n      tempPath: options.tempPath || 'temp',\n      maxFileSize: options.maxFileSize || 10 * 1024 * 1024, // 10MB\n      allowedTypes: options.allowedTypes || ['image/*', 'text/*', 'application/*'],\n      cache: options.cache !== false,\n      ...options\n    };\n    \n    this.cache = this.options.cache ? new FluxCache() : null;\n    this.storageRoot = path.resolve(this.options.basePath);\n    this.publicPath = path.join(this.storageRoot, this.options.publicPath);\n    this.uploadsPath = path.join(this.storageRoot, this.options.uploadsPath);\n    this.tempPath = path.join(this.storageRoot, this.options.tempPath);\n    \n    this.initializeStorage();\n  }\n\n  async initializeStorage() {\n    try {\n      // Create storage directories\n      await fs.ensureDir(this.storageRoot);\n      await fs.ensureDir(this.publicPath);\n      await fs.ensureDir(this.uploadsPath);\n      await fs.ensureDir(this.tempPath);\n      \n      // Create subdirectories for better organization\n      await fs.ensureDir(path.join(this.publicPath, 'images'));\n      await fs.ensureDir(path.join(this.publicPath, 'css'));\n      await fs.ensureDir(path.join(this.publicPath, 'js'));\n      await fs.ensureDir(path.join(this.publicPath, 'fonts'));\n      await fs.ensureDir(path.join(this.publicPath, 'documents'));\n      \n      await fs.ensureDir(path.join(this.uploadsPath, 'images'));\n      await fs.ensureDir(path.join(this.uploadsPath, 'documents'));\n      await fs.ensureDir(path.join(this.uploadsPath, 'videos'));\n      await fs.ensureDir(path.join(this.uploadsPath, 'audio'));\n      \n      console.log('\u2705 Storage system initialized successfully');\n    } catch (error) {\n      console.error('\u274C Failed to initialize storage:', error);\n      throw error;\n    }\n  }\n\n  // File operations\n  async storeFile(file, destination = 'uploads', options = {}) {\n    const {\n      filename = file.name || `file_${Date.now()}`,\n      subfolder = '',\n      overwrite = false,\n      validate = true\n    } = options;\n\n    try {\n      // Validate file\n      if (validate) {\n        await this.validateFile(file);\n      }\n\n      // Determine destination path\n      const destPath = destination === 'public' ? this.publicPath : this.uploadsPath;\n      const finalPath = path.join(destPath, subfolder, filename);\n\n      // Check if file exists and handle overwrite\n      if (await fs.pathExists(finalPath) && !overwrite) {\n        throw new Error(`File ${filename} already exists`);\n      }\n\n      // Ensure directory exists\n      await fs.ensureDir(path.dirname(finalPath));\n\n      // Copy file to destination\n      await fs.copy(file.path || file, finalPath);\n\n      // Generate file metadata\n      const stats = await fs.stat(finalPath);\n      const fileInfo = {\n        filename,\n        originalName: file.name || filename,\n        path: finalPath,\n        url: this.getPublicUrl(finalPath),\n        size: stats.size,\n        mimeType: file.mimetype || this.getMimeType(filename),\n        uploadedAt: new Date(),\n        destination,\n        subfolder\n      };\n\n      // Cache file info if caching is enabled\n      if (this.cache) {\n        this.cache.set(`file:${filename}`, fileInfo);\n      }\n\n      return fileInfo;\n    } catch (error) {\n      console.error('Error storing file:', error);\n      throw error;\n    }\n  }\n\n  async getFile(filename, destination = 'uploads') {\n    try {\n      // Check cache first\n      if (this.cache) {\n        const cached = this.cache.get(`file:${filename}`);\n        if (cached) return cached;\n      }\n\n      const destPath = destination === 'public' ? this.publicPath : this.uploadsPath;\n      const filePath = path.join(destPath, filename);\n\n      if (!await fs.pathExists(filePath)) {\n        throw new Error(`File ${filename} not found`);\n      }\n\n      const stats = await fs.stat(filePath);\n      const fileInfo = {\n        filename,\n        path: filePath,\n        url: this.getPublicUrl(filePath),\n        size: stats.size,\n        mimeType: this.getMimeType(filename),\n        modifiedAt: stats.mtime,\n        destination\n      };\n\n      // Cache file info\n      if (this.cache) {\n        this.cache.set(`file:${filename}`, fileInfo);\n      }\n\n      return fileInfo;\n    } catch (error) {\n      console.error('Error getting file:', error);\n      throw error;\n    }\n  }\n\n  async deleteFile(filename, destination = 'uploads') {\n    try {\n      const destPath = destination === 'public' ? this.publicPath : this.uploadsPath;\n      const filePath = path.join(destPath, filename);\n\n      if (!await fs.pathExists(filePath)) {\n        throw new Error(`File ${filename} not found`);\n      }\n\n      await fs.remove(filePath);\n\n      // Remove from cache\n      if (this.cache) {\n        this.cache.delete(`file:${filename}`);\n      }\n\n      return { success: true, message: `File ${filename} deleted successfully` };\n    } catch (error) {\n      console.error('Error deleting file:', error);\n      throw error;\n    }\n  }\n\n  async listFiles(destination = 'uploads', subfolder = '', options = {}) {\n    const {\n      recursive = false,\n      filter = null,\n      sortBy = 'name',\n      sortOrder = 'asc'\n    } = options;\n\n    try {\n      const destPath = destination === 'public' ? this.publicPath : this.uploadsPath;\n      const searchPath = path.join(destPath, subfolder);\n\n      if (!await fs.pathExists(searchPath)) {\n        return [];\n      }\n\n      const files = await this.scanDirectory(searchPath, recursive);\n      \n      // Apply filters\n      let filteredFiles = files;\n      if (filter) {\n        filteredFiles = files.filter(file => {\n          if (typeof filter === 'function') {\n            return filter(file);\n          }\n          if (typeof filter === 'string') {\n            return file.name.includes(filter);\n          }\n          if (filter.extension) {\n            return path.extname(file.name) === filter.extension;\n          }\n          if (filter.mimeType) {\n            return file.mimeType.startsWith(filter.mimeType);\n          }\n          return true;\n        });\n      }\n\n      // Sort files\n      filteredFiles.sort((a, b) => {\n        let aValue = a[sortBy];\n        let bValue = b[sortBy];\n\n        if (sortBy === 'size' || sortBy === 'modifiedAt') {\n          aValue = aValue || 0;\n          bValue = bValue || 0;\n        } else {\n          aValue = String(aValue || '').toLowerCase();\n          bValue = String(bValue || '').toLowerCase();\n        }\n\n        if (sortOrder === 'desc') {\n          [aValue, bValue] = [bValue, aValue];\n        }\n\n        if (aValue < bValue) return -1;\n        if (aValue > bValue) return 1;\n        return 0;\n      });\n\n      return filteredFiles;\n    } catch (error) {\n      console.error('Error listing files:', error);\n      throw error;\n    }\n  }\n\n  async scanDirectory(dirPath, recursive = false) {\n    const files = [];\n    \n    try {\n      const entries = await fs.readdir(dirPath, { withFileTypes: true });\n      \n      for (const entry of entries) {\n        const fullPath = path.join(dirPath, entry.name);\n        const relativePath = path.relative(this.storageRoot, fullPath);\n        \n        if (entry.isDirectory() && recursive) {\n          const subFiles = await this.scanDirectory(fullPath, recursive);\n          files.push(...subFiles);\n        } else if (entry.isFile()) {\n          const stats = await fs.stat(fullPath);\n          files.push({\n            name: entry.name,\n            path: fullPath,\n            relativePath,\n            url: this.getPublicUrl(fullPath),\n            size: stats.size,\n            mimeType: this.getMimeType(entry.name),\n            modifiedAt: stats.mtime,\n            createdAt: stats.birthtime\n          });\n        }\n      }\n    } catch (error) {\n      console.error(`Error scanning directory ${dirPath}:`, error);\n    }\n    \n    return files;\n  }\n\n  // Public file serving\n  getPublicUrl(filePath) {\n    const relativePath = path.relative(this.storageRoot, filePath);\n    return `/storage/${relativePath.replace(/\\\\/g, '/')}`;\n  }\n\n  async servePublicFile(filePath) {\n    try {\n      const fullPath = path.join(this.storageRoot, filePath);\n      \n      if (!await fs.pathExists(fullPath)) {\n        throw new Error('File not found');\n      }\n\n      const stats = await fs.stat(fullPath);\n      const stream = fs.createReadStream(fullPath);\n      \n      return {\n        stream,\n        stats,\n        mimeType: this.getMimeType(filePath)\n      };\n    } catch (error) {\n      console.error('Error serving public file:', error);\n      throw error;\n    }\n  }\n\n  // File validation\n  async validateFile(file) {\n    // Check file size\n    if (file.size && file.size > this.options.maxFileSize) {\n      throw new Error(`File size exceeds maximum allowed size of ${this.formatBytes(this.options.maxFileSize)}`);\n    }\n\n    // Check file type\n    if (file.mimetype && !this.isAllowedType(file.mimetype)) {\n      throw new Error(`File type ${file.mimetype} is not allowed`);\n    }\n\n    return true;\n  }\n\n  isAllowedType(mimeType) {\n    return this.options.allowedTypes.some(allowed => {\n      if (allowed.endsWith('/*')) {\n        return mimeType.startsWith(allowed.slice(0, -1));\n      }\n      return mimeType === allowed;\n    });\n  }\n\n  // Utility methods\n  getMimeType(filename) {\n    const ext = path.extname(filename).toLowerCase();\n    const mimeTypes = {\n      '.html': 'text/html',\n      '.css': 'text/css',\n      '.js': 'text/javascript',\n      '.json': 'application/json',\n      '.png': 'image/png',\n      '.jpg': 'image/jpeg',\n      '.jpeg': 'image/jpeg',\n      '.gif': 'image/gif',\n      '.svg': 'image/svg+xml',\n      '.ico': 'image/x-icon',\n      '.woff': 'font/woff',\n      '.woff2': 'font/woff2',\n      '.ttf': 'font/ttf',\n      '.eot': 'application/vnd.ms-fontobject',\n      '.pdf': 'application/pdf',\n      '.txt': 'text/plain',\n      '.md': 'text/markdown',\n      '.xml': 'text/xml',\n      '.csv': 'text/csv'\n    };\n    \n    return mimeTypes[ext] || 'application/octet-stream';\n  }\n\n  formatBytes(bytes) {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  }\n\n  // Storage statistics\n  async getStorageStats() {\n    try {\n      const publicStats = await this.getDirectoryStats(this.publicPath);\n      const uploadsStats = await this.getDirectoryStats(this.uploadsPath);\n      const tempStats = await this.getDirectoryStats(this.tempPath);\n\n      return {\n        public: publicStats,\n        uploads: uploadsStats,\n        temp: tempStats,\n        total: {\n          files: publicStats.files + uploadsStats.files + tempStats.files,\n          size: publicStats.size + uploadsStats.size + tempStats.size\n        },\n        cache: this.cache ? this.cache.getStats() : null\n      };\n    } catch (error) {\n      console.error('Error getting storage stats:', error);\n      throw error;\n    }\n  }\n\n  async getDirectoryStats(dirPath) {\n    try {\n      if (!await fs.pathExists(dirPath)) {\n        return { files: 0, size: 0, directories: 0 };\n      }\n\n      const files = await this.scanDirectory(dirPath, true);\n      const totalSize = files.reduce((sum, file) => sum + file.size, 0);\n      const directories = new Set(files.map(f => path.dirname(f.relativePath))).size;\n\n      return {\n        files: files.length,\n        size: totalSize,\n        directories\n      };\n    } catch (error) {\n      console.error(`Error getting directory stats for ${dirPath}:`, error);\n      return { files: 0, size: 0, directories: 0 };\n    }\n  }\n\n  // Cleanup operations\n  async cleanupTempFiles(maxAge = 24 * 60 * 60 * 1000) { // 24 hours\n    try {\n      const files = await this.scanDirectory(this.tempPath, true);\n      const now = Date.now();\n      let cleanedCount = 0;\n\n      for (const file of files) {\n        if (now - file.modifiedAt.getTime() > maxAge) {\n          await this.deleteFile(file.name, 'temp');\n          cleanedCount++;\n        }\n      }\n\n      return { cleanedCount, message: `Cleaned ${cleanedCount} temporary files` };\n    } catch (error) {\n      console.error('Error cleaning temp files:', error);\n      throw error;\n    }\n  }\n\n  // Backup and restore\n  async createBackup(backupPath) {\n    try {\n      await fs.ensureDir(path.dirname(backupPath));\n      await fs.copy(this.storageRoot, backupPath);\n      return { success: true, backupPath };\n    } catch (error) {\n      console.error('Error creating backup:', error);\n      throw error;\n    }\n  }\n\n  async restoreFromBackup(backupPath) {\n    try {\n      if (!await fs.pathExists(backupPath)) {\n        throw new Error('Backup path does not exist');\n      }\n\n      // Create backup of current storage before restore\n      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n      const currentBackup = path.join(path.dirname(this.storageRoot), `backup-before-restore-${timestamp}`);\n      await this.createBackup(currentBackup);\n\n      // Restore from backup\n      await fs.remove(this.storageRoot);\n      await fs.copy(backupPath, this.storageRoot);\n\n      return { success: true, message: 'Storage restored successfully' };\n    } catch (error) {\n      console.error('Error restoring from backup:', error);\n      throw error;\n    }\n  }\n}\n\n// Create default instance\nexport const storageManager = new StorageManager();\n\n// Export the class and instance\nexport { StorageManager };\nexport default storageManager;", "// flux-core/src/cli/dev-server.js\n// Development server with hot reloading\n\nimport { createServer } from 'http';\nimport { createReadStream } from 'fs';\nimport { stat, readFile, readdir, access } from 'fs/promises';\nimport { extname, join, resolve } from 'path';\nimport { FluxCompiler } from '../compiler/index.js';\nimport { configManager } from '../config/index.js';\nimport { storageManager } from '../storage/index.js';\nimport chalk from 'chalk';\n\nconst MIME_TYPES = {\n  '.html': 'text/html',\n  '.js': 'text/javascript',\n  '.css': 'text/css',\n  '.json': 'application/json',\n  '.png': 'image/png',\n  '.jpg': 'image/jpeg',\n  '.gif': 'image/gif',\n  '.svg': 'image/svg+xml',\n  '.ico': 'image/x-icon',\n  '.woff': 'font/woff',\n  '.woff2': 'font/woff2',\n  '.ttf': 'font/ttf',\n  '.eot': 'application/vnd.ms-fontobject'\n};\n\nexport async function devServer(options = {}) {\n  const {\n    port = 3000,\n    host = 'localhost',\n    root = process.cwd(),\n    hot = false,\n    analyze = false,\n    profile = false\n  } = options;\n  \n  console.log(chalk.blue('[start] Starting Flux Development Server...'));\n  \n  try {\n    // Initialize configuration system\n    console.log(chalk.blue('[config] Loading configuration...'));\n    await configManager.loadConfiguration();\n    \n    // Initialize storage system\n    console.log(chalk.blue('[storage] Initializing storage system...'));\n    await storageManager.initializeStorage();\n    \n    // Get configuration values\n    const configPort = configManager.get('server.port', port);\n    const configHost = configManager.get('server.host', host);\n    const finalPort = port || configPort;\n    const finalHost = host || configHost;\n    \n    const compiler = new FluxCompiler({\n      target: 'js',\n      minify: false,\n      sourceMaps: true,\n      optimizations: false,\n      watchMode: true\n    });\n  \n  // File watcher for hot reloading\n  const watchedFiles = new Set();\n  const fileWatchers = new Map();\n  \n  // WebSocket connections for live reload\n  const connections = new Set();\n  \n  const server = createServer(async (req, res) => {\n    try {\n      const url = new URL(req.url, `http://${finalHost}:${finalPort}`);\n      let filePath = url.pathname;\n      \n      // Handle root path\n      if (filePath === '/') {\n        // Prefer .flux/index.html if present\n        const fluxIndex = resolve(root, '.flux', 'index.html');\n        try {\n          await access(fluxIndex);\n          await serveFile(fluxIndex, res);\n          return;\n        } catch {}\n        filePath = '/index.html';\n      }\n      \n      // Remove leading slash\n      filePath = filePath.substring(1);\n      \n      // Security: prevent directory traversal\n      if (filePath.includes('..')) {\n        res.writeHead(403);\n        res.end('Forbidden');\n        return;\n      }\n      \n      const fullPath = resolve(root, filePath);\n      \n      try {\n        const stats = await stat(fullPath);\n        \n        if (stats.isDirectory()) {\n          // Serve index.html for directories\n          const indexPath = join(fullPath, 'index.html');\n          try {\n            await access(indexPath);\n            await serveFile(indexPath, res);\n          } catch {\n            // Special case root: try .flux/index.html\n            if (fullPath === resolve(root)) {\n              const fluxIndex = resolve(root, '.flux', 'index.html');\n              try {\n                await access(fluxIndex);\n                await serveFile(fluxIndex, res);\n                return;\n              } catch {}\n            }\n            // Generate directory listing\n            await serveDirectoryListing(fullPath, res, filePath);\n          }\n        } else {\n          await serveFile(fullPath, res);\n        }\n      } catch (error) {\n        // Try to serve from storage if file not found\n        if (filePath.startsWith('storage/')) {\n          try {\n            await serveStorageFile(filePath, res);\n            return;\n          } catch (storageError) {\n            console.log(`Storage file not found: ${filePath}`);\n          }\n        }\n        \n        // File not found, try to compile Flux files\n        if (filePath.endsWith('.js') && !filePath.includes('node_modules')) {\n          const fluxPath = filePath.replace(/\\.js$/, '.flux');\n          const fullFluxPath = resolve(root, fluxPath);\n          \n          try {\n            await access(fullFluxPath);\n            await compileAndServeFlux(fullFluxPath, res, compiler);\n            return;\n          } catch {\n            // Flux file doesn't exist\n          }\n        }\n        \n        // Try to serve from .flux directory first for HTML and related files\n        if (filePath.endsWith('.html') || filePath.startsWith('.flux/')) {\n          const fluxPath = resolve(root, '.flux', filePath.replace(/^\\.flux\\//, ''));\n          try {\n            await access(fluxPath);\n            await serveFile(fluxPath, res);\n            return;\n          } catch {}\n        }\n\n        // Try to serve from public directory (assets only)\n        const publicPath = resolve(root, 'public', filePath);\n        try {\n          await access(publicPath);\n          await serveFile(publicPath, res);\n        } catch {\n          // 404\n          await serve404(res, filePath);\n        }\n      }\n    } catch (error) {\n      console.error('Server error:', error);\n      res.writeHead(500);\n      res.end('Internal Server Error');\n    }\n  });\n  \n  // WebSocket server for live reload\n  server.on('upgrade', (request, socket, head) => {\n    if (request.url === '/__flux_live_reload') {\n      const ws = new WebSocket();\n      ws.setSocket(socket, request, head);\n      \n      connections.add(ws);\n      \n      ws.on('close', () => {\n        connections.delete(ws);\n      });\n      \n      ws.on('message', (message) => {\n        try {\n          const data = JSON.parse(message);\n          if (data.type === 'ping') {\n            ws.send(JSON.stringify({ type: 'pong' }));\n          }\n        } catch (error) {\n          console.error('WebSocket message error:', error);\n        }\n      });\n    }\n  });\n  \n  server.listen(finalPort, finalHost, () => {\n    console.log(chalk.green(`[ready] Flux dev server at http://${finalHost}:${finalPort}`));\n    console.log(chalk.cyan(`[root] ${root}`));\n    console.log(chalk.blue(`[storage] ${configManager.get('storage.type', 'local')}`));\n    console.log(chalk.yellow(`[hmr] ${hot ? 'enabled' : 'disabled'}`));\n    console.log(chalk.gray(`Press Ctrl+C to stop`));\n  });\n  \n  // Setup file watching\n  await setupFileWatching(root, compiler, connections);\n  \n  return server;\n  \n  } catch (error) {\n    console.error(chalk.red('\u274C Failed to start development server:'), error);\n    throw error;\n  }\n}\n\nasync function serveFile(filePath, res) {\n  const ext = extname(filePath);\n  const mimeType = MIME_TYPES[ext] || 'application/octet-stream';\n  \n  res.setHeader('Content-Type', mimeType);\n  res.setHeader('Cache-Control', 'no-cache');\n  \n  const stream = createReadStream(filePath);\n  stream.pipe(res);\n  \n  stream.on('error', (error) => {\n    console.error('Error reading file:', error);\n    res.writeHead(500);\n    res.end('Error reading file');\n  });\n}\n\nasync function serveDirectoryListing(dirPath, res, urlPath) {\n  try {\n    const files = await readdir(dirPath);\n    \n    res.setHeader('Content-Type', 'text/html');\n    res.writeHead(200);\n    \n    const html = `\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Directory: ${urlPath}</title>\n    <style>\n        body { font-family: monospace; margin: 20px; }\n        .file { margin: 5px 0; }\n        .dir { color: #0066cc; font-weight: bold; }\n        .file a { color: #333; text-decoration: none; }\n        .file a:hover { text-decoration: underline; }\n    </style>\n</head>\n<body>\n    <h2>Directory: ${urlPath}</h2>\n    <div class=\"files\">\n        ${files.map(file => {\n          const isDir = file.includes('.') === false;\n          const className = isDir ? 'dir' : 'file';\n          const href = isDir ? `${file}/` : file;\n          return `<div class=\"${className}\"><a href=\"${href}\">${file}</a></div>`;\n        }).join('')}\n    </div>\n</body>\n</html>`;\n    \n    res.end(html);\n  } catch (error) {\n    res.writeHead(500);\n    res.end('Error reading directory');\n  }\n}\n\nasync function serveStorageFile(filePath, res) {\n  try {\n    // Remove 'storage/' prefix to get the relative path\n    const relativePath = filePath.replace(/^storage\\//, '');\n    \n    // Get file info from storage manager\n    const fileInfo = await storageManager.servePublicFile(relativePath);\n    \n    // Set appropriate headers\n    res.writeHead(200, {\n      'Content-Type': fileInfo.mimeType,\n      'Content-Length': fileInfo.stats.size,\n      'Cache-Control': 'public, max-age=3600' // Cache for 1 hour\n    });\n    \n    // Pipe the file stream to response\n    fileInfo.stream.pipe(res);\n    \n    console.log(chalk.blue(`[storage] Served file: ${filePath}`));\n  } catch (error) {\n    console.error(chalk.red(`\u274C Storage file error: ${error.message}`));\n    res.writeHead(404, { 'Content-Type': 'text/plain' });\n    res.end('File not found');\n  }\n}\n\nasync function compileAndServeFlux(fluxPath, res, compiler) {\n  try {\n    const result = await compiler.compileFile(fluxPath);\n    \n    if (!result) {\n      res.writeHead(500);\n      res.end('Compilation failed');\n      return;\n    }\n    \n    res.setHeader('Content-Type', 'text/javascript');\n    res.setHeader('Cache-Control', 'no-cache');\n    res.writeHead(200);\n    res.end(result.output);\n    \n    console.log(chalk.green(`\u2705 Compiled: ${fluxPath}`));\n  } catch (error) {\n    console.error(chalk.red(`\u274C Compilation error: ${error.message}`));\n    res.writeHead(500);\n    res.end(`Compilation error: ${error.message}`);\n  }\n}\n\nasync function serve404(res, filePath) {\n  res.setHeader('Content-Type', 'text/html');\n  res.writeHead(404);\n  \n  const html = `\n<!DOCTYPE html>\n<html>\n<head>\n    <title>404 - File Not Found</title>\n    <style>\n        body { font-family: monospace; text-align: center; margin: 50px; }\n        .error { color: #e74c3c; font-size: 72px; margin: 20px; }\n        .message { color: #7f8c8d; font-size: 18px; }\n    </style>\n</head>\n<body>\n    <div class=\"error\">404</div>\n    <div class=\"message\">File not found: ${filePath}</div>\n</body>\n</html>`;\n  \n  res.end(html);\n}\n\nasync function setupFileWatching(root, compiler, connections) {\n  // Simple file watching using polling\n  // In production, you'd use chokidar or similar\n  \n  const watchInterval = setInterval(async () => {\n    try {\n      // Check for changes in common directories\n      const dirs = ['src', 'public', 'pages', 'components', 'stores', '.flux'];\n      \n      for (const dir of dirs) {\n        const dirPath = join(root, dir);\n        try {\n          await access(dirPath);\n          // In a real implementation, you'd check file modification times\n          // and trigger recompilation when files change\n        } catch {\n          // Directory doesn't exist, skip\n        }\n      }\n    } catch (error) {\n      console.error('File watching error:', error);\n    }\n  }, 1000);\n  \n  // Cleanup on process exit\n  process.on('SIGINT', () => {\n    clearInterval(watchInterval);\n    process.exit(0);\n  });\n}\n\n// Simple WebSocket implementation for live reload\nclass WebSocket {\n  constructor() {\n    this.socket = null;\n  }\n  \n  setSocket(socket, request, head) {\n    this.socket = socket;\n    \n    // Send WebSocket handshake\n    const key = request.headers['sec-websocket-key'];\n    const accept = this.generateAccept(key);\n    \n    const response = [\n      'HTTP/1.1 101 Switching Protocols',\n      'Upgrade: websocket',\n      'Connection: Upgrade',\n      `Sec-WebSocket-Accept: ${accept}`,\n      '',\n      ''\n    ].join('\\r\\n');\n    \n    socket.write(response);\n    \n    socket.on('data', (data) => {\n      this.handleMessage(data);\n    });\n    \n    socket.on('close', () => {\n      this.socket = null;\n    });\n  }\n  \n  generateAccept(key) {\n    const crypto = require('crypto');\n    const magic = '258EAFA5-E914-47DA-95CA-C5AB0DC85B11';\n    const hash = crypto.createHash('sha1').update(key + magic).digest('base64');\n    return hash;\n  }\n  \n  handleMessage(data) {\n    // Simple WebSocket frame parsing\n    if (data.length < 2) return;\n    \n    const opcode = data[0] & 0x0F;\n    const payloadLength = data[1] & 0x7F;\n    \n    if (opcode === 8) { // Close frame\n      this.socket.end();\n      return;\n    }\n    \n    if (opcode === 1 && payloadLength > 0) { // Text frame\n      const payload = data.slice(2, 2 + payloadLength);\n      const message = payload.toString('utf8');\n      \n      this.emit('message', message);\n    }\n  }\n  \n  send(data) {\n    if (this.socket && !this.socket.destroyed) {\n      const message = typeof data === 'string' ? data : JSON.stringify(data);\n      const frame = this.createFrame(message);\n      this.socket.write(frame);\n    }\n  }\n  \n  createFrame(payload) {\n    const length = Buffer.byteLength(payload);\n    const frame = Buffer.alloc(2 + length);\n    \n    frame[0] = 0x81; // FIN + text frame\n    frame[1] = length;\n    frame.write(payload, 2);\n    \n    return frame;\n  }\n  \n  on(event, callback) {\n    if (event === 'message') {\n      this.messageCallback = callback;\n    } else if (event === 'close') {\n      this.closeCallback = callback;\n    }\n  }\n  \n  emit(event, data) {\n    if (event === 'message' && this.messageCallback) {\n      this.messageCallback(data);\n    } else if (event === 'close' && this.closeCallback) {\n      this.closeCallback();\n    }\n  }\n}", "#!/usr/bin/env node\n\nimport { Command } from 'commander';\nimport chalk from 'chalk';\nimport { FluxCompiler } from '../compiler/index.js';\nimport { FluxRuntime, FluxCache, FluxWebSocket } from '../runtime/index.js';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nclass AdvancedCLI {\n  constructor() {\n    this.program = new Command();\n    this.compiler = new FluxCompiler();\n    this.setupCommands();\n  }\n\n  setupCommands() {\n    this.program\n      .name('flux')\n      .description('Advanced Flux Language CLI with enhanced features')\n      .version('2.0.0');\n\n    // Project management\n    this.program\n      .command('new <project-name>')\n      .description('Create a new Flux project with advanced templates')\n      .option('-t, --template <template>', 'Project template (basic, fullstack, api, spa)', 'basic')\n      .option('-y, --yes', 'Skip prompts and use defaults')\n      .option('--typescript', 'Enable TypeScript support')\n      .option('--testing', 'Include testing setup')\n      .option('--linting', 'Include linting configuration')\n      .action(this.createProject.bind(this));\n\n    // Development\n    this.program\n      .command('dev')\n      .description('Start development server with advanced features')\n      .option('-p, --port <port>', 'Port number', '3000')\n      .option('-h, --host <host>', 'Host address', 'localhost')\n      .option('--hot', 'Enable hot module replacement')\n      .option('--analyze', 'Enable bundle analysis')\n      .option('--profile', 'Enable performance profiling')\n      .action(this.startDevServer.bind(this));\n\n    // Building\n    this.program\n      .command('build')\n      .description('Build project with advanced optimizations')\n      .option('-o, --output <dir>', 'Output directory', 'dist')\n      .option('--minify', 'Minify output')\n      .option('--source-maps', 'Generate source maps')\n      .option('--analyze', 'Analyze bundle')\n      .option('--watch', 'Watch mode')\n      .action(this.buildProject.bind(this));\n\n    // Testing\n    this.program\n      .command('test')\n      .description('Run tests with advanced features')\n      .option('--watch', 'Watch mode')\n      .option('--coverage', 'Generate coverage report')\n      .option('--parallel', 'Run tests in parallel')\n      .option('--grep <pattern>', 'Run tests matching pattern')\n      .action(this.runTests.bind(this));\n\n    // Debugging\n    this.program\n      .command('debug')\n      .description('Debug application with advanced tools')\n      .option('--inspect', 'Enable Node.js inspector')\n      .option('--break-on-error', 'Break on first error')\n      .option('--profile', 'Generate CPU profile')\n      .option('--heap', 'Generate heap snapshot')\n      .action(this.debugApplication.bind(this));\n\n    // Performance\n    this.program\n      .command('profile')\n      .description('Profile application performance')\n      .option('--cpu', 'CPU profiling')\n      .option('--memory', 'Memory profiling')\n      .option('--network', 'Network profiling')\n      .option('--output <file>', 'Output file for results')\n      .action(this.profileApplication.bind(this));\n\n    // Database\n    this.program\n      .command('db')\n      .description('Database management commands')\n      .option('--migrate', 'Run migrations')\n      .option('--seed', 'Seed database')\n      .option('--reset', 'Reset database')\n      .action(this.manageDatabase.bind(this));\n\n    // Deployment\n    this.program\n      .command('deploy')\n      .description('Deploy application')\n      .option('--env <environment>', 'Deployment environment', 'production')\n      .option('--platform <platform>', 'Deployment platform')\n      .option('--region <region>', 'Deployment region')\n      .action(this.deployApplication.bind(this));\n\n    // Maintenance\n    this.program\n      .command('maintenance')\n      .description('Maintenance and utility commands')\n      .option('--clean', 'Clean build artifacts')\n      .option('--update', 'Update dependencies')\n      .option('--audit', 'Security audit')\n      .action(this.maintenanceTasks.bind(this));\n\n    // Code generation\n    this.program\n      .command('generate <type> <name>')\n      .alias('g')\n      .description('Generate boilerplate: component|page|store')\n      .option('-d, --dir <dir>', 'Directory to place the generated file')\n      .action(this.generateArtifact.bind(this));\n  }\n\n  async createProject(projectName, options) {\n    console.log(chalk.blue(`[new] Creating Flux project: ${projectName}`));\n    \n    try {\n      const projectDir = path.resolve(projectName);\n      \n      if (await fs.pathExists(projectDir)) {\n        console.error(chalk.red(`Directory ${projectName} already exists`));\n        process.exit(1);\n      }\n\n      await fs.ensureDir(projectDir);\n      \n      // Create project structure based on template\n      await this.createProjectStructure(projectDir, options.template, options);\n      \n      // Install dependencies\n      await this.installDependencies(projectDir, options);\n      \n      console.log(chalk.green(`[ok] Project ${projectName} created`));\n      console.log(chalk.cyan(`[dir] ${projectDir}`));\n      console.log(chalk.yellow(`[next]`));\n      console.log(chalk.yellow(`   cd ${projectName}`));\n      console.log(chalk.yellow(`   npm run dev`));\n      \n    } catch (error) {\n      console.error(chalk.red('Error creating project:'), error);\n      process.exit(1);\n    }\n  }\n\n  async createProjectStructure(projectDir, template, options) {\n    const templates = {\n      basic: this.createBasicTemplate.bind(this),\n      fullstack: this.createFullstackTemplate.bind(this),\n      api: this.createAPITemplate.bind(this),\n      spa: this.createSPATemplate.bind(this)\n    };\n\n    const templateFn = templates[template] || templates.basic;\n    await templateFn(projectDir, options);\n  }\n\n  async createBasicTemplate(projectDir, options) {\n    const files = {\n      'package.json': this.generatePackageJson(options),\n      'flux.config.js': this.generateFluxConfig(options),\n      'README.md': this.generateREADME(options),\n      'src/app.flux': this.generateAppFlux(options),\n      'src/components/Header.flux': this.generateHeaderComponent(),\n      'src/components/Footer.flux': this.generateFooterComponent(),\n      'src/pages/home.flux': this.generateHomePage(),\n      'src/styles/global.css': this.generateGlobalCSS(),\n      '.gitignore': this.generateGitignore(),\n      '.flux/index.html': this.generateIndexHTML()\n    };\n\n    for (const [filename, content] of Object.entries(files)) {\n      const filePath = path.join(projectDir, filename);\n      await fs.ensureDir(path.dirname(filePath));\n      await fs.writeFile(filePath, content);\n    }\n  }\n\n  async createFullstackTemplate(projectDir, options) {\n    // Create basic structure first\n    await this.createBasicTemplate(projectDir, options);\n    \n    // Add fullstack-specific files\n    const fullstackFiles = {\n      'src/server/index.js': this.generateServerFile(),\n      'src/database/schema.js': this.generateDatabaseSchema(),\n      'src/api/routes.js': this.generateAPIRoutes(),\n      'src/middleware/auth.js': this.generateAuthMiddleware(),\n      'docker-compose.yml': this.generateDockerCompose(),\n      'src/config/database.js': this.generateDatabaseConfig()\n    };\n\n    for (const [filename, content] of Object.entries(fullstackFiles)) {\n      const filePath = path.join(projectDir, filename);\n      await fs.ensureDir(path.dirname(filePath));\n      await fs.writeFile(filePath, content);\n    }\n  }\n\n  async createAPITemplate(projectDir, options) {\n    const apiFiles = {\n      'package.json': this.generateAPIPackageJson(options),\n      'src/server.js': this.generateAPIServer(),\n      'src/routes/index.js': this.generateAPIRoutes(),\n      'src/controllers/index.js': this.generateAPIControllers(),\n      'src/models/index.js': this.generateAPIModels(),\n      'src/middleware/index.js': this.generateAPIMiddleware(),\n      'src/config/index.js': this.generateAPIConfig(),\n      'tests/api.test.js': this.generateAPITests(),\n      '.env.example': this.generateEnvExample(),\n      'README.md': this.generateAPIREADME()\n    };\n\n    for (const [filename, content] of Object.entries(apiFiles)) {\n      const filePath = path.join(projectDir, filename);\n      await fs.ensureDir(path.dirname(filePath));\n      await fs.writeFile(filePath, content);\n    }\n  }\n\n  async createSPATemplate(projectDir, options) {\n    // Create basic structure first\n    await this.createBasicTemplate(projectDir, options);\n    \n    // Add SPA-specific files\n    const spaFiles = {\n      'src/router/index.js': this.generateSPARouter(),\n      'src/store/index.js': this.generateSPAStore(),\n      'src/utils/api.js': this.generateSPAAPI(),\n      'src/components/Layout.flux': this.generateSPALayout(),\n      'src/pages/about.flux': this.generateAboutPage(),\n      'src/pages/contact.flux': this.generateContactPage(),\n      'src/styles/components.css': this.generateComponentCSS()\n    };\n\n    for (const [filename, content] of Object.entries(spaFiles)) {\n      const filePath = path.join(projectDir, filename);\n      await fs.ensureDir(path.dirname(filePath));\n      await fs.writeFile(filePath, content);\n    }\n  }\n\n  async installDependencies(projectDir, options) {\n    console.log(chalk.blue('[deps] Installing dependencies...'));\n    \n    const packageManager = this.detectPackageManager();\n    const installCmd = packageManager === 'npm' ? 'npm install' : 'yarn install';\n    \n    // Change to project directory and install\n    process.chdir(projectDir);\n    \n    try {\n      const { execSync } = await import('child_process');\n      execSync(installCmd, { stdio: 'inherit' });\n    } catch (error) {\n      console.warn(chalk.yellow('[warn] Could not install dependencies automatically'));\n      console.warn(chalk.yellow(`[hint] Run '${installCmd}' manually`));\n    }\n  }\n\n  detectPackageManager() {\n    if (fs.pathExistsSync('yarn.lock')) return 'yarn';\n    if (fs.pathExistsSync('pnpm-lock.yaml')) return 'pnpm';\n    return 'npm';\n  }\n\n  async startDevServer(options) {\n    console.log(chalk.blue('[dev] Starting development server...'));\n    \n    try {\n      // Start the dev server with advanced features\n      const devServer = await import('./dev-server.js');\n      await devServer.devServer({\n        port: parseInt(options.port),\n        host: options.host,\n        hot: options.hot,\n        analyze: options.analyze,\n        profile: options.profile\n      });\n    } catch (error) {\n      console.error(chalk.red('Error starting dev server:'), error);\n      process.exit(1);\n    }\n  }\n\n  async buildProject(options) {\n    console.log(chalk.blue('[build] Building project...'));\n    \n    try {\n      const compiler = new FluxCompiler({\n        outputDir: options.output,\n        minify: options.minify,\n        sourceMaps: options.sourceMaps,\n        analyze: options.analyze\n      });\n\n      const results = await compiler.build();\n      \n      if (options.analyze) {\n        await this.analyzeBundle(results);\n      }\n      \n      console.log(chalk.green('[ok] Build completed'));\n      \n    } catch (error) {\n      console.error(chalk.red('Build failed:'), error);\n      process.exit(1);\n    }\n  }\n\n  async runTests(options) {\n    console.log(chalk.blue('[test] Running tests...'));\n    \n    try {\n      // Run test suite with advanced features\n      const testRunner = await import('../test/run-tests.js');\n      await testRunner.runTests(options);\n    } catch (error) {\n      console.error(chalk.red('Tests failed:'), error);\n      process.exit(1);\n    }\n  }\n\n  async debugApplication(options) {\n    console.log(chalk.blue('[debug] Starting debug session...'));\n    \n    try {\n      // Start debugging session\n      if (options.inspect) {\n        process.env.NODE_OPTIONS = '--inspect-brk';\n      }\n      \n      // Start the application in debug mode\n      console.log(chalk.green('[ok] Debug session started'));\n      console.log(chalk.yellow('[hint] Use your debugger to connect'));\n      \n    } catch (error) {\n      console.error(chalk.red('Debug session failed:'), error);\n      process.exit(1);\n    }\n  }\n\n  async profileApplication(options) {\n    console.log(chalk.blue('[profile] Starting performance profiling...'));\n    \n    try {\n      // Start profiling based on options\n      if (options.cpu) {\n        await this.startCPUProfiling(options.output);\n      }\n      \n      if (options.memory) {\n        await this.startMemoryProfiling(options.output);\n      }\n      \n      if (options.network) {\n        await this.startNetworkProfiling(options.output);\n      }\n      \n      console.log(chalk.green('[ok] Profiling started'));\n      \n    } catch (error) {\n      console.error(chalk.red('Profiling failed:'), error);\n      process.exit(1);\n    }\n  }\n\n  async manageDatabase(options) {\n    console.log(chalk.blue('[db] Managing database...'));\n    \n    try {\n      if (options.migrate) {\n        await this.runMigrations();\n      }\n      \n      if (options.seed) {\n        await this.seedDatabase();\n      }\n      \n      if (options.reset) {\n        await this.resetDatabase();\n      }\n      \n      console.log(chalk.green('[ok] Database operations completed'));\n      \n    } catch (error) {\n      console.error(chalk.red('Database operations failed:'), error);\n      process.exit(1);\n    }\n  }\n\n  async deployApplication(options) {\n    console.log(chalk.blue('[deploy] Deploying application...'));\n    \n    try {\n      // Build the project first\n      await this.buildProject({ output: 'dist' });\n      \n      // Deploy based on platform\n      if (options.platform === 'vercel') {\n        await this.deployToVercel(options);\n      } else if (options.platform === 'netlify') {\n        await this.deployToNetlify(options);\n      } else if (options.platform === 'aws') {\n        await this.deployToAWS(options);\n      } else {\n        console.log(chalk.yellow('[warn] No deployment platform specified'));\n      }\n      \n      console.log(chalk.green('[ok] Deployment completed'));\n      \n    } catch (error) {\n      console.error(chalk.red('Deployment failed:'), error);\n      process.exit(1);\n    }\n  }\n\n  async maintenanceTasks(options) {\n    console.log(chalk.blue('[maint] Running maintenance tasks...'));\n    \n    try {\n      if (options.clean) {\n        await this.cleanBuildArtifacts();\n      }\n      \n      if (options.update) {\n        await this.updateDependencies();\n      }\n      \n      if (options.audit) {\n        await this.securityAudit();\n      }\n      \n      console.log(chalk.green('[ok] Maintenance tasks completed'));\n      \n    } catch (error) {\n      console.error(chalk.red('Maintenance tasks failed:'), error);\n      process.exit(1);\n    }\n  }\n\n  // Template generation methods\n  generatePackageJson(options) {\n    return JSON.stringify({\n      name: \"flux-project\",\n      version: \"1.0.0\",\n      description: \"Flux Language Project\",\n      main: \"src/app.flux\",\n      scripts: {\n        \"dev\": \"flux dev\",\n        \"build\": \"flux build\",\n        \"test\": \"flux test\",\n        \"start\": \"flux start\"\n      },\n      dependencies: {\n        \"flux-lang\": \"^2.0.0\"\n      },\n      devDependencies: {\n        \"@types/node\": \"^18.0.0\"\n      }\n    }, null, 2);\n  }\n\n  generateFluxConfig(options) {\n    return `export default {\n  target: 'js',\n  minify: false,\n  sourceMaps: true,\n  optimizations: true,\n  treeShaking: true,\n  codeSplitting: false,\n  appDir: '.flux',\n  publicDir: 'public'\n};`;\n  }\n\n  generateREADME(options) {\n    return `# Flux Project\n\nThis is a Flux Language project created with the advanced CLI.\n\n## Getting Started\n\n\\`\\`\\`bash\nnpm run dev\n\\`\\`\\`\n\n## Available Scripts\n\n- \\`npm run dev\\` - Start development server\n- \\`npm run build\\` - Build for production\n- \\`npm run test\\` - Run tests\n`;\n  }\n\n  generateAppFlux(options) {\n    return `component App {\n  state title = \"Welcome to Flux!\"\n  \n  render {\n    <div class=\"app\">\n      <Header />\n      <main>\n        <h1>{title}</h1>\n        <p>Your Flux application is running!</p>\n      </main>\n      <Footer />\n    </div>\n  }\n}\n\nexport default App;`;\n  }\n\n  generateHeaderComponent() {\n    return `component Header {\n  render {\n    <header class=\"header\">\n      <h1>Flux App</h1>\n      <nav>\n        <a href=\"/\">Home</a>\n        <a href=\"/about\">About</a>\n      </nav>\n    </header>\n  }\n}`;\n  }\n\n  generateFooterComponent() {\n    return `component Footer {\n  render {\n    <footer class=\"footer\">\n      <p>&copy; 2024 Flux App</p>\n    </footer>\n  }\n}`;\n  }\n\n  generateHomePage() {\n    return `component HomePage {\n  render {\n    <div class=\"home\">\n      <h2>Welcome Home</h2>\n      <p>This is your home page.</p>\n    </div>\n  }\n}`;\n  }\n\n  generateGlobalCSS() {\n    return `/* Global styles */\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n  line-height: 1.6;\n  color: #333;\n}\n\n.app {\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n}\n\n.header {\n  background: #2c3e50;\n  color: white;\n  padding: 1rem;\n}\n\n.footer {\n  background: #34495e;\n  color: white;\n  padding: 1rem;\n  margin-top: auto;\n}`;\n  }\n\n  generateGitignore() {\n    return `node_modules/\\ndist/\\n.env\\n*.log\\n.DS_Store`;\n  }\n\n  generateIndexHTML() {\n    return `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Flux App</title>\n</head>\n<body>\n    <div id=\"root\"></div>\n    <script type=\"module\" src=\"../src/app.flux\"></script>\n</body>\n</html>`;\n  }\n\n  // Additional template methods would go here...\n  generateServerFile() { return '// Server implementation'; }\n  generateDatabaseSchema() { return '// Database schema'; }\n  generateAPIRoutes() { return '// API routes'; }\n  generateAuthMiddleware() { return '// Auth middleware'; }\n  generateDockerCompose() { return '// Docker compose'; }\n  generateDatabaseConfig() { return '// Database config'; }\n  generateAPIPackageJson() { return '{}'; }\n  generateAPIServer() { return '// API server'; }\n  generateAPIControllers() { return '// API controllers'; }\n  generateAPIModels() { return '// API models'; }\n  generateAPIMiddleware() { return '// API middleware'; }\n  generateAPIConfig() { return '// API config'; }\n  generateAPITests() { return '// API tests'; }\n  generateEnvExample() { return '// Environment variables'; }\n  generateAPIREADME() { return '// API README'; }\n  generateSPARouter() { return '// SPA router'; }\n  generateSPAStore() { return '// SPA store'; }\n  generateSPAAPI() { return '// SPA API'; }\n  generateSPALayout() { return '// SPA layout'; }\n  generateAboutPage() { return '// About page'; }\n  generateContactPage() { return '// Contact page'; }\n  generateComponentCSS() { return '// Component CSS'; }\n\n  // Profiling methods\n  async startCPUProfiling(output) {\n    // CPU profiling implementation\n    console.log('[profile] CPU profiling started');\n  }\n\n  async startMemoryProfiling(output) {\n    // Memory profiling implementation\n    console.log('[profile] Memory profiling started');\n  }\n\n  async startNetworkProfiling(output) {\n    // Memory profiling implementation\n    console.log('[profile] Network profiling started');\n  }\n\n  // Database methods\n  async runMigrations() {\n    console.log('[db] Running migrations...');\n  }\n\n  async seedDatabase() {\n    console.log('[db] Seeding database...');\n  }\n\n  async resetDatabase() {\n    console.log('[db] Resetting database...');\n  }\n\n  // Deployment methods\n  async deployToVercel(options) {\n    console.log('[deploy] Vercel...');\n  }\n\n  async deployToNetlify(options) {\n    console.log('[deploy] Netlify...');\n  }\n\n  async deployToAWS(options) {\n    console.log('[deploy] AWS...');\n  }\n\n  // Maintenance methods\n  async cleanBuildArtifacts() {\n    console.log('[maint] Cleaning build artifacts...');\n  }\n\n  async updateDependencies() {\n    console.log('[maint] Updating dependencies...');\n  }\n\n  async securityAudit() {\n    console.log('[maint] Running security audit...');\n  }\n\n  // Bundle analysis\n  async analyzeBundle(results) {\n    console.log('[analyze] Bundle...');\n    // Implementation would analyze the build results\n  }\n\n  async generateArtifact(type, name, options) {\n    const cwd = process.cwd();\n    const targetDir = options.dir ? path.resolve(options.dir) : path.resolve(cwd, 'src',\n      type === 'page' ? 'pages' : type === 'store' ? 'stores' : 'components');\n    await fs.ensureDir(targetDir);\n    const fileName = type === 'store' ? `${name}.flux` : `${capitalize(name)}.flux`;\n    const filePath = path.join(targetDir, fileName);\n    if (await fs.pathExists(filePath)) {\n      console.log(chalk.yellow('[skip] File exists:'), filePath);\n      return;\n    }\n    const content = this.scaffold(type, name);\n    await fs.writeFile(filePath, content);\n    console.log(chalk.green('[ok] Generated:'), filePath);\n  }\n\n  scaffold(type, name) {\n    const compName = capitalize(name);\n    if (type === 'component') {\n      return `component ${compName} {\\n  render {\\n    <div class=\\\"${kebab(compName)}\\\">${compName}</div>\\n  }\\n}`;\n    }\n    if (type === 'page') {\n      return `@route(\\\"/${kebab(compName)}\\\")\\ncomponent ${compName}Page {\\n  render {\\n    <div class=\\\"page ${kebab(compName)}\\\">${compName} Page</div>\\n  }\\n}`;\n    }\n    if (type === 'store') {\n      return `store ${compName}Store {\\n  state value = null\\n}`;\n    }\n    return `// Unknown type`;\n  }\n\n  run() {\n    this.program.parse();\n  }\n}\n\nfunction capitalize(s) {\n  return s && s.length ? s.charAt(0).toUpperCase() + s.slice(1) : s;\n}\n\nfunction kebab(s) {\n  return s\n    .replace(/([a-z])([A-Z])/g, '$1-$2')\n    .replace(/\\s+/g, '-')\n    .toLowerCase();\n}\n\n// Run the CLI if this file is executed directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  const cli = new AdvancedCLI();\n  cli.run();\n}\n\nexport { AdvancedCLI };"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA,IAGa;AAHb;AAAA;AAGO,IAAM,YAAN,MAAM,WAAU;AAAA,MACrB,YAAY,QAAQ;AAClB,aAAK,SAAS;AACd,aAAK,WAAW;AAChB,aAAK,QAAQ;AACb,aAAK,OAAO;AACZ,aAAK,SAAS;AACd,aAAK,SAAS,CAAC;AACf,aAAK,SAAS,CAAC;AAAA,MACjB;AAAA;AAAA,MAGA,OAAO,cAAc;AAAA;AAAA,QAEnB,YAAY;AAAA,QACZ,QAAQ;AAAA,QACR,QAAQ;AAAA,QACR,SAAS;AAAA;AAAA,QAGT,WAAW;AAAA,QACX,OAAO;AAAA,QACP,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,QAAQ;AAAA,QACR,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,OAAO;AAAA,QACP,QAAQ;AAAA,QACR,WAAW;AAAA,QACX,OAAO;AAAA,QACP,QAAQ;AAAA,QACR,OAAO;AAAA,QACP,KAAK;AAAA,QACL,QAAQ;AAAA,QACR,QAAQ;AAAA,QACR,OAAO;AAAA,QACP,OAAO;AAAA,QACP,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,KAAK;AAAA,QACL,OAAO;AAAA,QACP,QAAQ;AAAA,QACR,KAAK;AAAA,QACL,OAAO;AAAA,QACP,SAAS;AAAA;AAAA,QAGT,QAAQ;AAAA,QACR,aAAa;AAAA,QACb,cAAc;AAAA,QACd,MAAM;AAAA,QACN,OAAO;AAAA,QACP,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,QAAQ;AAAA,QACR,QAAQ;AAAA,QACR,YAAY;AAAA,QACZ,WAAW;AAAA,QACX,cAAc;AAAA,QACd,YAAY;AAAA,QACZ,eAAe;AAAA,QACf,aAAa;AAAA,QACb,YAAY;AAAA,QACZ,aAAa;AAAA;AAAA,QAGb,YAAY;AAAA,QACZ,aAAa;AAAA,QACb,YAAY;AAAA,QACZ,aAAa;AAAA,QACb,cAAc;AAAA,QACd,eAAe;AAAA,QACf,WAAW;AAAA,QACX,OAAO;AAAA,QACP,KAAK;AAAA,QACL,OAAO;AAAA,QACP,UAAU;AAAA;AAAA,QAGV,UAAU;AAAA,QACV,WAAW;AAAA,QACX,gBAAgB;AAAA,QAChB,UAAU;AAAA;AAAA,QAGV,IAAI;AAAA;AAAA,QAGJ,SAAS;AAAA,QACT,KAAK;AAAA,QACL,SAAS;AAAA,MACX;AAAA,MAEA,OAAO,WAAW;AAAA,QAChB,aAAa;AAAA,QACb,SAAS;AAAA,QACT,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,UAAU;AAAA,QACV,UAAU;AAAA,QACV,YAAY;AAAA,QACZ,SAAS;AAAA,QACT,UAAU;AAAA,QACV,aAAa;AAAA,QACb,SAAS;AAAA,QACT,UAAU;AAAA,QACV,SAAS;AAAA,QACT,OAAO;AAAA,QACP,UAAU;AAAA,QACV,UAAU;AAAA,QACV,SAAS;AAAA,QACT,SAAS;AAAA,QACT,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,OAAO;AAAA,QACP,SAAS;AAAA,QACT,UAAU;AAAA,QACV,OAAO;AAAA,QACP,SAAS;AAAA,QACT,WAAW;AAAA,QACX,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,QAAQ;AAAA,QACR,aAAa;AAAA,MACf;AAAA,MAEA,WAAW;AACT,eAAO,CAAC,KAAK,QAAQ,GAAG;AACtB,eAAK,UAAU;AAAA,QACjB;AAEA,aAAK,SAAS,WAAU,YAAY,GAAG;AACvC,eAAO,KAAK;AAAA,MACd;AAAA,MAEA,YAAY;AACV,aAAK,QAAQ,KAAK;AAClB,cAAM,IAAI,KAAK,QAAQ;AAEvB,gBAAQ,GAAG;AAAA,UACT,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AACH;AAAA;AAAA,UAEF,KAAK;AACH,iBAAK;AACL,iBAAK,SAAS;AACd,iBAAK,SAAS,WAAU,YAAY,OAAO;AAC3C;AAAA,UAEF,KAAK;AACH,iBAAK,SAAS,WAAU,YAAY,UAAU;AAC9C;AAAA,UACF,KAAK;AACH,iBAAK,SAAS,WAAU,YAAY,WAAW;AAC/C;AAAA,UACF,KAAK;AACH,iBAAK,SAAS,WAAU,YAAY,UAAU;AAC9C;AAAA,UACF,KAAK;AACH,iBAAK,SAAS,WAAU,YAAY,WAAW;AAC/C;AAAA,UACF,KAAK;AACH,iBAAK,SAAS,WAAU,YAAY,YAAY;AAChD;AAAA,UACF,KAAK;AACH,iBAAK,SAAS,WAAU,YAAY,aAAa;AACjD;AAAA,UACF,KAAK;AACH,iBAAK,SAAS,WAAU,YAAY,SAAS;AAC7C;AAAA,UACF,KAAK;AACH,iBAAK,SAAS,WAAU,YAAY,KAAK;AACzC;AAAA,UACF,KAAK;AACH,iBAAK,SAAS,WAAU,YAAY,GAAG;AACvC;AAAA,UACF,KAAK;AACH,iBAAK,SAAS,WAAU,YAAY,KAAK;AACzC;AAAA,UACF,KAAK;AACH,iBAAK,SAAS,WAAU,YAAY,QAAQ;AAC5C;AAAA,UACF,KAAK;AACH,iBAAK,SAAS,WAAU,YAAY,EAAE;AACtC;AAAA,UAEF,KAAK;AACH,iBAAK;AAAA,cAAS,KAAK,MAAM,GAAG,IAC1B,WAAU,YAAY,cACtB,WAAU,YAAY;AAAA,YACxB;AACA;AAAA,UACF,KAAK;AACH,iBAAK;AAAA,cAAS,KAAK,MAAM,GAAG,IAC1B,WAAU,YAAY,eACtB,WAAU,YAAY;AAAA,YACxB;AACA;AAAA,UACF,KAAK;AACH,iBAAK,SAAS,WAAU,YAAY,QAAQ;AAC5C;AAAA,UACF,KAAK;AACH,iBAAK,SAAS,WAAU,YAAY,MAAM;AAC1C;AAAA,UAEF,KAAK;AACH,iBAAK;AAAA,cAAS,KAAK,MAAM,GAAG,IAC1B,WAAU,YAAY,aACtB,WAAU,YAAY;AAAA,YACxB;AACA;AAAA,UACF,KAAK;AACH,iBAAK;AAAA,cAAS,KAAK,MAAM,GAAG,IAC1B,WAAU,YAAY,SACtB,WAAU,YAAY;AAAA,YACxB;AACA;AAAA,UACF,KAAK;AACH,gBAAI,KAAK,KAAK,MAAM,KAAK;AACvB,mBAAK,QAAQ;AACb,mBAAK,SAAS,WAAU,YAAY,SAAS;AAAA,YAC/C,WAAW,KAAK,MAAM,GAAG,GAAG;AAC1B,mBAAK,SAAS,WAAU,YAAY,UAAU;AAAA,YAChD,OAAO;AACL,mBAAK,SAAS,WAAU,YAAY,QAAQ;AAAA,YAC9C;AACA;AAAA,UACF,KAAK;AACH,iBAAK;AAAA,cAAS,KAAK,MAAM,GAAG,IAC1B,WAAU,YAAY,gBACtB,WAAU,YAAY;AAAA,YACxB;AACA;AAAA,UAEF,KAAK;AACH,gBAAI,KAAK,MAAM,GAAG,GAAG;AACnB,mBAAK,SAAS,WAAU,YAAY,WAAW;AAAA,YACjD;AACA;AAAA,UACF,KAAK;AACH,gBAAI,KAAK,MAAM,GAAG,GAAG;AACnB,mBAAK,SAAS,WAAU,YAAY,UAAU;AAAA,YAChD;AACA;AAAA,UAEF,KAAK;AACH,gBAAI,KAAK,MAAM,GAAG,GAAG;AAEnB,qBAAO,KAAK,KAAK,MAAM,QAAQ,CAAC,KAAK,QAAQ,GAAG;AAC9C,qBAAK,QAAQ;AAAA,cACf;AAAA,YACF,WAAW,KAAK,MAAM,GAAG,GAAG;AAE1B,mBAAK,aAAa;AAAA,YACpB,WAAW,KAAK,MAAM,GAAG,GAAG;AAC1B,mBAAK,SAAS,WAAU,YAAY,cAAc;AAAA,YACpD,OAAO;AACL,mBAAK,SAAS,WAAU,YAAY,MAAM;AAAA,YAC5C;AACA;AAAA,UAEF,KAAK;AAAA,UACL,KAAK;AACH,iBAAK,OAAO,CAAC;AACb;AAAA,UAEF;AACE,gBAAI,KAAK,QAAQ,CAAC,GAAG;AACnB,mBAAK,OAAO;AAAA,YACd,WAAW,KAAK,QAAQ,CAAC,GAAG;AAC1B,mBAAK,WAAW;AAAA,YAClB,OAAO;AACL,mBAAK,SAAS,WAAU,YAAY,SAAS,CAAC;AAAA,YAChD;AACA;AAAA,QACJ;AAAA,MACF;AAAA,MAEA,aAAa;AACX,eAAO,KAAK,eAAe,KAAK,KAAK,CAAC,GAAG;AACvC,eAAK,QAAQ;AAAA,QACf;AAEA,cAAM,OAAO,KAAK,OAAO,UAAU,KAAK,OAAO,KAAK,QAAQ;AAC5D,cAAM,OAAO,WAAU,SAAS,IAAI,KAAK,WAAU,YAAY;AAC/D,aAAK,SAAS,MAAM,IAAI;AAAA,MAC1B;AAAA,MAEA,SAAS;AACP,eAAO,KAAK,QAAQ,KAAK,KAAK,CAAC,GAAG;AAChC,eAAK,QAAQ;AAAA,QACf;AAGA,YAAI,KAAK,KAAK,MAAM,OAAO,KAAK,QAAQ,KAAK,SAAS,CAAC,GAAG;AACxD,eAAK,QAAQ;AACb,iBAAO,KAAK,QAAQ,KAAK,KAAK,CAAC,GAAG;AAChC,iBAAK,QAAQ;AAAA,UACf;AAAA,QACF;AAEA,cAAM,QAAQ,WAAW,KAAK,OAAO,UAAU,KAAK,OAAO,KAAK,QAAQ,CAAC;AACzE,aAAK,SAAS,WAAU,YAAY,QAAQ,KAAK;AAAA,MACnD;AAAA,MAEA,OAAO,OAAO;AACZ,eAAO,KAAK,KAAK,MAAM,SAAS,CAAC,KAAK,QAAQ,GAAG;AAC/C,cAAI,KAAK,KAAK,MAAM,KAAM,MAAK;AAC/B,eAAK,QAAQ;AAAA,QACf;AAEA,YAAI,KAAK,QAAQ,GAAG;AAClB,gBAAM,IAAI,MAAM,+BAA+B,KAAK,IAAI,EAAE;AAAA,QAC5D;AAEA,aAAK,QAAQ;AAEb,cAAM,QAAQ,KAAK,OAAO,UAAU,KAAK,QAAQ,GAAG,KAAK,WAAW,CAAC;AACrE,aAAK,SAAS,WAAU,YAAY,QAAQ,KAAK;AAAA,MACnD;AAAA,MAEA,eAAe;AACb,eAAO,CAAC,KAAK,QAAQ,GAAG;AACtB,cAAI,KAAK,KAAK,MAAM,OAAO,KAAK,SAAS,MAAM,KAAK;AAClD,iBAAK,QAAQ;AACb,iBAAK,QAAQ;AACb;AAAA,UACF;AACA,cAAI,KAAK,KAAK,MAAM,KAAM,MAAK;AAC/B,eAAK,QAAQ;AAAA,QACf;AAAA,MACF;AAAA,MAEA,MAAM,UAAU;AACd,YAAI,KAAK,QAAQ,EAAG,QAAO;AAC3B,YAAI,KAAK,OAAO,OAAO,KAAK,QAAQ,MAAM,SAAU,QAAO;AAE3D,aAAK;AACL,aAAK;AACL,eAAO;AAAA,MACT;AAAA,MAEA,OAAO;AACL,YAAI,KAAK,QAAQ,EAAG,QAAO;AAC3B,eAAO,KAAK,OAAO,OAAO,KAAK,QAAQ;AAAA,MACzC;AAAA,MAEA,WAAW;AACT,YAAI,KAAK,WAAW,KAAK,KAAK,OAAO,OAAQ,QAAO;AACpD,eAAO,KAAK,OAAO,OAAO,KAAK,WAAW,CAAC;AAAA,MAC7C;AAAA,MAEA,QAAQ,GAAG;AACT,eAAQ,KAAK,OAAO,KAAK,OACjB,KAAK,OAAO,KAAK,OAClB,MAAM;AAAA,MACf;AAAA,MAEA,eAAe,GAAG;AAChB,eAAO,KAAK,QAAQ,CAAC,KAAK,KAAK,QAAQ,CAAC;AAAA,MAC1C;AAAA,MAEA,QAAQ,GAAG;AACT,eAAO,KAAK,OAAO,KAAK;AAAA,MAC1B;AAAA,MAEA,UAAU;AACR,eAAO,KAAK,YAAY,KAAK,OAAO;AAAA,MACtC;AAAA,MAEA,UAAU;AACR,aAAK;AACL,eAAO,KAAK,OAAO,OAAO,KAAK,UAAU;AAAA,MAC3C;AAAA,MAEA,SAAS,MAAM,UAAU,MAAM;AAC7B,YAAI;AACJ,YAAI,SAAS,WAAU,YAAY,KAAK;AACtC,iBAAO;AAAA,QACT,OAAO;AACL,iBAAO,KAAK,OAAO,UAAU,KAAK,OAAO,KAAK,QAAQ;AAAA,QACxD;AACA,aAAK,OAAO,KAAK;AAAA,UACf;AAAA,UACA,QAAQ;AAAA,UACR;AAAA,UACA,MAAM,KAAK;AAAA,UACX,QAAQ,KAAK,SAAS,KAAK;AAAA,QAC7B,CAAC;AAAA,MACH;AAAA,IACF;AAAA;AAAA;;;AC+FO,SAAS,eAAe,WAAW,aAAa,SAAS,WAAW;AACzE,SAAO;AAAA,IACL,OAAO,EAAE,MAAM,WAAW,QAAQ,YAAY;AAAA,IAC9C,KAAK,EAAE,MAAM,SAAS,QAAQ,UAAU;AAAA,EAC1C;AACF;AAhfA,IAGa,SAQA,SAQA,mBAQA,iBAQA,mBAQA,sBAgDA,kBA8BA,kBASA,iBASA,mBAUA,mBAUA,mBAQA,qBAQA,mBAOA,sBAUA,WASA,kBASA,iBAQA,sBASA,gBAQA,kBASA,uBASA,iBAOA,kBAOA,UAUA,SAOA,YAQA,YAUA,mBASA,mBAOA,cAQA,wBAOA,SAQA,qBAOA,gBAOA,aASA,gBAQA,cAUA,iBAOA,cASA,aA2CA,kBAiBA,iBAMA,iBAMA;AAtdb;AAAA;AAGO,IAAM,UAAN,MAAc;AAAA,MACnB,YAAY,MAAM,UAAU;AAC1B,aAAK,OAAO;AACZ,aAAK,WAAW;AAAA,MAClB;AAAA,IACF;AAGO,IAAM,UAAN,cAAsB,QAAQ;AAAA,MACnC,YAAY,MAAM,UAAU;AAC1B,cAAM,WAAW,QAAQ;AACzB,aAAK,OAAO;AAAA,MACd;AAAA,IACF;AAGO,IAAM,oBAAN,cAAgC,QAAQ;AAAA,MAC7C,YAAY,YAAY,QAAQ,UAAU;AACxC,cAAM,qBAAqB,QAAQ;AACnC,aAAK,aAAa;AAClB,aAAK,SAAS;AAAA,MAChB;AAAA,IACF;AAEO,IAAM,kBAAN,cAA8B,QAAQ;AAAA,MAC3C,YAAY,UAAU,OAAO,UAAU;AACrC,cAAM,mBAAmB,QAAQ;AACjC,aAAK,WAAW;AAChB,aAAK,QAAQ;AAAA,MACf;AAAA,IACF;AAEO,IAAM,oBAAN,cAAgC,QAAQ;AAAA,MAC7C,YAAY,aAAa,UAAU;AACjC,cAAM,qBAAqB,QAAQ;AACnC,aAAK,cAAc;AAAA,MACrB;AAAA,IACF;AAGO,IAAM,uBAAN,cAAmC,QAAQ;AAAA,MAChD,YAAY,MAAM,YAAY,MAAM,UAAU;AAC5C,cAAM,wBAAwB,QAAQ;AACtC,aAAK,OAAO;AACZ,aAAK,aAAa,cAAc,CAAC;AACjC,aAAK,OAAO;AACZ,aAAK,QAAQ,CAAC;AACd,aAAK,QAAQ,CAAC;AACd,aAAK,UAAU,CAAC;AAChB,aAAK,UAAU,CAAC;AAChB,aAAK,WAAW,CAAC;AACjB,aAAK,SAAS;AACd,aAAK,YAAY,CAAC;AAGlB,aAAK,aAAa;AAAA,MACpB;AAAA,MAEA,eAAe;AACb,mBAAW,QAAQ,KAAK,MAAM;AAC5B,kBAAQ,KAAK,MAAM;AAAA,YACjB,KAAK;AACH,mBAAK,MAAM,KAAK,IAAI;AACpB;AAAA,YACF,KAAK;AACH,mBAAK,MAAM,KAAK,IAAI;AACpB;AAAA,YACF,KAAK;AACH,mBAAK,QAAQ,KAAK,IAAI;AACtB;AAAA,YACF,KAAK;AACH,mBAAK,QAAQ,KAAK,IAAI;AACtB;AAAA,YACF,KAAK;AACH,mBAAK,SAAS,KAAK,IAAI;AACvB;AAAA,YACF,KAAK;AACH,mBAAK,SAAS;AACd;AAAA,YACF,KAAK;AACH,mBAAK,UAAU,KAAK,IAAI;AACxB;AAAA,UACJ;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAGO,IAAM,mBAAN,cAA+B,QAAQ;AAAA,MAC5C,YAAY,MAAM,MAAM,UAAU;AAChC,cAAM,oBAAoB,QAAQ;AAClC,aAAK,OAAO;AACZ,aAAK,OAAO;AACZ,aAAK,QAAQ,CAAC;AACd,aAAK,UAAU,CAAC;AAChB,aAAK,WAAW,CAAC;AAEjB,aAAK,aAAa;AAAA,MACpB;AAAA,MAEA,eAAe;AACb,mBAAW,QAAQ,KAAK,MAAM;AAC5B,kBAAQ,KAAK,MAAM;AAAA,YACjB,KAAK;AACH,mBAAK,MAAM,KAAK,IAAI;AACpB;AAAA,YACF,KAAK;AACH,mBAAK,QAAQ,KAAK,IAAI;AACtB;AAAA,YACF,KAAK;AACH,mBAAK,SAAS,KAAK,IAAI;AACvB;AAAA,UACJ;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAGO,IAAM,mBAAN,cAA+B,QAAQ;AAAA,MAC5C,YAAY,MAAM,cAAc,gBAAgB,UAAU;AACxD,cAAM,oBAAoB,QAAQ;AAClC,aAAK,OAAO;AACZ,aAAK,eAAe;AACpB,aAAK,iBAAiB;AAAA,MACxB;AAAA,IACF;AAEO,IAAM,kBAAN,cAA8B,QAAQ;AAAA,MAC3C,YAAY,MAAM,gBAAgB,cAAc,UAAU;AACxD,cAAM,mBAAmB,QAAQ;AACjC,aAAK,OAAO;AACZ,aAAK,iBAAiB;AACtB,aAAK,eAAe;AAAA,MACtB;AAAA,IACF;AAEO,IAAM,oBAAN,cAAgC,QAAQ;AAAA,MAC7C,YAAY,MAAM,YAAY,MAAM,SAAS,UAAU;AACrD,cAAM,qBAAqB,QAAQ;AACnC,aAAK,OAAO;AACZ,aAAK,aAAa;AAClB,aAAK,OAAO;AACZ,aAAK,UAAU;AAAA,MACjB;AAAA,IACF;AAEO,IAAM,oBAAN,cAAgC,QAAQ;AAAA,MAC7C,YAAY,MAAM,YAAY,MAAM,SAAS,UAAU;AACrD,cAAM,qBAAqB,QAAQ;AACnC,aAAK,OAAO;AACZ,aAAK,aAAa;AAClB,aAAK,OAAO;AACZ,aAAK,UAAU;AAAA,MACjB;AAAA,IACF;AAEO,IAAM,oBAAN,cAAgC,QAAQ;AAAA,MAC7C,YAAY,cAAc,MAAM,UAAU;AACxC,cAAM,qBAAqB,QAAQ;AACnC,aAAK,eAAe;AACpB,aAAK,OAAO;AAAA,MACd;AAAA,IACF;AAEO,IAAM,sBAAN,cAAkC,QAAQ;AAAA,MAC/C,YAAY,MAAM,MAAM,UAAU;AAChC,cAAM,uBAAuB,QAAQ;AACrC,aAAK,OAAO;AACZ,aAAK,OAAO;AAAA,MACd;AAAA,IACF;AAEO,IAAM,oBAAN,cAAgC,QAAQ;AAAA,MAC7C,YAAY,MAAM,UAAU;AAC1B,cAAM,qBAAqB,QAAQ;AACnC,aAAK,OAAO;AAAA,MACd;AAAA,IACF;AAEO,IAAM,uBAAN,cAAmC,QAAQ;AAAA,MAChD,YAAY,OAAO,MAAM,SAAS,UAAU;AAC1C,cAAM,wBAAwB,QAAQ;AACtC,aAAK,QAAQ;AACb,aAAK,OAAO;AACZ,aAAK,UAAU;AAAA,MACjB;AAAA,IACF;AAGO,IAAM,YAAN,cAAwB,QAAQ;AAAA,MACrC,YAAY,MAAM,YAAY,UAAU;AACtC,cAAM,aAAa,QAAQ;AAC3B,aAAK,OAAO;AACZ,aAAK,YAAY,cAAc,CAAC;AAAA,MAClC;AAAA,IACF;AAGO,IAAM,mBAAN,cAA+B,QAAQ;AAAA,MAC5C,YAAY,MAAM,UAAU,OAAO,UAAU;AAC3C,cAAM,oBAAoB,QAAQ;AAClC,aAAK,OAAO;AACZ,aAAK,WAAW;AAChB,aAAK,QAAQ;AAAA,MACf;AAAA,IACF;AAEO,IAAM,kBAAN,cAA8B,QAAQ;AAAA,MAC3C,YAAY,UAAU,SAAS,UAAU;AACvC,cAAM,mBAAmB,QAAQ;AACjC,aAAK,WAAW;AAChB,aAAK,UAAU;AAAA,MACjB;AAAA,IACF;AAEO,IAAM,uBAAN,cAAmC,QAAQ;AAAA,MAChD,YAAY,MAAM,UAAU,OAAO,UAAU;AAC3C,cAAM,wBAAwB,QAAQ;AACtC,aAAK,OAAO;AACZ,aAAK,WAAW;AAChB,aAAK,QAAQ;AAAA,MACf;AAAA,IACF;AAEO,IAAM,iBAAN,cAA6B,QAAQ;AAAA,MAC1C,YAAY,QAAQ,YAAY,UAAU;AACxC,cAAM,kBAAkB,QAAQ;AAChC,aAAK,SAAS;AACd,aAAK,YAAY;AAAA,MACnB;AAAA,IACF;AAEO,IAAM,mBAAN,cAA+B,QAAQ;AAAA,MAC5C,YAAY,QAAQ,UAAU,UAAU,UAAU;AAChD,cAAM,oBAAoB,QAAQ;AAClC,aAAK,SAAS;AACd,aAAK,WAAW;AAChB,aAAK,WAAW;AAAA,MAClB;AAAA,IACF;AAEO,IAAM,wBAAN,cAAoC,QAAQ;AAAA,MACjD,YAAY,MAAM,YAAY,WAAW,UAAU;AACjD,cAAM,yBAAyB,QAAQ;AACvC,aAAK,OAAO;AACZ,aAAK,aAAa;AAClB,aAAK,YAAY;AAAA,MACnB;AAAA,IACF;AAEO,IAAM,kBAAN,cAA8B,QAAQ;AAAA,MAC3C,YAAY,UAAU,UAAU;AAC9B,cAAM,mBAAmB,QAAQ;AACjC,aAAK,WAAW;AAAA,MAClB;AAAA,IACF;AAEO,IAAM,mBAAN,cAA+B,QAAQ;AAAA,MAC5C,YAAY,YAAY,UAAU;AAChC,cAAM,oBAAoB,QAAQ;AAClC,aAAK,aAAa;AAAA,MACpB;AAAA,IACF;AAEO,IAAM,WAAN,cAAuB,QAAQ;AAAA,MACpC,YAAY,KAAK,OAAO,MAAM,UAAU;AACtC,cAAM,YAAY,QAAQ;AAC1B,aAAK,MAAM;AACX,aAAK,QAAQ;AACb,aAAK,OAAO,QAAQ;AAAA,MACtB;AAAA,IACF;AAGO,IAAM,UAAN,cAAsB,QAAQ;AAAA,MACnC,YAAY,OAAO,UAAU;AAC3B,cAAM,WAAW,QAAQ;AACzB,aAAK,QAAQ;AAAA,MACf;AAAA,IACF;AAEO,IAAM,aAAN,cAAyB,QAAQ;AAAA,MACtC,YAAY,MAAM,UAAU;AAC1B,cAAM,cAAc,QAAQ;AAC5B,aAAK,OAAO;AAAA,MACd;AAAA,IACF;AAGO,IAAM,aAAN,cAAyB,QAAQ;AAAA,MACtC,YAAY,gBAAgB,UAAU,gBAAgB,UAAU;AAC9D,cAAM,cAAc,QAAQ;AAC5B,aAAK,iBAAiB;AACtB,aAAK,WAAW;AAChB,aAAK,iBAAiB;AACtB,aAAK,cAAc,CAAC;AAAA,MACtB;AAAA,IACF;AAEO,IAAM,oBAAN,cAAgC,QAAQ;AAAA,MAC7C,YAAY,MAAM,YAAY,aAAa,UAAU;AACnD,cAAM,qBAAqB,QAAQ;AACnC,aAAK,OAAO;AACZ,aAAK,aAAa;AAClB,aAAK,cAAc;AAAA,MACrB;AAAA,IACF;AAEO,IAAM,oBAAN,cAAgC,QAAQ;AAAA,MAC7C,YAAY,MAAM,UAAU;AAC1B,cAAM,qBAAqB,QAAQ;AACnC,aAAK,OAAO;AAAA,MACd;AAAA,IACF;AAEO,IAAM,eAAN,cAA2B,QAAQ;AAAA,MACxC,YAAY,MAAM,OAAO,UAAU;AACjC,cAAM,gBAAgB,QAAQ;AAC9B,aAAK,OAAO;AACZ,aAAK,QAAQ;AAAA,MACf;AAAA,IACF;AAEO,IAAM,yBAAN,cAAqC,QAAQ;AAAA,MAClD,YAAY,YAAY,UAAU;AAChC,cAAM,0BAA0B,QAAQ;AACxC,aAAK,aAAa;AAAA,MACpB;AAAA,IACF;AAEO,IAAM,UAAN,cAAsB,QAAQ;AAAA,MACnC,YAAY,OAAO,UAAU;AAC3B,cAAM,WAAW,QAAQ;AACzB,aAAK,QAAQ;AAAA,MACf;AAAA,IACF;AAGO,IAAM,sBAAN,cAAkC,QAAQ;AAAA,MAC/C,YAAY,YAAY,UAAU;AAChC,cAAM,uBAAuB,QAAQ;AACrC,aAAK,aAAa;AAAA,MACpB;AAAA,IACF;AAEO,IAAM,iBAAN,cAA6B,QAAQ;AAAA,MAC1C,YAAY,MAAM,UAAU;AAC1B,cAAM,kBAAkB,QAAQ;AAChC,aAAK,OAAO;AAAA,MACd;AAAA,IACF;AAEO,IAAM,cAAN,cAA0B,QAAQ;AAAA,MACvC,YAAY,MAAM,YAAY,WAAW,UAAU;AACjD,cAAM,eAAe,QAAQ;AAC7B,aAAK,OAAO;AACZ,aAAK,aAAa;AAClB,aAAK,YAAY;AAAA,MACnB;AAAA,IACF;AAEO,IAAM,iBAAN,cAA6B,QAAQ;AAAA,MAC1C,YAAY,MAAM,MAAM,UAAU;AAChC,cAAM,kBAAkB,QAAQ;AAChC,aAAK,OAAO;AACZ,aAAK,OAAO;AAAA,MACd;AAAA,IACF;AAEO,IAAM,eAAN,cAA2B,QAAQ;AAAA,MACxC,YAAY,MAAM,MAAM,QAAQ,MAAM,UAAU;AAC9C,cAAM,gBAAgB,QAAQ;AAC9B,aAAK,OAAO;AACZ,aAAK,OAAO;AACZ,aAAK,SAAS;AACd,aAAK,OAAO;AAAA,MACd;AAAA,IACF;AAEO,IAAM,kBAAN,cAA8B,QAAQ;AAAA,MAC3C,YAAY,UAAU,UAAU;AAC9B,cAAM,mBAAmB,QAAQ;AACjC,aAAK,WAAW;AAAA,MAClB;AAAA,IACF;AAEO,IAAM,eAAN,cAA2B,QAAQ;AAAA,MACxC,YAAY,OAAO,SAAS,WAAW,UAAU;AAC/C,cAAM,gBAAgB,QAAQ;AAC9B,aAAK,QAAQ;AACb,aAAK,UAAU;AACf,aAAK,YAAY;AAAA,MACnB;AAAA,IACF;AAEO,IAAM,cAAN,cAA0B,QAAQ;AAAA,MACvC,YAAY,OAAO,MAAM,UAAU;AACjC,cAAM,eAAe,QAAQ;AAC7B,aAAK,QAAQ;AACb,aAAK,OAAO;AAAA,MACd;AAAA,IACF;AAqCO,IAAM,mBAAN,cAA+B,QAAQ;AAAA,MAC5C,YAAY,MAAM,YAAY,MAAM,UAAU;AAC5C,cAAM,oBAAoB,QAAQ;AAClC,aAAK,OAAO;AACZ,aAAK,aAAa;AAClB,aAAK,OAAO;AAAA,MACd;AAAA,IACF;AAUO,IAAM,kBAAN,cAA8B,QAAQ;AAAA,MAC3C,YAAY,UAAU;AACpB,cAAM,mBAAmB,QAAQ;AAAA,MACnC;AAAA,IACF;AAEO,IAAM,kBAAN,cAA8B,QAAQ;AAAA,MAC3C,YAAY,UAAU;AACpB,cAAM,mBAAmB,QAAQ;AAAA,MACnC;AAAA,IACF;AAEO,IAAM,mBAAN,cAA+B,QAAQ;AAAA,MAC5C,YAAY,UAAU;AACpB,cAAM,oBAAoB,QAAQ;AAAA,MACpC;AAAA,IACF;AAAA;AAAA;;;AC1dA,IAMa;AANb;AAAA;AAGA;AACA;AAEO,IAAM,aAAN,MAAM,YAAW;AAAA,MACtB,YAAY,QAAQ;AAClB,aAAK,SAAS;AACd,aAAK,UAAU;AACf,aAAK,SAAS,CAAC;AAAA,MACjB;AAAA,MAEA,OAAO,MAAM,QAAQ;AACnB,cAAM,QAAQ,IAAI,UAAU,MAAM;AAClC,cAAM,SAAS,MAAM,SAAS;AAC9B,cAAM,SAAS,IAAI,YAAW,MAAM;AACpC,eAAO,OAAO,QAAQ;AAAA,MACxB;AAAA,MAEA,UAAU;AACR,cAAM,OAAO,CAAC;AAEd,eAAO,CAAC,KAAK,QAAQ,GAAG;AAEtB,cAAI,KAAK,MAAM,SAAS,GAAG;AACzB,iBAAK,QAAQ;AACb;AAAA,UACF;AAEA,gBAAM,OAAO,KAAK,kBAAkB;AACpC,cAAI,KAAM,MAAK,KAAK,IAAI;AAAA,QAC1B;AAEA,eAAO,IAAQ,QAAQ,MAAM,KAAK,mBAAmB,CAAC;AAAA,MACxD;AAAA,MAEA,oBAAoB;AAClB,YAAI;AACF,cAAI,KAAK,MAAM,QAAQ,GAAG;AACxB,mBAAO,KAAK,kBAAkB;AAAA,UAChC;AAEA,cAAI,KAAK,MAAM,QAAQ,GAAG;AACxB,mBAAO,KAAK,kBAAkB;AAAA,UAChC;AAGA,gBAAM,aAAa,CAAC;AACpB,iBAAO,KAAK,MAAM,IAAI,GAAG;AACvB,uBAAW,KAAK,KAAK,UAAU,CAAC;AAAA,UAClC;AAEA,cAAI,KAAK,MAAM,WAAW,GAAG;AAC3B,mBAAO,KAAK,qBAAqB,UAAU;AAAA,UAC7C;AAEA,cAAI,KAAK,MAAM,OAAO,GAAG;AACvB,mBAAO,KAAK,iBAAiB,UAAU;AAAA,UACzC;AAEA,cAAI,KAAK,MAAM,OAAO,GAAG;AACvB,mBAAO,KAAK,iBAAiB,UAAU;AAAA,UACzC;AAEA,iBAAO,KAAK,UAAU;AAAA,QACxB,SAAS,OAAO;AACd,eAAK,YAAY;AACjB,gBAAM;AAAA,QACR;AAAA,MACF;AAAA,MAEA,oBAAoB;AAClB,cAAM,aAAa,CAAC;AAEpB,YAAI,KAAK,MAAM,YAAY,GAAG;AAE5B,eAAK,QAAQ,cAAc,cAAc;AAEzC,aAAG;AACD,kBAAM,WAAW,KAAK,QAAQ,cAAc,qBAAqB;AACjE,gBAAI,QAAQ;AAEZ,gBAAI,KAAK,MAAM,IAAI,GAAG;AACpB,sBAAQ,KAAK,QAAQ,cAAc,gCAAgC;AAAA,YACrE;AAEA,uBAAW,KAAK,IAAQ;AAAA,cACtB,IAAQ,WAAW,SAAS,MAAM;AAAA,cAClC,IAAQ,WAAW,MAAM,MAAM;AAAA,YACjC,CAAC;AAAA,UACH,SAAS,KAAK,MAAM,OAAO;AAE3B,eAAK,QAAQ,eAAe,cAAc;AAAA,QAC5C,OAAO;AAEL,gBAAM,OAAO,KAAK,QAAQ,cAAc,qBAAqB;AAC7D,qBAAW,KAAK,IAAQ;AAAA,YACtB,IAAQ,WAAW,SAAS;AAAA,YAC5B,IAAQ,WAAW,KAAK,MAAM;AAAA,UAChC,CAAC;AAAA,QACH;AAEA,aAAK,QAAQ,QAAQ,iBAAiB;AACtC,cAAM,SAAS,KAAK,QAAQ,UAAU,sBAAsB;AAE5D,eAAO,IAAQ;AAAA,UACb;AAAA,UACA,IAAQ,QAAQ,OAAO,OAAO;AAAA,UAC9B,KAAK,mBAAmB;AAAA,QAC1B;AAAA,MACF;AAAA,MAEA,oBAAoB;AAClB,cAAM,cAAc,KAAK,kBAAkB;AAC3C,eAAO,IAAQ,kBAAkB,aAAa,KAAK,mBAAmB,CAAC;AAAA,MACzE;AAAA,MAEA,YAAY;AACV,aAAK,QAAQ,MAAM,cAAc;AACjC,cAAM,OAAO,KAAK,QAAQ,cAAc,yBAAyB;AAEjE,YAAI,OAAO,CAAC;AACZ,YAAI,KAAK,MAAM,YAAY,GAAG;AAC5B,iBAAO,KAAK,aAAa;AACzB,eAAK,QAAQ,eAAe,cAAc;AAAA,QAC5C;AAEA,eAAO,IAAQ;AAAA,UACb,IAAQ,WAAW,KAAK,MAAM;AAAA,UAC9B;AAAA,UACA,KAAK,mBAAmB;AAAA,QAC1B;AAAA,MACF;AAAA,MAEA,qBAAqB,aAAa,CAAC,GAAG;AACpC,cAAM,OAAO,KAAK,QAAQ,cAAc,yBAAyB;AAEjE,aAAK,QAAQ,cAAc,cAAc;AAEzC,cAAM,OAAO,CAAC;AACd,eAAO,CAAC,KAAK,MAAM,aAAa,KAAK,CAAC,KAAK,QAAQ,GAAG;AACpD,cAAI,KAAK,MAAM,SAAS,GAAG;AACzB,iBAAK,QAAQ;AACb;AAAA,UACF;AAEA,gBAAM,SAAS,KAAK,gBAAgB;AACpC,cAAI,OAAQ,MAAK,KAAK,MAAM;AAAA,QAC9B;AAEA,aAAK,QAAQ,eAAe,cAAc;AAE1C,eAAO,IAAQ;AAAA,UACb,IAAQ,WAAW,KAAK,MAAM;AAAA,UAC9B;AAAA,UACA;AAAA,UACA,KAAK,mBAAmB;AAAA,QAC1B;AAAA,MACF;AAAA,MAEA,kBAAkB;AAChB,YAAI,KAAK,MAAM,OAAO,GAAG;AACvB,iBAAO,KAAK,iBAAiB;AAAA,QAC/B;AAEA,YAAI,KAAK,MAAM,MAAM,GAAG;AACtB,iBAAO,KAAK,gBAAgB;AAAA,QAC9B;AAEA,YAAI,KAAK,MAAM,QAAQ,GAAG;AACxB,iBAAO,KAAK,kBAAkB;AAAA,QAChC;AAEA,YAAI,KAAK,MAAM,QAAQ,GAAG;AACxB,iBAAO,KAAK,kBAAkB;AAAA,QAChC;AAEA,YAAI,KAAK,MAAM,UAAU,GAAG;AAC1B,iBAAO,KAAK,oBAAoB;AAAA,QAClC;AAEA,YAAI,KAAK,MAAM,QAAQ,GAAG;AACxB,iBAAO,KAAK,kBAAkB;AAAA,QAChC;AAEA,YAAI,KAAK,MAAM,WAAW,GAAG;AAC3B,iBAAO,KAAK,qBAAqB;AAAA,QACnC;AAEA,eAAO,KAAK,UAAU;AAAA,MACxB;AAAA,MAEA,mBAAmB;AACjB,cAAM,OAAO,KAAK,QAAQ,cAAc,8BAA8B;AAEtE,YAAI,iBAAiB;AACrB,YAAI,KAAK,MAAM,OAAO,GAAG;AACvB,2BAAiB,KAAK,eAAe;AAAA,QACvC;AAEA,YAAI,eAAe;AACnB,YAAI,KAAK,MAAM,QAAQ,GAAG;AACxB,yBAAe,KAAK,WAAW;AAAA,QACjC;AAEA,eAAO,IAAQ;AAAA,UACb,IAAQ,WAAW,KAAK,MAAM;AAAA,UAC9B;AAAA,UACA;AAAA,UACA,KAAK,mBAAmB;AAAA,QAC1B;AAAA,MACF;AAAA,MAEA,kBAAkB;AAChB,cAAM,OAAO,KAAK,QAAQ,cAAc,oBAAoB;AAE5D,YAAI,iBAAiB;AACrB,YAAI,KAAK,MAAM,OAAO,GAAG;AACvB,2BAAiB,KAAK,eAAe;AAAA,QACvC;AAEA,YAAI,eAAe;AACnB,YAAI,KAAK,MAAM,QAAQ,GAAG;AACxB,yBAAe,KAAK,WAAW;AAAA,QACjC;AAEA,eAAO,IAAQ;AAAA,UACb,IAAQ,WAAW,KAAK,MAAM;AAAA,UAC9B;AAAA,UACA;AAAA,UACA,KAAK,mBAAmB;AAAA,QAC1B;AAAA,MACF;AAAA,MAEA,oBAAoB;AAClB,cAAM,UAAU,KAAK,MAAM,OAAO;AAClC,cAAM,OAAO,KAAK,QAAQ,cAAc,sBAAsB;AAE9D,aAAK,QAAQ,cAAc,cAAc;AACzC,cAAM,aAAa,KAAK,cAAc;AACtC,aAAK,QAAQ,eAAe,cAAc;AAE1C,cAAM,OAAO,KAAK,eAAe;AAEjC,eAAO,IAAQ;AAAA,UACb,IAAQ,WAAW,KAAK,MAAM;AAAA,UAC9B;AAAA,UACA;AAAA,UACA;AAAA,UACA,KAAK,mBAAmB;AAAA,QAC1B;AAAA,MACF;AAAA,MAEA,oBAAoB;AAClB,YAAI,eAAe,CAAC;AAEpB,YAAI,KAAK,MAAM,IAAI,GAAG;AAEpB,uBAAa,KAAK,KAAK,WAAW,CAAC;AAEnC,iBAAO,KAAK,MAAM,OAAO,GAAG;AAC1B,yBAAa,KAAK,KAAK,WAAW,CAAC;AAAA,UACrC;AAAA,QACF;AAEA,cAAM,OAAO,KAAK,eAAe;AAEjC,eAAO,IAAQ;AAAA,UACb;AAAA,UACA;AAAA,UACA,KAAK,mBAAmB;AAAA,QAC1B;AAAA,MACF;AAAA,MAEA,sBAAsB;AACpB,cAAM,OAAO,KAAK,QAAQ,cAAc,iCAAiC;AAEzE,aAAK,QAAQ,cAAc,cAAc;AACzC,aAAK,QAAQ,eAAe,cAAc;AAE1C,cAAM,OAAO,KAAK,eAAe;AAEjC,eAAO,IAAQ;AAAA,UACb,IAAQ,WAAW,KAAK,MAAM;AAAA,UAC9B;AAAA,UACA,KAAK,mBAAmB;AAAA,QAC1B;AAAA,MACF;AAAA,MAEA,oBAAoB;AAClB,cAAM,OAAO,KAAK,eAAe;AAEjC,eAAO,IAAQ;AAAA,UACb;AAAA,UACA,KAAK,mBAAmB;AAAA,QAC1B;AAAA,MACF;AAAA,MAEA,uBAAuB;AACrB,cAAM,UAAU,KAAK,MAAM,OAAO;AAClC,cAAM,QAAQ,KAAK,QAAQ,cAAc,0BAA0B;AAEnE,aAAK,QAAQ,cAAc,cAAc;AACzC,aAAK,QAAQ,eAAe,cAAc;AAE1C,cAAM,OAAO,KAAK,eAAe;AAEjC,eAAO,IAAQ;AAAA,UACb,MAAM;AAAA,UACN;AAAA,UACA;AAAA,UACA,KAAK,mBAAmB;AAAA,QAC1B;AAAA,MACF;AAAA,MAEA,iBAAiB,aAAa,CAAC,GAAG;AAChC,cAAM,OAAO,KAAK,QAAQ,cAAc,qBAAqB;AAE7D,aAAK,QAAQ,cAAc,cAAc;AAEzC,cAAM,OAAO,CAAC;AACd,eAAO,CAAC,KAAK,MAAM,aAAa,KAAK,CAAC,KAAK,QAAQ,GAAG;AACpD,cAAI,KAAK,MAAM,SAAS,GAAG;AACzB,iBAAK,QAAQ;AACb;AAAA,UACF;AAEA,gBAAM,SAAS,KAAK,YAAY;AAChC,cAAI,OAAQ,MAAK,KAAK,MAAM;AAAA,QAC9B;AAEA,aAAK,QAAQ,eAAe,cAAc;AAE1C,eAAO,IAAQ;AAAA,UACb,IAAQ,WAAW,KAAK,MAAM;AAAA,UAC9B;AAAA,UACA,KAAK,mBAAmB;AAAA,QAC1B;AAAA,MACF;AAAA,MAEA,cAAc;AACZ,YAAI,KAAK,MAAM,OAAO,GAAG;AACvB,iBAAO,KAAK,iBAAiB;AAAA,QAC/B;AAEA,YAAI,KAAK,MAAM,QAAQ,GAAG;AACxB,iBAAO,KAAK,kBAAkB;AAAA,QAChC;AAEA,YAAI,KAAK,MAAM,UAAU,GAAG;AAC1B,iBAAO,KAAK,oBAAoB;AAAA,QAClC;AAEA,eAAO,KAAK,UAAU;AAAA,MACxB;AAAA,MAEA,oBAAoB;AAClB,cAAM,UAAU,KAAK,MAAM,OAAO;AAClC,cAAM,OAAO,KAAK,QAAQ,cAAc,sBAAsB;AAE9D,aAAK,QAAQ,cAAc,cAAc;AACzC,cAAM,aAAa,KAAK,cAAc;AACtC,aAAK,QAAQ,eAAe,cAAc;AAE1C,cAAM,OAAO,KAAK,eAAe;AAEjC,eAAO,IAAQ;AAAA,UACb,IAAQ,WAAW,KAAK,MAAM;AAAA,UAC9B;AAAA,UACA;AAAA,UACA;AAAA,UACA,KAAK,mBAAmB;AAAA,QAC1B;AAAA,MACF;AAAA,MAEA,iBAAiB,aAAa,CAAC,GAAG;AAChC,cAAM,OAAO,KAAK,QAAQ,cAAc,qBAAqB;AAE7D,aAAK,QAAQ,cAAc,cAAc;AACzC,cAAM,aAAa,KAAK,cAAc;AACtC,aAAK,QAAQ,eAAe,cAAc;AAE1C,cAAM,OAAO,KAAK,eAAe;AAEjC,eAAO,IAAQ;AAAA,UACb,IAAQ,WAAW,KAAK,MAAM;AAAA,UAC9B;AAAA,UACA;AAAA,UACA,KAAK,mBAAmB;AAAA,QAC1B;AAAA,MACF;AAAA;AAAA,MAGA,YAAY;AACV,YAAI,KAAK,MAAM,IAAI,GAAG;AACpB,iBAAO,KAAK,YAAY;AAAA,QAC1B;AAEA,YAAI,KAAK,MAAM,OAAO,GAAG;AACvB,iBAAO,KAAK,eAAe;AAAA,QAC7B;AAEA,YAAI,KAAK,MAAM,KAAK,GAAG;AACrB,iBAAO,KAAK,aAAa;AAAA,QAC3B;AAEA,YAAI,KAAK,MAAM,QAAQ,GAAG;AACxB,iBAAO,KAAK,gBAAgB;AAAA,QAC9B;AAEA,YAAI,KAAK,MAAM,KAAK,GAAG;AACrB,iBAAO,KAAK,aAAa;AAAA,QAC3B;AAEA,YAAI,KAAK,MAAM,YAAY,GAAG;AAC5B,iBAAO,KAAK,eAAe;AAAA,QAC7B;AAEA,eAAO,KAAK,oBAAoB;AAAA,MAClC;AAAA,MAEA,cAAc;AACZ,aAAK,QAAQ,cAAc,yBAAyB;AACpD,cAAM,OAAO,KAAK,WAAW;AAC7B,aAAK,QAAQ,eAAe,iCAAiC;AAE7D,cAAM,aAAa,KAAK,UAAU;AAClC,YAAI,YAAY;AAEhB,YAAI,KAAK,MAAM,MAAM,GAAG;AACtB,sBAAY,KAAK,UAAU;AAAA,QAC7B;AAEA,eAAO,IAAQ,YAAY,MAAM,YAAY,WAAW,KAAK,mBAAmB,CAAC;AAAA,MACnF;AAAA,MAEA,iBAAiB;AACf,aAAK,QAAQ,cAAc,4BAA4B;AACvD,cAAM,OAAO,KAAK,WAAW;AAC7B,aAAK,QAAQ,eAAe,oCAAoC;AAEhE,cAAM,OAAO,KAAK,UAAU;AAE5B,eAAO,IAAQ,eAAe,MAAM,MAAM,KAAK,mBAAmB,CAAC;AAAA,MACrE;AAAA,MAEA,eAAe;AACb,aAAK,QAAQ,cAAc,0BAA0B;AAErD,YAAI,OAAO;AACX,YAAI,CAAC,KAAK,MAAM,WAAW,GAAG;AAC5B,iBAAO,KAAK,WAAW;AAAA,QACzB;AACA,aAAK,QAAQ,aAAa,yCAAyC;AAEnE,YAAI,OAAO;AACX,YAAI,CAAC,KAAK,MAAM,WAAW,GAAG;AAC5B,iBAAO,KAAK,WAAW;AAAA,QACzB;AACA,aAAK,QAAQ,aAAa,uCAAuC;AAEjE,YAAI,SAAS;AACb,YAAI,CAAC,KAAK,MAAM,aAAa,GAAG;AAC9B,mBAAS,KAAK,WAAW;AAAA,QAC3B;AACA,aAAK,QAAQ,eAAe,gCAAgC;AAE5D,cAAM,OAAO,KAAK,UAAU;AAE5B,eAAO,IAAQ,aAAa,MAAM,MAAM,QAAQ,MAAM,KAAK,mBAAmB,CAAC;AAAA,MACjF;AAAA,MAEA,kBAAkB;AAChB,YAAI,WAAW;AAEf,YAAI,CAAC,KAAK,MAAM,SAAS,KAAK,CAAC,KAAK,MAAM,WAAW,GAAG;AACtD,qBAAW,KAAK,WAAW;AAAA,QAC7B;AAEA,eAAO,IAAQ,gBAAgB,UAAU,KAAK,mBAAmB,CAAC;AAAA,MACpE;AAAA,MAEA,eAAe;AACb,cAAM,QAAQ,KAAK,eAAe;AAElC,YAAI,UAAU;AACd,YAAI,KAAK,MAAM,OAAO,GAAG;AACvB,eAAK,QAAQ,cAAc,4BAA4B;AACvD,gBAAM,QAAQ,KAAK,QAAQ,cAAc,0BAA0B;AACnE,eAAK,QAAQ,eAAe,oCAAoC;AAEhE,gBAAM,OAAO,KAAK,eAAe;AACjC,oBAAU,IAAQ;AAAA,YAChB,IAAQ,WAAW,MAAM,MAAM;AAAA,YAC/B;AAAA,YACA,KAAK,mBAAmB;AAAA,UAC1B;AAAA,QACF;AAEA,YAAI,YAAY;AAChB,YAAI,KAAK,MAAM,SAAS,GAAG;AACzB,sBAAY,KAAK,eAAe;AAAA,QAClC;AAEA,eAAO,IAAQ,aAAa,OAAO,SAAS,WAAW,KAAK,mBAAmB,CAAC;AAAA,MAClF;AAAA,MAEA,iBAAiB;AACf,aAAK,QAAQ,cAAc,cAAc;AAEzC,cAAM,OAAO,CAAC;AACd,eAAO,CAAC,KAAK,MAAM,aAAa,KAAK,CAAC,KAAK,QAAQ,GAAG;AACpD,cAAI,KAAK,MAAM,SAAS,GAAG;AACzB,iBAAK,QAAQ;AACb;AAAA,UACF;AAEA,eAAK,KAAK,KAAK,UAAU,CAAC;AAAA,QAC5B;AAEA,aAAK,QAAQ,eAAe,cAAc;AAE1C,eAAO,IAAQ,eAAe,MAAM,KAAK,mBAAmB,CAAC;AAAA,MAC/D;AAAA,MAEA,sBAAsB;AACpB,cAAM,OAAO,KAAK,WAAW;AAC7B,eAAO,IAAQ,oBAAoB,MAAM,KAAK,mBAAmB,CAAC;AAAA,MACpE;AAAA;AAAA,MAGA,aAAa;AACX,eAAO,KAAK,WAAW;AAAA,MACzB;AAAA,MAEA,aAAa;AACX,cAAM,OAAO,KAAK,QAAQ;AAE1B,YAAI,KAAK,MAAM,UAAU,eAAe,cAAc,GAAG;AACvD,gBAAM,WAAW,KAAK,SAAS;AAC/B,gBAAM,QAAQ,KAAK,WAAW;AAE9B,cAAI,KAAK,SAAS,cAAc;AAC9B,kBAAM,IAAI,MAAM,2BAA2B;AAAA,UAC7C;AAEA,iBAAO,IAAQ;AAAA,YACb;AAAA,YACA,SAAS;AAAA,YACT;AAAA,YACA,KAAK,mBAAmB;AAAA,UAC1B;AAAA,QACF;AAEA,eAAO;AAAA,MACT;AAAA,MAEA,UAAU;AACR,YAAI,OAAO,KAAK,UAAU;AAE1B,YAAI,KAAK,MAAM,UAAU,GAAG;AAC1B,gBAAM,aAAa,KAAK,WAAW;AACnC,eAAK,QAAQ,SAAS,oCAAoC;AAC1D,gBAAM,YAAY,KAAK,QAAQ;AAE/B,iBAAO,IAAQ;AAAA,YACb;AAAA,YACA;AAAA,YACA;AAAA,YACA,KAAK,mBAAmB;AAAA,UAC1B;AAAA,QACF;AAEA,eAAO;AAAA,MACT;AAAA,MAEA,YAAY;AACV,YAAI,OAAO,KAAK,WAAW;AAE3B,eAAO,KAAK,MAAM,YAAY,GAAG;AAC/B,gBAAM,WAAW,KAAK,SAAS;AAC/B,gBAAM,QAAQ,KAAK,WAAW;AAC9B,iBAAO,IAAQ;AAAA,YACb;AAAA,YACA,SAAS;AAAA,YACT;AAAA,YACA,KAAK,mBAAmB;AAAA,UAC1B;AAAA,QACF;AAEA,eAAO;AAAA,MACT;AAAA,MAEA,aAAa;AACX,YAAI,OAAO,KAAK,SAAS;AAEzB,eAAO,KAAK,MAAM,aAAa,GAAG;AAChC,gBAAM,WAAW,KAAK,SAAS;AAC/B,gBAAM,QAAQ,KAAK,SAAS;AAC5B,iBAAO,IAAQ;AAAA,YACb;AAAA,YACA,SAAS;AAAA,YACT;AAAA,YACA,KAAK,mBAAmB;AAAA,UAC1B;AAAA,QACF;AAEA,eAAO;AAAA,MACT;AAAA,MAEA,WAAW;AACT,YAAI,OAAO,KAAK,WAAW;AAE3B,eAAO,KAAK,MAAM,UAAU,YAAY,GAAG;AACzC,gBAAM,WAAW,KAAK,SAAS;AAC/B,gBAAM,QAAQ,KAAK,WAAW;AAC9B,iBAAO,IAAQ;AAAA,YACb;AAAA,YACA,SAAS;AAAA,YACT;AAAA,YACA,KAAK,mBAAmB;AAAA,UAC1B;AAAA,QACF;AAEA,eAAO;AAAA,MACT;AAAA,MAEA,aAAa;AACX,YAAI,OAAO,KAAK,SAAS;AAEzB,eAAO,KAAK,MAAM,gBAAgB,iBAAiB,aAAa,YAAY,GAAG;AAC7E,gBAAM,WAAW,KAAK,SAAS;AAC/B,gBAAM,QAAQ,KAAK,SAAS;AAC5B,iBAAO,IAAQ;AAAA,YACb;AAAA,YACA,SAAS;AAAA,YACT;AAAA,YACA,KAAK,mBAAmB;AAAA,UAC1B;AAAA,QACF;AAEA,eAAO;AAAA,MACT;AAAA,MAEA,WAAW;AACT,YAAI,OAAO,KAAK,eAAe;AAE/B,eAAO,KAAK,MAAM,QAAQ,OAAO,GAAG;AAClC,gBAAM,WAAW,KAAK,SAAS;AAC/B,gBAAM,QAAQ,KAAK,eAAe;AAClC,iBAAO,IAAQ;AAAA,YACb;AAAA,YACA,SAAS;AAAA,YACT;AAAA,YACA,KAAK,mBAAmB;AAAA,UAC1B;AAAA,QACF;AAEA,eAAO;AAAA,MACT;AAAA,MAEA,iBAAiB;AACf,YAAI,OAAO,KAAK,MAAM;AAEtB,eAAO,KAAK,MAAM,YAAY,UAAU,QAAQ,GAAG;AACjD,gBAAM,WAAW,KAAK,SAAS;AAC/B,gBAAM,QAAQ,KAAK,MAAM;AACzB,iBAAO,IAAQ;AAAA,YACb;AAAA,YACA,SAAS;AAAA,YACT;AAAA,YACA,KAAK,mBAAmB;AAAA,UAC1B;AAAA,QACF;AAEA,eAAO;AAAA,MACT;AAAA,MAEA,QAAQ;AACN,YAAI,KAAK,MAAM,eAAe,SAAS,MAAM,GAAG;AAC9C,gBAAM,WAAW,KAAK,SAAS;AAC/B,gBAAM,QAAQ,KAAK,MAAM;AACzB,iBAAO,IAAQ;AAAA,YACb,SAAS;AAAA,YACT;AAAA,YACA,KAAK,mBAAmB;AAAA,UAC1B;AAAA,QACF;AAEA,eAAO,KAAK,QAAQ;AAAA,MACtB;AAAA,MAEA,UAAU;AACR,YAAI,OAAO,KAAK,QAAQ;AAExB,eAAO,MAAM;AACX,cAAI,KAAK,MAAM,YAAY,GAAG;AAE5B,kBAAM,OAAO,KAAK,aAAa;AAC/B,iBAAK,QAAQ,eAAe,8BAA8B;AAE1D,mBAAO,IAAQ;AAAA,cACb;AAAA,cACA;AAAA,cACA,KAAK,mBAAmB;AAAA,YAC1B;AAAA,UACF,WAAW,KAAK,MAAM,cAAc,GAAG;AAErC,kBAAM,QAAQ,KAAK,WAAW;AAC9B,iBAAK,QAAQ,iBAAiB,gCAAgC;AAE9D,mBAAO,IAAQ;AAAA,cACb;AAAA,cACA;AAAA,cACA;AAAA;AAAA,cACA,KAAK,mBAAmB;AAAA,YAC1B;AAAA,UACF,WAAW,KAAK,MAAM,KAAK,GAAG;AAE5B,kBAAM,WAAW,KAAK,QAAQ,cAAc,wBAAwB;AAEpE,mBAAO,IAAQ;AAAA,cACb;AAAA,cACA,IAAQ,WAAW,SAAS,MAAM;AAAA,cAClC;AAAA;AAAA,cACA,KAAK,mBAAmB;AAAA,YAC1B;AAAA,UACF,OAAO;AACL;AAAA,UACF;AAAA,QACF;AAEA,eAAO;AAAA,MACT;AAAA,MAEA,UAAU;AACR,YAAI,KAAK,MAAM,SAAS,GAAG;AACzB,iBAAO,IAAQ,QAAQ,KAAK,SAAS,EAAE,SAAS,KAAK,mBAAmB,CAAC;AAAA,QAC3E;AAEA,YAAI,KAAK,MAAM,QAAQ,GAAG;AACxB,iBAAO,IAAQ,QAAQ,KAAK,SAAS,EAAE,SAAS,KAAK,mBAAmB,CAAC;AAAA,QAC3E;AAEA,YAAI,KAAK,MAAM,QAAQ,GAAG;AACxB,iBAAO,IAAQ,QAAQ,KAAK,SAAS,EAAE,SAAS,KAAK,mBAAmB,CAAC;AAAA,QAC3E;AAEA,YAAI,KAAK,MAAM,YAAY,GAAG;AAC5B,iBAAO,IAAQ,WAAW,KAAK,SAAS,EAAE,QAAQ,KAAK,mBAAmB,CAAC;AAAA,QAC7E;AAEA,YAAI,KAAK,MAAM,YAAY,GAAG;AAC5B,gBAAM,OAAO,KAAK,WAAW;AAC7B,eAAK,QAAQ,eAAe,+BAA+B;AAC3D,iBAAO;AAAA,QACT;AAEA,YAAI,KAAK,MAAM,cAAc,GAAG;AAE9B,gBAAM,WAAW,CAAC;AAElB,cAAI,CAAC,KAAK,MAAM,eAAe,GAAG;AAChC,eAAG;AACD,uBAAS,KAAK,KAAK,WAAW,CAAC;AAAA,YACjC,SAAS,KAAK,MAAM,OAAO;AAAA,UAC7B;AAEA,eAAK,QAAQ,iBAAiB,mCAAmC;AAEjE,iBAAO,IAAQ,gBAAgB,UAAU,KAAK,mBAAmB,CAAC;AAAA,QACpE;AAEA,YAAI,KAAK,MAAM,YAAY,GAAG;AAE5B,gBAAM,aAAa,CAAC;AAEpB,cAAI,CAAC,KAAK,MAAM,aAAa,GAAG;AAC9B,eAAG;AACD,kBAAI,KAAK,MAAM,SAAS,GAAG;AACzB,qBAAK,QAAQ;AACb;AAAA,cACF;AAEA,kBAAI;AACJ,kBAAI,KAAK,MAAM,QAAQ,GAAG;AACxB,sBAAM,IAAQ,QAAQ,KAAK,SAAS,EAAE,OAAO;AAAA,cAC/C,OAAO;AACL,sBAAM,OAAO,KAAK,QAAQ,cAAc,wBAAwB;AAChE,sBAAM,IAAQ,WAAW,KAAK,MAAM;AAAA,cACtC;AAEA,mBAAK,QAAQ,SAAS,kCAAkC;AACxD,oBAAM,QAAQ,KAAK,WAAW;AAE9B,yBAAW,KAAK,IAAQ,SAAS,KAAK,OAAO,QAAQ,KAAK,mBAAmB,CAAC,CAAC;AAAA,YACjF,SAAS,KAAK,MAAM,OAAO;AAAA,UAC7B;AAEA,eAAK,QAAQ,eAAe,sCAAsC;AAElE,iBAAO,IAAQ,iBAAiB,YAAY,KAAK,mBAAmB,CAAC;AAAA,QACvE;AAGA,YAAI,KAAK,MAAM,UAAU,GAAG;AAC1B,iBAAO,KAAK,WAAW;AAAA,QACzB;AAEA,cAAM,IAAI,MAAM,qBAAqB,KAAK,KAAK,EAAE,MAAM,YAAY,KAAK,KAAK,EAAE,IAAI,EAAE;AAAA,MACvF;AAAA,MAEA,aAAa;AACX,aAAK,QAAQ,YAAY,cAAc;AAGvC,cAAM,OAAO,KAAK,QAAQ,cAAc,uBAAuB;AAC/D,cAAM,cAAc,IAAQ,WAAW,KAAK,MAAM;AAGlD,cAAM,aAAa,CAAC;AACpB,eAAO,CAAC,KAAK,MAAM,cAAc,KAAK,CAAC,KAAK,MAAM,gBAAgB,KAAK,CAAC,KAAK,QAAQ,GAAG;AACtF,qBAAW,KAAK,KAAK,aAAa,CAAC;AAAA,QACrC;AAGA,YAAI,KAAK,MAAM,gBAAgB,GAAG;AAChC,iBAAO,IAAQ;AAAA,YACb,IAAQ,kBAAkB,aAAa,YAAY,IAAI;AAAA,YACvD,CAAC;AAAA,YACD;AAAA,YACA,KAAK,mBAAmB;AAAA,UAC1B;AAAA,QACF;AAEA,aAAK,QAAQ,gBAAgB,gCAAgC;AAG7D,cAAM,WAAW,CAAC;AAClB,eAAO,CAAC,KAAK,MAAM,WAAW,KAAK,CAAC,KAAK,QAAQ,GAAG;AAClD,cAAI,KAAK,MAAM,UAAU,KAAK,KAAK,SAAS,EAAE,SAAS,cAAc;AAEnE,qBAAS,KAAK,KAAK,WAAW,CAAC;AAAA,UACjC,WAAW,KAAK,MAAM,YAAY,GAAG;AAEnC,iBAAK,QAAQ;AACb,kBAAM,OAAO,KAAK,WAAW;AAC7B,iBAAK,QAAQ,eAAe,mCAAmC;AAC/D,qBAAS,KAAK,IAAQ,uBAAuB,IAAI,CAAC;AAAA,UACpD,OAAO;AAEL,gBAAI,OAAO;AACX,mBAAO,CAAC,KAAK,MAAM,UAAU,KAAK,CAAC,KAAK,MAAM,WAAW,KAAK,CAAC,KAAK,MAAM,YAAY,KAAK,CAAC,KAAK,QAAQ,GAAG;AAC1G,sBAAQ,KAAK,QAAQ,EAAE;AAAA,YACzB;AACA,gBAAI,KAAK,KAAK,GAAG;AACf,uBAAS,KAAK,IAAQ,QAAQ,KAAK,KAAK,CAAC,CAAC;AAAA,YAC5C;AAAA,UACF;AAAA,QACF;AAGA,aAAK,QAAQ,aAAa,sBAAsB;AAChD,cAAM,cAAc,KAAK,QAAQ,cAAc,2BAA2B;AAC1E,aAAK,QAAQ,gBAAgB,gCAAgC;AAE7D,YAAI,YAAY,WAAW,KAAK,QAAQ;AACtC,gBAAM,IAAI,MAAM,wBAAwB,KAAK,MAAM,QAAQ,YAAY,MAAM,EAAE;AAAA,QACjF;AAEA,eAAO,IAAQ;AAAA,UACb,IAAQ,kBAAkB,aAAa,YAAY,KAAK;AAAA,UACxD;AAAA,UACA,IAAQ,kBAAkB,IAAQ,WAAW,YAAY,MAAM,CAAC;AAAA,UAChE,KAAK,mBAAmB;AAAA,QAC1B;AAAA,MACF;AAAA,MAEA,eAAe;AACb,YAAI;AACJ,YAAI,KAAK,MAAM,IAAI,GAAG;AACpB,eAAK,QAAQ;AACb,gBAAM,YAAY,KAAK,QAAQ,cAAc,6BAA6B;AAC1E,iBAAO,IAAQ,WAAW,MAAM,UAAU,MAAM;AAAA,QAClD,OAAO;AACL,gBAAM,WAAW,KAAK,QAAQ,cAAc,yBAAyB;AACrE,iBAAO,IAAQ,WAAW,SAAS,MAAM;AAAA,QAC3C;AAEA,YAAI,KAAK,MAAM,QAAQ,GAAG;AACxB,cAAI;AACJ,cAAI,KAAK,MAAM,QAAQ,GAAG;AACxB,oBAAQ,IAAQ,QAAQ,KAAK,SAAS,EAAE,OAAO;AAAA,UACjD,WAAW,KAAK,MAAM,YAAY,GAAG;AACnC,kBAAM,OAAO,KAAK,WAAW;AAC7B,iBAAK,QAAQ,eAAe,mCAAmC;AAC/D,oBAAQ,IAAQ,uBAAuB,IAAI;AAAA,UAC7C,OAAO;AACL,kBAAM,IAAI,MAAM,0BAA0B;AAAA,UAC5C;AAEA,iBAAO,IAAQ;AAAA,YACb,IAAQ,WAAW,KAAK,MAAM;AAAA,YAC9B;AAAA,YACA,KAAK,mBAAmB;AAAA,UAC1B;AAAA,QACF;AAGA,eAAO,IAAQ;AAAA,UACb,IAAQ,WAAW,KAAK,MAAM;AAAA,UAC9B,IAAQ,QAAQ,IAAI;AAAA,UACpB,KAAK,mBAAmB;AAAA,QAC1B;AAAA,MACF;AAAA,MAEA,gBAAgB;AACd,cAAM,aAAa,CAAC;AAEpB,YAAI,CAAC,KAAK,MAAM,aAAa,GAAG;AAC9B,aAAG;AACD,kBAAM,OAAO,KAAK,QAAQ,cAAc,yBAAyB;AAEjE,gBAAI,iBAAiB;AACrB,gBAAI,KAAK,MAAM,OAAO,GAAG;AACvB,+BAAiB,KAAK,eAAe;AAAA,YACvC;AAEA,gBAAI,eAAe;AACnB,gBAAI,KAAK,MAAM,QAAQ,GAAG;AACxB,6BAAe,KAAK,WAAW;AAAA,YACjC;AAEA,uBAAW,KAAK;AAAA,cACd,MAAM,IAAQ,WAAW,KAAK,MAAM;AAAA,cACpC;AAAA,cACA;AAAA,YACF,CAAC;AAAA,UACH,SAAS,KAAK,MAAM,OAAO;AAAA,QAC7B;AAEA,eAAO;AAAA,MACT;AAAA,MAEA,eAAe;AACb,cAAM,OAAO,CAAC;AAEd,YAAI,CAAC,KAAK,MAAM,aAAa,GAAG;AAC9B,aAAG;AACD,iBAAK,KAAK,KAAK,WAAW,CAAC;AAAA,UAC7B,SAAS,KAAK,MAAM,OAAO;AAAA,QAC7B;AAEA,eAAO;AAAA,MACT;AAAA,MAEA,iBAAiB;AACf,YAAI,KAAK,MAAM,YAAY,GAAG;AAC5B,gBAAM,WAAW,KAAK,SAAS,EAAE;AAEjC,kBAAQ,UAAU;AAAA,YAChB,KAAK;AACH,qBAAO,IAAQ,gBAAgB;AAAA,YACjC,KAAK;AACH,qBAAO,IAAQ,gBAAgB;AAAA,YACjC,KAAK;AACH,qBAAO,IAAQ,iBAAiB;AAAA,YAClC;AACE,qBAAO,IAAQ,WAAW,QAAQ;AAAA,UACtC;AAAA,QACF;AAEA,cAAM,IAAI,MAAM,0BAA0B;AAAA,MAC5C;AAAA;AAAA,MAGA,SAAS,OAAO;AACd,mBAAW,QAAQ,OAAO;AACxB,cAAI,KAAK,MAAM,IAAI,GAAG;AACpB,iBAAK,QAAQ;AACb,mBAAO;AAAA,UACT;AAAA,QACF;AACA,eAAO;AAAA,MACT;AAAA,MAEA,MAAM,MAAM;AACV,YAAI,KAAK,QAAQ,EAAG,QAAO;AAC3B,eAAO,KAAK,KAAK,EAAE,SAAS;AAAA,MAC9B;AAAA,MAEA,UAAU;AACR,YAAI,CAAC,KAAK,QAAQ,EAAG,MAAK;AAC1B,eAAO,KAAK,SAAS;AAAA,MACvB;AAAA,MAEA,UAAU;AACR,eAAO,KAAK,KAAK,EAAE,SAAS;AAAA,MAC9B;AAAA,MAEA,OAAO;AACL,eAAO,KAAK,OAAO,KAAK,OAAO;AAAA,MACjC;AAAA,MAEA,WAAW;AACT,YAAI,KAAK,UAAU,KAAK,KAAK,OAAO,QAAQ;AAC1C,iBAAO,KAAK,OAAO,KAAK,OAAO,SAAS,CAAC;AAAA,QAC3C;AACA,eAAO,KAAK,OAAO,KAAK,UAAU,CAAC;AAAA,MACrC;AAAA,MAEA,WAAW;AACT,eAAO,KAAK,OAAO,KAAK,UAAU,CAAC;AAAA,MACrC;AAAA,MAEA,QAAQ,MAAM,SAAS;AACrB,YAAI,KAAK,MAAM,IAAI,EAAG,QAAO,KAAK,QAAQ;AAE1C,cAAM,UAAU,KAAK,KAAK;AAC1B,cAAM,IAAI,MAAM,GAAG,OAAO,SAAS,QAAQ,IAAI,KAAK,QAAQ,MAAM,aAAa,QAAQ,IAAI,EAAE;AAAA,MAC/F;AAAA,MAEA,cAAc;AACZ,aAAK,QAAQ;AAEb,eAAO,CAAC,KAAK,QAAQ,GAAG;AACtB,cAAI,KAAK,SAAS,EAAE,SAAS,UAAW;AAExC,kBAAQ,KAAK,KAAK,EAAE,MAAM;AAAA,YACxB,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AACH;AAAA,UACJ;AAEA,eAAK,QAAQ;AAAA,QACf;AAAA,MACF;AAAA,MAEA,qBAAqB;AACnB,cAAM,QAAQ,KAAK,KAAK;AACxB,eAAW,eAAe,MAAM,MAAM,MAAM,QAAQ,MAAM,MAAM,MAAM,MAAM;AAAA,MAC9E;AAAA,IACF;AAAA;AAAA;;;ACxhCA,IAKa;AALb;AAAA;AAGA;AAEO,IAAM,oBAAN,MAAwB;AAAA,MAC7B,YAAY,UAAU,CAAC,GAAG;AACxB,aAAK,UAAU;AAAA,UACb,QAAQ;AAAA;AAAA,UACR,QAAQ;AAAA,UACR,YAAY;AAAA,UACZ,eAAe;AAAA,UACf,GAAG;AAAA,QACL;AACA,aAAK,SAAS;AACd,aAAK,SAAS,CAAC;AACf,aAAK,UAAU,oBAAI,IAAI;AACvB,aAAK,iBAAiB;AACtB,aAAK,aAAa;AAClB,aAAK,SAAS,CAAC;AAAA,MACjB;AAAA,MAEA,SAAS,KAAK;AACZ,aAAK,SAAS,CAAC;AACf,aAAK,SAAS;AAGd,aAAK,QAAQ,mHAAmH;AAChI,aAAK,QAAQ,sDAAsD;AACnE,aAAK,QAAQ,EAAE;AAEf,aAAK,MAAM,GAAG;AAEd,eAAO,KAAK,OAAO,KAAK,IAAI;AAAA,MAC9B;AAAA,MAEA,MAAM,MAAM;AACV,cAAM,aAAa,QAAQ,KAAK,IAAI;AACpC,YAAI,KAAK,UAAU,GAAG;AACpB,iBAAO,KAAK,UAAU,EAAE,IAAI;AAAA,QAC9B;AAEA,gBAAQ,KAAK,yBAAyB,KAAK,IAAI,EAAE;AACjD,eAAO;AAAA,MACT;AAAA,MAEA,aAAa,MAAM;AACjB,mBAAW,aAAa,KAAK,MAAM;AACjC,eAAK,MAAM,SAAS;AACpB,eAAK,QAAQ,EAAE;AAAA,QACjB;AAAA,MACF;AAAA,MAEA,uBAAuB,MAAM;AAC3B,cAAM,aAAa,KAAK,WAAW,IAAI,UAAQ;AAC7C,cAAI,KAAK,SAAS,SAAS,WAAW;AACpC,mBAAO,KAAK,MAAM;AAAA,UACpB;AACA,iBAAO,KAAK,SAAS,SAAS,KAAK,MAAM,OACrC,KAAK,SAAS,OACd,GAAG,KAAK,SAAS,IAAI,OAAO,KAAK,MAAM,IAAI;AAAA,QACjD,CAAC,EAAE,KAAK,IAAI;AAEZ,aAAK,QAAQ,YAAY,UAAU,WAAW,KAAK,UAAU,KAAK,OAAO,KAAK,CAAC,GAAG;AAAA,MACpF;AAAA,MAEA,uBAAuB,MAAM;AAC3B,aAAK,IAAI,SAAS;AAClB,aAAK,MAAM,KAAK,WAAW;AAAA,MAC7B;AAAA,MAEA,0BAA0B,MAAM;AAC9B,cAAM,gBAAgB,KAAK,KAAK;AAChC,aAAK;AAEL,aAAK,QAAQ,SAAS,aAAa,sBAAsB;AACzD,aAAK;AAGL,aAAK,QAAQ,2BAA2B;AACxC,aAAK;AACL,aAAK,QAAQ,eAAe;AAC5B,aAAK,QAAQ,EAAE;AAGf,YAAI,KAAK,MAAM,SAAS,GAAG;AACzB,eAAK,QAAQ,qBAAqB;AAClC,qBAAW,aAAa,KAAK,OAAO;AAClC,kBAAM,OAAO,UAAU,KAAK;AAC5B,kBAAM,eAAe,UAAU,eAC3B,KAAK,MAAM,UAAU,YAAY,IACjC;AAEJ,iBAAK,QAAQ,QAAQ,IAAI,0BAA0B,YAAY,IAAI;AAAA,UACrE;AACA,eAAK,QAAQ,EAAE;AAAA,QACjB;AAGA,YAAI,KAAK,SAAS,SAAS,GAAG;AAC5B,eAAK,QAAQ,mCAAmC;AAChD,qBAAW,gBAAgB,KAAK,UAAU;AACxC,kBAAM,OAAO,aAAa,KAAK;AAC/B,iBAAK,QAAQ,QAAQ,IAAI,2BAA2B;AACpD,iBAAK;AACL,iBAAK,MAAM,aAAa,IAAI;AAC5B,iBAAK;AACL,iBAAK,QAAQ,KAAK;AAAA,UACpB;AACA,eAAK,QAAQ,EAAE;AAAA,QACjB;AAGA,YAAI,KAAK,QAAQ,SAAS,GAAG;AAC3B,eAAK,QAAQ,uBAAuB;AACpC,mBAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,QAAQ,KAAK;AAC5C,kBAAM,SAAS,KAAK,QAAQ,CAAC;AAC7B,kBAAM,OAAO,OAAO,aAAa,IAAI,SAAO,KAAK,MAAM,GAAG,CAAC,EAAE,KAAK,IAAI;AAEtE,iBAAK,QAAQ,cAAc,CAAC,yBAAyB;AACrD,iBAAK;AACL,iBAAK,MAAM,OAAO,IAAI;AACtB,iBAAK;AACL,iBAAK,QAAQ,OAAO,IAAI,KAAK;AAAA,UAC/B;AACA,eAAK,QAAQ,EAAE;AAAA,QACjB;AAEA,aAAK;AACL,aAAK,QAAQ,GAAG;AAChB,aAAK,QAAQ,EAAE;AAGf,mBAAW,UAAU,KAAK,SAAS;AACjC,eAAK,uBAAuB,MAAM;AAAA,QACpC;AAGA,mBAAW,aAAa,KAAK,WAAW;AACtC,eAAK,0BAA0B,SAAS;AAAA,QAC1C;AAGA,YAAI,KAAK,QAAQ;AACf,eAAK,uBAAuB,KAAK,MAAM;AAAA,QACzC;AAEA,aAAK;AACL,aAAK,QAAQ,GAAG;AAChB,aAAK,QAAQ,EAAE;AAGf,aAAK,QAAQ,GAAG,aAAa,mBAAmB,aAAa,IAAI;AAGjE,cAAM,iBAAiB,KAAK,WAAW,KAAK,OAAK,EAAE,KAAK,SAAS,OAAO;AACxE,YAAI,gBAAgB;AAClB,gBAAMA,QAAO,eAAe,UAAU,CAAC;AACvC,eAAK,QAAQ,6BAA6B,KAAK,MAAMA,KAAI,CAAC,KAAK,aAAa,IAAI;AAAA,QAClF;AAAA,MACF;AAAA,MAEA,sBAAsB,MAAM;AAC1B,cAAM,YAAY,KAAK,KAAK;AAC5B,aAAK;AAEL,aAAK,QAAQ,SAAS,SAAS,kBAAkB;AACjD,aAAK;AAGL,aAAK,QAAQ,iBAAiB;AAC9B,aAAK;AACL,aAAK,QAAQ,UAAU;AACvB,aAAK,QAAQ,EAAE;AAGf,YAAI,KAAK,MAAM,SAAS,GAAG;AACzB,eAAK,QAAQ,qBAAqB;AAClC,qBAAW,aAAa,KAAK,OAAO;AAClC,kBAAM,OAAO,UAAU,KAAK;AAC5B,kBAAM,eAAe,UAAU,eAC3B,KAAK,MAAM,UAAU,YAAY,IACjC;AAEJ,iBAAK,QAAQ,QAAQ,IAAI,0BAA0B,YAAY,IAAI;AAAA,UACrE;AACA,eAAK,QAAQ,EAAE;AAAA,QACjB;AAGA,YAAI,KAAK,SAAS,SAAS,GAAG;AAC5B,eAAK,QAAQ,mCAAmC;AAChD,qBAAW,gBAAgB,KAAK,UAAU;AACxC,kBAAM,OAAO,aAAa,KAAK;AAC/B,iBAAK,QAAQ,QAAQ,IAAI,2BAA2B;AACpD,iBAAK;AACL,iBAAK,MAAM,aAAa,IAAI;AAC5B,iBAAK;AACL,iBAAK,QAAQ,KAAK;AAAA,UACpB;AACA,eAAK,QAAQ,EAAE;AAAA,QACjB;AAEA,aAAK;AACL,aAAK,QAAQ,GAAG;AAChB,aAAK,QAAQ,EAAE;AAGf,mBAAW,UAAU,KAAK,SAAS;AACjC,eAAK,uBAAuB,MAAM;AAAA,QACpC;AAEA,aAAK;AACL,aAAK,QAAQ,GAAG;AAChB,aAAK,QAAQ,EAAE;AAGf,aAAK,QAAQ,SAAS,SAAS,kBAAkB,SAAS,KAAK;AAC/D,aAAK,QAAQ,YAAY,SAAS,eAAe,SAAS,KAAK;AAAA,MACjE;AAAA,MAEA,uBAAuB,MAAM;AAC3B,cAAM,OAAO,KAAK,KAAK;AACvB,cAAM,eAAe,KAAK,UAAU,WAAW;AAC/C,cAAM,SAAS,KAAK,WAAW,IAAI,OAAK,EAAE,KAAK,IAAI,EAAE,KAAK,IAAI;AAE9D,aAAK,QAAQ,GAAG,YAAY,GAAG,IAAI,IAAI,MAAM,KAAK;AAClD,aAAK;AACL,aAAK,MAAM,KAAK,IAAI;AACpB,aAAK;AACL,aAAK,QAAQ,GAAG;AAChB,aAAK,QAAQ,EAAE;AAAA,MACjB;AAAA,MAEA,uBAAuB,MAAM;AAC3B,cAAM,OAAO,KAAK,KAAK;AACvB,cAAM,eAAe,KAAK,UAAU,WAAW;AAC/C,cAAM,SAAS,KAAK,WAAW,IAAI,OAAK,EAAE,KAAK,IAAI,EAAE,KAAK,IAAI;AAE9D,aAAK,QAAQ,GAAG,YAAY,GAAG,IAAI,IAAI,MAAM,KAAK;AAClD,aAAK;AACL,aAAK,MAAM,KAAK,IAAI;AACpB,aAAK;AACL,aAAK,QAAQ,GAAG;AAChB,aAAK,QAAQ,EAAE;AAAA,MACjB;AAAA,MAEA,0BAA0B,MAAM;AAC9B,cAAM,QAAQ,KAAK;AACnB,cAAM,eAAe,KAAK,UAAU,WAAW;AAE/C,aAAK,QAAQ,GAAG,YAAY,GAAG,KAAK,MAAM;AAC1C,aAAK;AACL,aAAK,MAAM,KAAK,IAAI;AACpB,aAAK;AACL,aAAK,QAAQ,GAAG;AAChB,aAAK,QAAQ,EAAE;AAAA,MACjB;AAAA,MAEA,uBAAuB,MAAM;AAC3B,aAAK,QAAQ,YAAY;AACzB,aAAK;AACL,aAAK,QAAQ,UAAU;AACvB,aAAK;AACL,aAAK,MAAM,KAAK,IAAI;AACpB,aAAK;AACL,aAAK,QAAQ,IAAI;AACjB,aAAK;AACL,aAAK,QAAQ,GAAG;AAChB,aAAK,QAAQ,EAAE;AAAA,MACjB;AAAA,MAEA,oBAAoB,MAAM;AACxB,iBAAS,IAAI,GAAG,IAAI,KAAK,KAAK,QAAQ,KAAK;AACzC,eAAK,MAAM,KAAK,KAAK,CAAC,CAAC;AAGvB,cAAI,KAAK,KAAK,CAAC,EAAE,SAAS,uBAAuB;AAC/C,iBAAK,IAAI,GAAG;AAAA,UACd;AAEA,cAAI,IAAI,KAAK,KAAK,SAAS,GAAG;AAC5B,iBAAK,QAAQ,EAAE;AAAA,UACjB;AAAA,QACF;AAAA,MACF;AAAA,MAEA,yBAAyB,MAAM;AAC7B,aAAK,IAAI,KAAK,UAAU,CAAC;AACzB,aAAK,MAAM,KAAK,UAAU;AAAA,MAC5B;AAAA,MAEA,iBAAiB,MAAM;AACrB,aAAK,IAAI,GAAG,KAAK,UAAU,CAAC,MAAM;AAClC,aAAK,MAAM,KAAK,IAAI;AACpB,aAAK,IAAI,IAAI;AACb,aAAK,MAAM,KAAK,UAAU;AAE1B,YAAI,KAAK,WAAW;AAClB,eAAK,IAAI,QAAQ;AACjB,eAAK,MAAM,KAAK,SAAS;AAAA,QAC3B;AAAA,MACF;AAAA,MAEA,oBAAoB,MAAM;AACxB,aAAK,IAAI,GAAG,KAAK,UAAU,CAAC,SAAS;AACrC,aAAK,MAAM,KAAK,IAAI;AACpB,aAAK,IAAI,IAAI;AACb,aAAK,MAAM,KAAK,IAAI;AAAA,MACtB;AAAA,MAEA,kBAAkB,MAAM;AACtB,aAAK,IAAI,GAAG,KAAK,UAAU,CAAC,OAAO;AACnC,YAAI,KAAK,KAAM,MAAK,MAAM,KAAK,IAAI;AACnC,aAAK,IAAI,IAAI;AACb,YAAI,KAAK,KAAM,MAAK,MAAM,KAAK,IAAI;AACnC,aAAK,IAAI,IAAI;AACb,YAAI,KAAK,OAAQ,MAAK,MAAM,KAAK,MAAM;AACvC,aAAK,IAAI,IAAI;AACb,aAAK,MAAM,KAAK,IAAI;AAAA,MACtB;AAAA,MAEA,qBAAqB,MAAM;AACzB,aAAK,IAAI,GAAG,KAAK,UAAU,CAAC,QAAQ;AACpC,YAAI,KAAK,UAAU;AACjB,eAAK,IAAI,GAAG;AACZ,eAAK,MAAM,KAAK,QAAQ;AAAA,QAC1B;AAAA,MACF;AAAA,MAEA,kBAAkB,MAAM;AACtB,aAAK,IAAI,GAAG,KAAK,UAAU,CAAC,MAAM;AAClC,aAAK,MAAM,KAAK,KAAK;AAErB,YAAI,KAAK,SAAS;AAChB,eAAK,IAAI,WAAW,KAAK,QAAQ,MAAM,IAAI,IAAI;AAC/C,eAAK,MAAM,KAAK,QAAQ,IAAI;AAAA,QAC9B;AAEA,YAAI,KAAK,WAAW;AAClB,eAAK,IAAI,WAAW;AACpB,eAAK,MAAM,KAAK,SAAS;AAAA,QAC3B;AAAA,MACF;AAAA,MAEA,sBAAsB,MAAM;AAC1B,aAAK,MAAM,KAAK,IAAI;AACpB,aAAK,IAAI,IAAI,KAAK,QAAQ,GAAG;AAC7B,aAAK,MAAM,KAAK,KAAK;AAAA,MACvB;AAAA,MAEA,qBAAqB,MAAM;AACzB,aAAK,IAAI,KAAK,QAAQ;AACtB,aAAK,MAAM,KAAK,OAAO;AAAA,MACzB;AAAA,MAEA,0BAA0B,MAAM;AAE9B,YAAI,KAAK,KAAK,SAAS,sBACnB,KAAK,KAAK,OAAO,SAAS,gBAC1B,KAAK,KAAK,OAAO,SAAS,QAAQ;AAGpC,eAAK,IAAI,OAAO;AAChB,eAAK,MAAM,KAAK,KAAK,QAAQ;AAC7B,eAAK,IAAI,SAAS;AAClB,eAAK,IAAI,KAAK,QAAQ;AACtB,eAAK,IAAI,GAAG;AACZ,eAAK,MAAM,KAAK,KAAK;AAAA,QACvB,OAAO;AACL,eAAK,MAAM,KAAK,IAAI;AACpB,eAAK,IAAI,IAAI,KAAK,QAAQ,GAAG;AAC7B,eAAK,MAAM,KAAK,KAAK;AAAA,QACvB;AAAA,MACF;AAAA,MAEA,oBAAoB,MAAM;AACxB,aAAK,MAAM,KAAK,MAAM;AACtB,aAAK,IAAI,GAAG;AAEZ,iBAAS,IAAI,GAAG,IAAI,KAAK,UAAU,QAAQ,KAAK;AAC9C,eAAK,MAAM,KAAK,UAAU,CAAC,CAAC;AAC5B,cAAI,IAAI,KAAK,UAAU,SAAS,GAAG;AACjC,iBAAK,IAAI,IAAI;AAAA,UACf;AAAA,QACF;AAEA,aAAK,IAAI,GAAG;AAAA,MACd;AAAA,MAEA,sBAAsB,MAAM;AAC1B,aAAK,MAAM,KAAK,MAAM;AAEtB,YAAI,KAAK,UAAU;AACjB,eAAK,IAAI,GAAG;AACZ,eAAK,MAAM,KAAK,QAAQ;AACxB,eAAK,IAAI,GAAG;AAAA,QACd,OAAO;AACL,eAAK,IAAI,GAAG;AACZ,eAAK,MAAM,KAAK,QAAQ;AAAA,QAC1B;AAAA,MACF;AAAA,MAEA,2BAA2B,MAAM;AAC/B,aAAK,MAAM,KAAK,IAAI;AACpB,aAAK,IAAI,KAAK;AACd,aAAK,MAAM,KAAK,UAAU;AAC1B,aAAK,IAAI,KAAK;AACd,aAAK,MAAM,KAAK,SAAS;AAAA,MAC3B;AAAA,MAEA,qBAAqB,MAAM;AACzB,aAAK,IAAI,GAAG;AAEZ,iBAAS,IAAI,GAAG,IAAI,KAAK,SAAS,QAAQ,KAAK;AAC7C,eAAK,MAAM,KAAK,SAAS,CAAC,CAAC;AAC3B,cAAI,IAAI,KAAK,SAAS,SAAS,GAAG;AAChC,iBAAK,IAAI,IAAI;AAAA,UACf;AAAA,QACF;AAEA,aAAK,IAAI,GAAG;AAAA,MACd;AAAA,MAEA,sBAAsB,MAAM;AAC1B,aAAK,IAAI,GAAG;AAEZ,YAAI,KAAK,WAAW,SAAS,GAAG;AAC9B,eAAK,QAAQ,EAAE;AACf,eAAK;AAEL,mBAAS,IAAI,GAAG,IAAI,KAAK,WAAW,QAAQ,KAAK;AAC/C,iBAAK,IAAI,KAAK,UAAU,CAAC;AACzB,iBAAK,MAAM,KAAK,WAAW,CAAC,CAAC;AAC7B,gBAAI,IAAI,KAAK,WAAW,SAAS,GAAG;AAClC,mBAAK,IAAI,GAAG;AAAA,YACd;AACA,iBAAK,QAAQ,EAAE;AAAA,UACjB;AAEA,eAAK;AACL,eAAK,IAAI,KAAK,UAAU,CAAC;AAAA,QAC3B;AAEA,aAAK,IAAI,GAAG;AAAA,MACd;AAAA,MAEA,cAAc,MAAM;AAClB,aAAK,MAAM,KAAK,GAAG;AACnB,aAAK,IAAI,IAAI;AACb,aAAK,MAAM,KAAK,KAAK;AAAA,MACvB;AAAA,MAEA,aAAa,MAAM;AACjB,YAAI,OAAO,KAAK,UAAU,UAAU;AAClC,eAAK,IAAI,KAAK,UAAU,KAAK,KAAK,CAAC;AAAA,QACrC,OAAO;AACL,eAAK,IAAI,OAAO,KAAK,KAAK,CAAC;AAAA,QAC7B;AAAA,MACF;AAAA,MAEA,gBAAgB,MAAM;AAEpB,YAAI,KAAK,kBAAkB,KAAK,KAAK,gBAAgB,KAAK,IAAI,GAAG;AAC/D,eAAK,IAAI,QAAQ,KAAK,IAAI,QAAQ;AAAA,QACpC,OAAO;AACL,eAAK,IAAI,KAAK,IAAI;AAAA,QACpB;AAAA,MACF;AAAA,MAEA,gBAAgB,MAAM;AACpB,aAAK,IAAI,gBAAgB;AAGzB,YAAI,KAAK,eAAe,KAAK,KAAK,OAAO,CAAC,EAAE,YAAY,MAAM,KAAK,eAAe,KAAK,KAAK,OAAO,CAAC,GAAG;AAErG,eAAK,IAAI,IAAI,KAAK,eAAe,KAAK,IAAI,GAAG;AAAA,QAC/C,OAAO;AAEL,eAAK,IAAI,KAAK,eAAe,KAAK,IAAI;AAAA,QACxC;AAGA,YAAI,KAAK,eAAe,WAAW,SAAS,GAAG;AAC7C,eAAK,IAAI,KAAK;AAEd,mBAAS,IAAI,GAAG,IAAI,KAAK,eAAe,WAAW,QAAQ,KAAK;AAC9D,kBAAM,OAAO,KAAK,eAAe,WAAW,CAAC;AAC7C,iBAAK,IAAI,GAAG,KAAK,KAAK,IAAI,IAAI;AAE9B,gBAAI,KAAK,MAAM,SAAS,0BAA0B;AAChD,mBAAK,MAAM,KAAK,MAAM,UAAU;AAAA,YAClC,OAAO;AACL,mBAAK,MAAM,KAAK,KAAK;AAAA,YACvB;AAEA,gBAAI,IAAI,KAAK,eAAe,WAAW,SAAS,GAAG;AACjD,mBAAK,IAAI,IAAI;AAAA,YACf;AAAA,UACF;AAEA,eAAK,IAAI,GAAG;AAAA,QACd,OAAO;AACL,eAAK,IAAI,QAAQ;AAAA,QACnB;AAGA,YAAI,KAAK,SAAS,SAAS,GAAG;AAC5B,qBAAW,SAAS,KAAK,UAAU;AACjC,iBAAK,IAAI,IAAI;AAEb,gBAAI,MAAM,SAAS,WAAW;AAC5B,mBAAK,IAAI,KAAK,UAAU,MAAM,KAAK,CAAC;AAAA,YACtC,WAAW,MAAM,SAAS,0BAA0B;AAClD,mBAAK,MAAM,MAAM,UAAU;AAAA,YAC7B,OAAO;AACL,mBAAK,MAAM,KAAK;AAAA,YAClB;AAAA,UACF;AAAA,QACF;AAEA,aAAK,IAAI,GAAG;AAAA,MACd;AAAA,MAEA,4BAA4B,MAAM;AAChC,aAAK,MAAM,KAAK,UAAU;AAAA,MAC5B;AAAA,MAEA,aAAa,MAAM;AACjB,aAAK,IAAI,KAAK,UAAU,KAAK,KAAK,CAAC;AAAA,MACrC;AAAA;AAAA,MAGA,oBAAoB;AAElB,eAAO;AAAA,MACT;AAAA,MAEA,gBAAgB,MAAM;AAGpB,eAAO;AAAA,MACT;AAAA,MAEA,IAAI,MAAM;AACR,aAAK,OAAO,KAAK,IAAI;AAAA,MACvB;AAAA,MAEA,QAAQ,OAAO,IAAI;AACjB,aAAK,OAAO,KAAK,OAAO,IAAI;AAAA,MAC9B;AAAA,MAEA,YAAY;AACV,eAAO,KAAK,OAAO,KAAK,MAAM;AAAA,MAChC;AAAA,IACF;AAAA;AAAA;;;AC3iBA,IAGa;AAHb;AAAA;AAGO,IAAM,YAAN,cAAwB,MAAM;AAAA,MACnC,YAAY,SAAS,UAAU,MAAM;AACnC,cAAM,OAAO;AACb,aAAK,OAAO;AACZ,aAAK,UAAU;AACf,aAAK,YAAY,oBAAI,KAAK;AAAA,MAC5B;AAAA,IACF;AAAA;AAAA;;;ACHA,OAAO,QAAQ;AACf,OAAO,UAAU;AARjB,IAUa,cA4OP,eAsEA;AA5TN;AAAA;AAGA;AACA;AACA;AACA;AAIO,IAAM,eAAN,MAAmB;AAAA,MACxB,YAAY,UAAU,CAAC,GAAG;AACxB,aAAK,UAAU;AAAA,UACb,QAAQ;AAAA;AAAA,UACR,QAAQ;AAAA,UACR,YAAY;AAAA,UACZ,eAAe;AAAA,UACf,WAAW;AAAA,UACX,aAAa;AAAA,UACb,eAAe;AAAA,UACf,gBAAgB;AAAA,UAChB,WAAW;AAAA,UACX,aAAa;AAAA,UACb,UAAU;AAAA,UACV,YAAY;AAAA,UACZ,GAAG;AAAA,QACL;AAEA,aAAK,SAAS,CAAC;AACf,aAAK,WAAW,CAAC;AACjB,aAAK,mBAAmB,oBAAI,IAAI;AAChC,aAAK,kBAAkB,oBAAI,IAAI;AAC/B,aAAK,YAAY,IAAI,cAAc,KAAK,OAAO;AAC/C,aAAK,UAAU,IAAI,YAAY,KAAK,OAAO;AAAA,MAC7C;AAAA,MAEA,MAAM,YAAY,UAAU;AAC1B,YAAI;AAEF,gBAAM,SAAS,MAAM,GAAG,SAAS,UAAU,OAAO;AAGlD,gBAAM,SAAS,KAAK,QAAQ,QAAQ,QAAQ;AAE5C,cAAI,KAAK,OAAO,SAAS,GAAG;AAC1B,kBAAM,IAAI,UAAU,sBAAsB,KAAK,MAAM;AAAA,UACvD;AAEA,iBAAO;AAAA,QACT,SAAS,OAAO;AACd,cAAI,iBAAiB,WAAW;AAC9B,kBAAM;AAAA,UACR;AACA,gBAAM,IAAI,UAAU,uBAAuB,QAAQ,KAAK,MAAM,OAAO,EAAE;AAAA,QACzE;AAAA,MACF;AAAA,MAEA,QAAQ,QAAQ,WAAW,aAAa;AACtC,YAAI;AAEF,eAAK,SAAS,CAAC;AACf,eAAK,WAAW,CAAC;AAGjB,gBAAM,QAAQ,IAAI,UAAU,MAAM;AAClC,gBAAM,SAAS,MAAM,SAAS;AAE9B,cAAI,MAAM,OAAO,SAAS,GAAG;AAC3B,iBAAK,OAAO,KAAK,GAAG,MAAM,MAAM;AAChC,mBAAO;AAAA,UACT;AAGA,gBAAM,SAAS,IAAI,WAAW,MAAM;AACpC,gBAAM,MAAM,OAAO,QAAQ;AAE3B,cAAI,OAAO,OAAO,SAAS,GAAG;AAC5B,iBAAK,OAAO,KAAK,GAAG,OAAO,MAAM;AACjC,mBAAO;AAAA,UACT;AAGA,gBAAM,YAAY,IAAI,kBAAkB,KAAK,OAAO;AACpD,gBAAM,SAAS,UAAU,SAAS,GAAG;AAErC,cAAI,UAAU,OAAO,SAAS,GAAG;AAC/B,iBAAK,OAAO,KAAK,GAAG,UAAU,MAAM;AACpC,mBAAO;AAAA,UACT;AAEA,iBAAO;AAAA,YACL;AAAA,YACA;AAAA,YACA;AAAA,YACA,WAAW,UAAU;AAAA,YACrB;AAAA,UACF;AAAA,QACF,SAAS,OAAO;AACd,eAAK,OAAO,KAAK;AAAA,YACf,SAAS,MAAM;AAAA,YACf,MAAM;AAAA,YACN,MAAM;AAAA,YACN,QAAQ;AAAA,UACV,CAAC;AACD,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,MAEA,MAAM,QAAQ;AACZ,cAAM,cAAc,QAAQ,IAAI;AAChC,cAAM,aAAa,MAAM,KAAK,WAAW,WAAW;AAGpD,cAAM,YAAY,MAAM,KAAK,cAAc,WAAW;AAEtD,YAAI,UAAU,WAAW,GAAG;AAC1B,gBAAM,IAAI,UAAU,iCAAiC;AAAA,QACvD;AAEA,gBAAQ,IAAI,SAAS,UAAU,MAAM,wBAAwB;AAG7D,cAAM,UAAU,CAAC;AACjB,mBAAW,QAAQ,WAAW;AAC5B,gBAAM,SAAS,MAAM,KAAK,YAAY,IAAI;AAC1C,cAAI,QAAQ;AACV,oBAAQ,KAAK,MAAM;AAAA,UACrB;AAAA,QACF;AAEA,YAAI,KAAK,OAAO,SAAS,GAAG;AAC1B,gBAAM,IAAI,UAAU,gBAAgB,KAAK,MAAM;AAAA,QACjD;AAGA,cAAM,KAAK,iBAAiB,SAAS,WAAW;AAEhD,eAAO;AAAA,MACT;AAAA,MAEA,MAAM,cAAc,SAAS;AAC3B,cAAM,QAAQ,CAAC;AAEf,uBAAe,KAAK,KAAK;AACvB,gBAAM,UAAU,MAAM,GAAG,QAAQ,KAAK,EAAE,eAAe,KAAK,CAAC;AAE7D,qBAAW,SAAS,SAAS;AAC3B,kBAAM,WAAW,KAAK,KAAK,KAAK,MAAM,IAAI;AAE1C,gBAAI,MAAM,YAAY,KAAK,CAAC,MAAM,KAAK,WAAW,GAAG,KAAK,MAAM,SAAS,gBAAgB;AACvF,oBAAM,KAAK,QAAQ;AAAA,YACrB,WAAW,MAAM,OAAO,KAAK,MAAM,KAAK,SAAS,OAAO,GAAG;AACzD,oBAAM,KAAK,QAAQ;AAAA,YACrB;AAAA,UACF;AAAA,QACF;AAEA,cAAM,KAAK,OAAO;AAClB,eAAO;AAAA,MACT;AAAA,MAEA,MAAM,WAAW,aAAa;AAC5B,cAAM,aAAa,KAAK,KAAK,aAAa,gBAAgB;AAE1D,YAAI;AACF,cAAI,MAAM,GAAG,WAAW,UAAU,GAAG;AACnC,kBAAM,SAAS,MAAM,OAAO;AAC5B,mBAAO,OAAO,WAAW;AAAA,UAC3B;AAAA,QACF,SAAS,OAAO;AACd,kBAAQ,KAAK,2CAA2C,MAAM,OAAO,EAAE;AAAA,QACzE;AAEA,eAAO,CAAC;AAAA,MACV;AAAA,MAEA,MAAM,iBAAiB,SAAS,aAAa;AAC3C,cAAM,YAAY,KAAK,KAAK,aAAa,KAAK,QAAQ,SAAS;AAG/D,cAAM,GAAG,UAAU,SAAS;AAG5B,mBAAW,UAAU,SAAS;AAC5B,gBAAM,eAAe,KAAK,SAAS,aAAa,OAAO,QAAQ;AAC/D,gBAAM,aAAa,KAAK;AAAA,YACtB;AAAA,YACA,aAAa,QAAQ,WAAW,KAAK;AAAA,UACvC;AAEA,gBAAM,GAAG,UAAU,KAAK,QAAQ,UAAU,CAAC;AAC3C,gBAAM,GAAG,UAAU,YAAY,OAAO,MAAM;AAG5C,cAAI,KAAK,QAAQ,cAAc,OAAO,WAAW;AAC/C,kBAAM,GAAG,UAAU,aAAa,QAAQ,KAAK,UAAU,OAAO,SAAS,CAAC;AAAA,UAC1E;AAAA,QACF;AAGA,cAAM,KAAK,kBAAkB,SAAS;AAGtC,cAAM,YAAY,KAAK,KAAK,WAAW,YAAY;AACnD,YAAI,CAAC,MAAM,GAAG,WAAW,SAAS,GAAG;AACnC,gBAAM,KAAK,sBAAsB,SAAS;AAAA,QAC5C;AAAA,MACF;AAAA,MAEA,MAAM,kBAAkB,WAAW;AACjC,cAAM,aAAa,KAAK,KAAK,WAAW,SAAS;AACjD,cAAM,GAAG,UAAU,UAAU;AAG7B,cAAM,gBAAgB,KAAK,KAAK,WAAW,YAAY;AACvD,cAAM,GAAG,KAAK,eAAe,UAAU;AAAA,MACzC;AAAA,MAEA,MAAM,sBAAsB,YAAY;AACtC,cAAM,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAab,cAAM,GAAG,UAAU,YAAY,IAAI;AAAA,MACrC;AAAA,MAEA,MAAM,YAAY,QAAQ,YAAY;AACpC,cAAM,GAAG,UAAU,KAAK,QAAQ,UAAU,CAAC;AAC3C,cAAM,GAAG,UAAU,YAAY,OAAO,MAAM;AAE5C,YAAI,KAAK,QAAQ,cAAc,OAAO,WAAW;AAC/C,gBAAM,GAAG,UAAU,aAAa,QAAQ,KAAK,UAAU,OAAO,SAAS,CAAC;AAAA,QAC1E;AAAA,MACF;AAAA,IACF;AAGA,IAAM,gBAAN,MAAoB;AAAA,MAClB,YAAY,SAAS;AACnB,aAAK,UAAU;AACf,aAAK,gBAAgB,oBAAI,IAAI;AAC7B,aAAK,WAAW,oBAAI,IAAI;AAAA,MAC1B;AAAA,MAEA,SAAS,KAAK,SAAS;AACrB,YAAI,CAAC,KAAK,QAAQ,cAAe,QAAO;AAExC,YAAI,eAAe;AAGnB,uBAAe,KAAK,gBAAgB,YAAY;AAChD,uBAAe,KAAK,oBAAoB,YAAY;AACpD,uBAAe,KAAK,gBAAgB,YAAY;AAChD,uBAAe,KAAK,SAAS,YAAY;AAEzC,eAAO;AAAA,MACT;AAAA,MAEA,gBAAgB,KAAK;AAEnB,eAAO;AAAA,MACT;AAAA,MAEA,oBAAoB,KAAK;AAEvB,eAAO;AAAA,MACT;AAAA,MAEA,gBAAgB,KAAK;AAEnB,eAAO;AAAA,MACT;AAAA,MAEA,SAAS,KAAK;AAEZ,eAAO;AAAA,MACT;AAAA,MAEA,QAAQ,KAAK;AAEX,cAAM,WAAW;AAAA,UACf,YAAY,KAAK,oBAAoB,GAAG;AAAA,UACxC,cAAc,KAAK,iBAAiB,GAAG;AAAA,UACvC,aAAa,KAAK,mBAAmB,GAAG;AAAA,QAC1C;AAEA,aAAK,SAAS,IAAI,KAAK,QAAQ;AAC/B,eAAO;AAAA,MACT;AAAA,MAEA,oBAAoB,KAAK;AAEvB,eAAO;AAAA,MACT;AAAA,MAEA,iBAAiB,KAAK;AAEpB,eAAO,CAAC;AAAA,MACV;AAAA,MAEA,mBAAmB,KAAK;AAEtB,eAAO,CAAC;AAAA,MACV;AAAA,IACF;AAGA,IAAM,cAAN,MAAkB;AAAA,MAChB,YAAY,SAAS;AACnB,aAAK,UAAU;AACf,aAAK,UAAU,oBAAI,IAAI;AACvB,aAAK,SAAS,oBAAI,IAAI;AAAA,MACxB;AAAA,MAEA,aAAa,aAAa,cAAc;AACtC,YAAI,CAAC,KAAK,QAAQ,eAAe;AAC/B,iBAAO,KAAK,mBAAmB,aAAa,YAAY;AAAA,QAC1D;AAEA,eAAO,KAAK,mBAAmB,aAAa,YAAY;AAAA,MAC1D;AAAA,MAEA,mBAAmB,aAAa,cAAc;AAE5C,eAAO;AAAA,UACL,MAAM;AAAA,UACN,MAAM,KAAK,UAAU,aAAa,YAAY;AAAA,UAC9C,WAAW,KAAK,gBAAgB,aAAa,YAAY;AAAA,QAC3D;AAAA,MACF;AAAA,MAEA,mBAAmB,aAAa,cAAc;AAE5C,cAAM,UAAU,CAAC;AAEjB,mBAAW,cAAc,aAAa;AACpC,gBAAM,SAAS,KAAK,qBAAqB,YAAY,YAAY;AACjE,kBAAQ,KAAK,MAAM;AAAA,QACrB;AAEA,eAAO;AAAA,MACT;AAAA,MAEA,qBAAqB,YAAY,cAAc;AAE7C,eAAO;AAAA,UACL,MAAM;AAAA,UACN,OAAO;AAAA,UACP,MAAM,KAAK,kBAAkB,YAAY,YAAY;AAAA,UACrD,cAAc,KAAK,qBAAqB,YAAY,YAAY;AAAA,QAClE;AAAA,MACF;AAAA,MAEA,UAAU,aAAa,cAAc;AAEnC,eAAO,YAAY,IAAI,QAAM,GAAG,IAAI,EAAE,KAAK,IAAI;AAAA,MACjD;AAAA,MAEA,gBAAgB,aAAa,cAAc;AAEzC,eAAO,CAAC;AAAA,MACV;AAAA,MAEA,kBAAkB,YAAY,cAAc;AAE1C,eAAO,WAAW;AAAA,MACpB;AAAA,MAEA,qBAAqB,YAAY,cAAc;AAE7C,eAAO,aAAa,OAAO,SAAO,IAAI,eAAe,UAAU;AAAA,MACjE;AAAA,IACF;AAAA;AAAA;;;AC7XA,IAIM,QACA,WACA,UAGA,eAodA,OAWA,YAiNA,QA4UO,aAsGA,UAuDA;AAlqCb;AAAA;AAIA,IAAM,SAAS,OAAO,YAAY,eAAe,QAAQ,YAAY,QAAQ,SAAS;AACtF,IAAM,YAAY,OAAO,WAAW,eAAe,OAAO,aAAa;AACvE,IAAM,WAAW,OAAO,sBAAsB,eAAe,gBAAgB;AAG7E,IAAM,gBAAgB,SAAS,SAAU,YAAY,SAAS;AAod9D,IAAM,QAAN,MAAY;AAAA,MACV,YAAY,MAAM,OAAO,UAAU;AACjC,aAAK,OAAO;AACZ,aAAK,QAAQ,SAAS,CAAC;AACvB,aAAK,WAAW,YAAY,CAAC;AAC7B,aAAK,MAAM,OAAO;AAClB,aAAK,MAAM,OAAO;AAClB,aAAK,MAAM;AAAA,MACb;AAAA,IACF;AAEA,IAAM,aAAN,MAAiB;AAAA,MACf,cAAc;AACZ,aAAK,cAAc;AACnB,aAAK,iBAAiB,oBAAI,IAAI;AAC9B,aAAK,cAAc,CAAC;AACpB,aAAK,aAAa;AAAA,MACpB;AAAA,MAEA,cAAc,MAAM,UAAU,UAAU;AAEtC,cAAM,eAAe,SAAS,KAAK,EAAE,OAAO,WAAS,SAAS,IAAI;AAElE,eAAO,IAAI,MAAM,MAAM,OAAO,YAAY;AAAA,MAC5C;AAAA;AAAA,MAGA,KAAK,SAAS,SAAS;AACrB,YAAI,CAAC,WAAW,CAAC,SAAS;AACxB,iBAAO,EAAE,MAAM,WAAW,QAAQ;AAAA,QACpC;AAEA,YAAI,QAAQ,SAAS,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,KAAK;AAChE,iBAAO,EAAE,MAAM,WAAW,QAAQ;AAAA,QACpC;AAEA,cAAM,UAAU,CAAC;AAGjB,cAAM,cAAc,KAAK,UAAU,QAAQ,OAAO,QAAQ,KAAK;AAC/D,YAAI,YAAY,SAAS,GAAG;AAC1B,kBAAQ,KAAK,EAAE,MAAM,SAAS,SAAS,YAAY,CAAC;AAAA,QACtD;AAGA,cAAM,eAAe,KAAK,aAAa,QAAQ,UAAU,QAAQ,QAAQ;AACzE,YAAI,aAAa,SAAS,GAAG;AAC3B,kBAAQ,KAAK,EAAE,MAAM,YAAY,SAAS,aAAa,CAAC;AAAA,QAC1D;AAEA,eAAO,QAAQ,SAAS,IAAI,EAAE,MAAM,UAAU,QAAQ,IAAI;AAAA,MAC5D;AAAA,MAEA,UAAU,UAAU,UAAU;AAC5B,cAAM,UAAU,CAAC;AACjB,cAAM,UAAU,oBAAI,IAAI,CAAC,GAAG,OAAO,KAAK,QAAQ,GAAG,GAAG,OAAO,KAAK,QAAQ,CAAC,CAAC;AAE5E,mBAAW,OAAO,SAAS;AACzB,cAAI,SAAS,GAAG,MAAM,SAAS,GAAG,GAAG;AACnC,oBAAQ,KAAK,EAAE,KAAK,OAAO,SAAS,GAAG,EAAE,CAAC;AAAA,UAC5C;AAAA,QACF;AAEA,eAAO;AAAA,MACT;AAAA,MAEA,aAAa,aAAa,aAAa;AACrC,cAAM,UAAU,CAAC;AACjB,cAAM,YAAY,KAAK,IAAI,YAAY,QAAQ,YAAY,MAAM;AAEjE,iBAAS,IAAI,GAAG,IAAI,WAAW,KAAK;AAClC,gBAAM,WAAW,YAAY,CAAC;AAC9B,gBAAM,WAAW,YAAY,CAAC;AAE9B,cAAI,CAAC,YAAY,UAAU;AACzB,oBAAQ,KAAK,EAAE,MAAM,UAAU,OAAO,GAAG,MAAM,SAAS,CAAC;AAAA,UAC3D,WAAW,YAAY,CAAC,UAAU;AAChC,oBAAQ,KAAK,EAAE,MAAM,UAAU,OAAO,EAAE,CAAC;AAAA,UAC3C,WAAW,YAAY,UAAU;AAC/B,kBAAM,YAAY,KAAK,KAAK,UAAU,QAAQ;AAC9C,gBAAI,WAAW;AACb,sBAAQ,KAAK,EAAE,MAAM,UAAU,OAAO,GAAG,MAAM,UAAU,CAAC;AAAA,YAC5D;AAAA,UACF;AAAA,QACF;AAEA,eAAO;AAAA,MACT;AAAA;AAAA,MAGA,eAAe,WAAW,UAAU;AAClC,aAAK,eAAe,IAAI,WAAW,QAAQ;AAE3C,YAAI,CAAC,KAAK,YAAY;AACpB,eAAK,aAAa;AAClB,eAAK,eAAe;AAAA,QACtB;AAAA,MACF;AAAA,MAEA,iBAAiB;AACf,cAAM,UAAU,MAAM,KAAK,KAAK,eAAe,QAAQ,CAAC;AACxD,aAAK,eAAe,MAAM;AAE1B,mBAAW,CAAC,WAAW,QAAQ,KAAK,SAAS;AAC3C,cAAI;AACF,iBAAK,gBAAgB,WAAW,QAAQ;AAAA,UAC1C,SAAS,OAAO;AACd,oBAAQ,MAAM,6BAA6B,KAAK;AAAA,UAClD;AAAA,QACF;AAEA,aAAK,aAAa;AAAA,MACpB;AAAA,MAEA,gBAAgB,WAAW,UAAU;AACnC,cAAM,WAAW,UAAU;AAC3B,cAAM,UAAU,KAAK,KAAK,UAAU,QAAQ;AAE5C,YAAI,SAAS;AACX,eAAK,aAAa,UAAU,KAAK,OAAO;AACxC,oBAAU,eAAe;AAAA,QAC3B;AAAA,MACF;AAAA,MAEA,aAAa,KAAK,SAAS;AACzB,YAAI,CAAC,IAAK;AAEV,mBAAW,SAAS,SAAS;AAC3B,kBAAQ,MAAM,MAAM;AAAA,YAClB,KAAK;AACH,mBAAK,iBAAiB,KAAK,MAAM,OAAO;AACxC;AAAA,YACF,KAAK;AACH,mBAAK,kBAAkB,KAAK,MAAM,OAAO;AACzC;AAAA,YACF,KAAK;AAEH;AAAA,UACJ;AAAA,QACF;AAAA,MACF;AAAA,MAEA,iBAAiB,KAAK,aAAa;AACjC,mBAAW,EAAE,KAAK,MAAM,KAAK,aAAa;AACxC,cAAI,IAAI,WAAW,IAAI,GAAG;AAExB,kBAAM,YAAY,IAAI,YAAY,EAAE,UAAU,CAAC;AAC/C,gBAAI,oBAAoB,WAAW,IAAI,IAAI,GAAG,EAAE,CAAC;AACjD,gBAAI,iBAAiB,WAAW,KAAK;AACrC,gBAAI,IAAI,GAAG,EAAE,IAAI;AAAA,UACnB,WAAW,QAAQ,WAAW,OAAO,UAAU,UAAU;AAEvD,mBAAO,OAAO,IAAI,OAAO,KAAK;AAAA,UAChC,OAAO;AAEL,gBAAI,aAAa,KAAK,KAAK;AAAA,UAC7B;AAAA,QACF;AAAA,MACF;AAAA,MAEA,kBAAkB,KAAK,cAAc;AACnC,mBAAW,SAAS,cAAc;AAChC,kBAAQ,MAAM,MAAM;AAAA,YAClB,KAAK;AACH,oBAAM,WAAW,KAAK,cAAc,MAAM,IAAI;AAC9C,kBAAI,aAAa,UAAU,IAAI,SAAS,MAAM,KAAK,KAAK,IAAI;AAC5D;AAAA,YACF,KAAK;AACH,kBAAI,IAAI,SAAS,MAAM,KAAK,GAAG;AAC7B,oBAAI,YAAY,IAAI,SAAS,MAAM,KAAK,CAAC;AAAA,cAC3C;AACA;AAAA,YACF,KAAK;AACH,mBAAK,aAAa,IAAI,SAAS,MAAM,KAAK,GAAG,MAAM,IAAI;AACvD;AAAA,UACJ;AAAA,QACF;AAAA,MACF;AAAA,MAEA,cAAc,OAAO;AACnB,YAAI,OAAO,UAAU,YAAY,OAAO,UAAU,UAAU;AAC1D,iBAAO,SAAS,eAAe,KAAK;AAAA,QACtC;AAEA,YAAI,MAAM,SAAS,UAAU;AAC3B,gBAAM,WAAW,SAAS,uBAAuB;AACjD,qBAAW,SAAS,MAAM,UAAU;AAClC,qBAAS,YAAY,KAAK,cAAc,KAAK,CAAC;AAAA,UAChD;AACA,iBAAO;AAAA,QACT;AAEA,cAAM,MAAM,SAAS,cAAc,MAAM,IAAI;AAG7C,mBAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,MAAM,KAAK,GAAG;AACtD,cAAI,QAAQ,SAAS,QAAQ,OAAO;AAClC,gBAAI,IAAI,WAAW,IAAI,GAAG;AACxB,oBAAM,YAAY,IAAI,YAAY,EAAE,UAAU,CAAC;AAC/C,kBAAI,iBAAiB,WAAW,KAAK;AACrC,kBAAI,IAAI,GAAG,EAAE,IAAI;AAAA,YACnB,WAAW,QAAQ,WAAW,OAAO,UAAU,UAAU;AACvD,qBAAO,OAAO,IAAI,OAAO,KAAK;AAAA,YAChC,OAAO;AACL,kBAAI,aAAa,KAAK,KAAK;AAAA,YAC7B;AAAA,UACF;AAAA,QACF;AAGA,mBAAW,SAAS,MAAM,UAAU;AAClC,cAAI,YAAY,KAAK,cAAc,KAAK,CAAC;AAAA,QAC3C;AAEA,cAAM,MAAM;AACZ,eAAO;AAAA,MACT;AAAA,IACF;AAGA,IAAM,SAAN,MAAa;AAAA,MACX,YAAY,UAAU,CAAC,GAAG;AACxB,aAAK,SAAS,oBAAI,IAAI;AACtB,aAAK,eAAe;AACpB,aAAK,SAAS,CAAC;AACf,aAAK,SAAS,oBAAI,IAAI;AACtB,aAAK,UAAU,oBAAI,IAAI;AACvB,aAAK,OAAO,QAAQ,SAAS,YAAY,YAAY;AACrD,aAAK,OAAO,QAAQ,QAAQ;AAC5B,aAAK,WAAW,QAAQ,YAAY;AAGpC,YAAI,WAAW;AAEb,iBAAO,iBAAiB,YAAY,MAAM,KAAK,iBAAiB,CAAC;AAGjE,eAAK,iBAAiB;AAAA,QACxB,OAAO;AAEL,eAAK,cAAc;AAAA,QACrB;AAAA,MACF;AAAA,MAEA,cAAcC,OAAM,WAAW,UAAU,CAAC,GAAG;AAC3C,cAAM,eAAe,KAAK,YAAYA,KAAI;AAE1C,aAAK,OAAO,IAAIA,OAAM;AAAA,UACpB,SAAS;AAAA,UACT;AAAA,UACA,QAAQ,QAAQ,UAAU,CAAC;AAAA,UAC3B,QAAQ,QAAQ;AAAA,UAChB,MAAM,QAAQ;AAAA,QAChB,CAAC;AAAA,MACH;AAAA,MAEA,cAAc,MAAM,SAAS;AAC3B,aAAK,OAAO,IAAI,MAAM,OAAO;AAAA,MAC/B;AAAA,MAEA,YAAYA,OAAM;AAEhB,cAAM,UAAUA,MACb,QAAQ,OAAO,KAAK,EACpB,QAAQ,cAAc,cAAe,EACrC,QAAQ,OAAO,IAAI;AAEtB,eAAO,IAAI,OAAO,IAAI,OAAO,GAAG;AAAA,MAClC;AAAA,MAEA,MAAM,SAASA,OAAM,UAAU,OAAO;AACpC,cAAM,QAAQ,KAAK,UAAUA,KAAI;AAEjC,YAAI,CAAC,OAAO;AACV,kBAAQ,KAAK,4BAA4BA,KAAI,EAAE;AAC/C;AAAA,QACF;AAGA,mBAAW,aAAa,MAAM,QAAQ;AACpC,gBAAM,QAAQ,KAAK,OAAO,IAAI,SAAS;AACvC,cAAI,SAAS,CAAE,MAAM,MAAM,OAAOA,KAAI,GAAI;AACxC;AAAA,UACF;AAAA,QACF;AAGA,YAAI,OAAO,CAAC;AACZ,YAAI,MAAM,QAAQ;AAChB,iBAAO,MAAM,MAAM,OAAO,KAAK,MAAM;AAAA,QACvC;AAGA,YAAI,WAAW;AAEb,cAAI,SAAS;AACX,mBAAO,QAAQ,aAAa,EAAE,MAAAA,MAAK,GAAG,IAAIA,KAAI;AAAA,UAChD,OAAO;AACL,mBAAO,QAAQ,UAAU,EAAE,MAAAA,MAAK,GAAG,IAAIA,KAAI;AAAA,UAC7C;AAAA,QACF,OAAO;AAEL,eAAK,cAAcA;AAAA,QACrB;AAGA,aAAK,eAAe;AACpB,aAAK,mBAAmB,IAAI;AAAA,MAC9B;AAAA,MAEA,UAAUA,OAAM;AACd,mBAAW,CAAC,WAAW,KAAK,KAAK,KAAK,QAAQ;AAC5C,gBAAM,QAAQA,MAAK,MAAM,MAAM,OAAO;AACtC,cAAI,OAAO;AACT,iBAAK,SAAS,MAAM,UAAU,CAAC;AAC/B,mBAAO;AAAA,UACT;AAAA,QACF;AACA,eAAO;AAAA,MACT;AAAA,MAEA,MAAM,mBAAmB;AACvB,YAAIA;AACJ,YAAI,WAAW;AACb,UAAAA,QAAO,OAAO,SAAS;AAAA,QACzB,OAAO;AACL,UAAAA,QAAO,KAAK,eAAe;AAAA,QAC7B;AACA,cAAM,KAAK,SAASA,OAAM,IAAI;AAAA,MAChC;AAAA,MAEA,mBAAmB,OAAO,CAAC,GAAG;AAC5B,YAAI,KAAK,cAAc;AACrB,gBAAM,YAAY,IAAI,KAAK,aAAa,UAAU;AAAA,YAChD,GAAG;AAAA,YACH,QAAQ,KAAK;AAAA,UACf,CAAC;AAED,cAAI,WAAW;AACb,kBAAM,eAAe,SAAS,eAAe,KAAK,KAAK,SAAS;AAChE,sBAAU,MAAM,YAAY;AAAA,UAC9B,OAAO;AAEL,iBAAK,mBAAmB;AAAA,UAC1B;AAAA,QACF;AAAA,MACF;AAAA,IACF;AA6MO,IAAM,cAAN,MAAkB;AAAA,MACvB,OAAO,aAAa,IAAI,WAAW;AAAA,MACnC,OAAO,SAAS,IAAI,OAAO;AAAA,MAC3B,OAAO,cAAc,oBAAI,IAAI;AAAA,MAC7B,OAAO,aAAa;AAAA,MAEpB,OAAO,eAAe,UAAU;AAC9B,YAAI,UAAU;AACZ,eAAK,YAAY,IAAI,QAAQ;AAAA,QAC/B;AAEA,YAAI,CAAC,KAAK,YAAY;AACpB,eAAK,aAAa;AAGlB,cAAI,aAAa,OAAO,0BAA0B,aAAa;AAC7D,kCAAsB,MAAM;AAC1B,mBAAK,aAAa;AAClB,mBAAK,aAAa;AAAA,YACpB,CAAC;AAAA,UACH,OAAO;AAEL,kBAAM,YAAY,OAAO,iBAAiB,cAAc,eAAe;AACvE,sBAAU,MAAM;AACd,mBAAK,aAAa;AAClB,mBAAK,aAAa;AAAA,YACpB,GAAG,CAAC;AAAA,UACN;AAAA,QACF;AAAA,MACF;AAAA,MAEA,OAAO,eAAe;AACpB,mBAAW,UAAU,KAAK,aAAa;AACrC,cAAI;AACF,mBAAO;AAAA,UACT,SAAS,OAAO;AACd,oBAAQ,MAAM,wBAAwB,KAAK;AAAA,UAC7C;AAAA,QACF;AAEA,aAAK,YAAY,MAAM;AAAA,MACzB;AAAA,MAEA,OAAO,cAAcA,OAAM,WAAW,SAAS;AAC7C,aAAK,OAAO,cAAcA,OAAM,WAAW,OAAO;AAAA,MACpD;AAAA,MAEA,OAAO,cAAc,MAAM,SAAS;AAClC,aAAK,OAAO,cAAc,MAAM,OAAO;AAAA,MACzC;AAAA,MAEA,OAAO,SAASA,OAAM,UAAU,OAAO;AACrC,eAAO,KAAK,OAAO,SAASA,OAAM,OAAO;AAAA,MAC3C;AAAA,MAEA,OAAO,MAAM,WAAW,WAAW;AACjC,YAAI,WAAW;AACb,cAAI,OAAO,cAAc,UAAU;AACjC,wBAAY,SAAS,cAAc,SAAS;AAAA,UAC9C;AAEA,cAAI,CAAC,WAAW;AACd,kBAAM,IAAI,MAAM,qBAAqB;AAAA,UACvC;AAEA,gBAAM,WAAW,IAAI,UAAU;AAC/B,mBAAS,MAAM,SAAS;AAExB,iBAAO;AAAA,QACT,OAAO;AAEL,gBAAM,WAAW,IAAI,UAAU;AAC/B,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,IACF;AA2BO,IAAM,WAAW,OAAO,UAAU;AAuDlC,IAAM,YAAN,MAAgB;AAAA,MACrB,YAAY,UAAU,CAAC,GAAG;AACxB,aAAK,UAAU,QAAQ,WAAW;AAClC,aAAK,SAAS,QAAQ,UAAU,IAAI,KAAK;AACzC,aAAK,QAAQ,oBAAI,IAAI;AACrB,aAAK,cAAc,CAAC;AAAA,MACtB;AAAA,MAEA,IAAI,KAAK,OAAO,MAAM,KAAK,QAAQ;AACjC,YAAI,KAAK,MAAM,QAAQ,KAAK,SAAS;AACnC,eAAK,YAAY;AAAA,QACnB;AAEA,cAAM,QAAQ;AAAA,UACZ;AAAA,UACA,WAAW,KAAK,IAAI;AAAA,UACpB;AAAA,UACA,aAAa;AAAA,QACf;AAEA,aAAK,MAAM,IAAI,KAAK,KAAK;AACzB,aAAK,kBAAkB,GAAG;AAAA,MAC5B;AAAA,MAEA,IAAI,KAAK;AACP,cAAM,QAAQ,KAAK,MAAM,IAAI,GAAG;AAChC,YAAI,CAAC,MAAO,QAAO;AAGnB,YAAI,KAAK,IAAI,IAAI,MAAM,YAAY,MAAM,KAAK;AAC5C,eAAK,MAAM,OAAO,GAAG;AACrB,eAAK,sBAAsB,GAAG;AAC9B,iBAAO;AAAA,QACT;AAGA,cAAM;AACN,aAAK,kBAAkB,GAAG;AAC1B,eAAO,MAAM;AAAA,MACf;AAAA,MAEA,IAAI,KAAK;AACP,eAAO,KAAK,MAAM,IAAI,GAAG,KAAK,CAAC,KAAK,UAAU,GAAG;AAAA,MACnD;AAAA,MAEA,OAAO,KAAK;AACV,cAAM,UAAU,KAAK,MAAM,OAAO,GAAG;AACrC,YAAI,SAAS;AACX,eAAK,sBAAsB,GAAG;AAAA,QAChC;AACA,eAAO;AAAA,MACT;AAAA,MAEA,QAAQ;AACN,aAAK,MAAM,MAAM;AACjB,aAAK,cAAc,CAAC;AAAA,MACtB;AAAA,MAEA,cAAc;AACZ,YAAI,KAAK,YAAY,WAAW,EAAG;AAEnC,cAAM,YAAY,KAAK,YAAY,CAAC;AACpC,aAAK,MAAM,OAAO,SAAS;AAC3B,aAAK,YAAY,MAAM;AAAA,MACzB;AAAA,MAEA,UAAU,KAAK;AACb,cAAM,QAAQ,KAAK,MAAM,IAAI,GAAG;AAChC,YAAI,CAAC,MAAO,QAAO;AACnB,eAAO,KAAK,IAAI,IAAI,MAAM,YAAY,MAAM;AAAA,MAC9C;AAAA,MAEA,kBAAkB,KAAK;AACrB,aAAK,sBAAsB,GAAG;AAC9B,aAAK,YAAY,KAAK,GAAG;AAAA,MAC3B;AAAA,MAEA,sBAAsB,KAAK;AACzB,cAAM,QAAQ,KAAK,YAAY,QAAQ,GAAG;AAC1C,YAAI,QAAQ,IAAI;AACd,eAAK,YAAY,OAAO,OAAO,CAAC;AAAA,QAClC;AAAA,MACF;AAAA,MAEA,WAAW;AACT,eAAO;AAAA,UACL,MAAM,KAAK,MAAM;AAAA,UACjB,SAAS,KAAK;AAAA,UACd,SAAS,KAAK,iBAAiB;AAAA,UAC/B,YAAY,KAAK,oBAAoB;AAAA,QACvC;AAAA,MACF;AAAA,MAEA,mBAAmB;AAEjB,eAAO;AAAA,MACT;AAAA,MAEA,sBAAsB;AACpB,YAAI,KAAK,MAAM,SAAS,EAAG,QAAO;AAElC,cAAM,MAAM,KAAK,IAAI;AACrB,YAAI,WAAW;AAEf,mBAAW,SAAS,KAAK,MAAM,OAAO,GAAG;AACvC,sBAAY,MAAM,MAAM;AAAA,QAC1B;AAEA,eAAO,WAAW,KAAK,MAAM;AAAA,MAC/B;AAAA,IACF;AAAA;AAAA;;;AC/wCA,OAAOC,SAAQ;AACf,OAAOC,WAAU;AACjB,SAAS,qBAAqB;AAH9B,IAKM,YACAC,YAEA,eA2YO;AAnZb;AAAA;AAKA,IAAM,aAAa,cAAc,YAAY,GAAG;AAChD,IAAMA,aAAYD,MAAK,QAAQ,UAAU;AAEzC,IAAM,gBAAN,MAAoB;AAAA,MAClB,YAAY,UAAU,CAAC,GAAG;AACxB,aAAK,UAAU;AAAA,UACb,WAAW,QAAQ,aAAa;AAAA,UAChC,aAAa,QAAQ,eAAe;AAAA,UACpC,YAAY,QAAQ,cAAc;AAAA,UAClC,aAAa,QAAQ,eAAe;AAAA,UACpC,gBAAgB,QAAQ,mBAAmB;AAAA,UAC3C,OAAO,QAAQ,UAAU;AAAA,UACzB,GAAG;AAAA,QACL;AAEA,aAAK,SAAS,oBAAI,IAAI;AACtB,aAAK,UAAU,oBAAI,IAAI;AACvB,aAAK,SAAS;AACd,aAAK,WAAW,oBAAI,IAAI;AAExB,aAAK,kBAAkB;AAAA,MACzB;AAAA,MAEA,MAAM,oBAAoB;AACxB,YAAI;AAEF,gBAAM,KAAK,yBAAyB;AAGpC,gBAAM,KAAK,eAAe;AAG1B,gBAAM,KAAK,sBAAsB;AAGjC,gBAAM,KAAK,YAAY;AAGvB,cAAI,KAAK,QAAQ,gBAAgB;AAC/B,kBAAM,KAAK,sBAAsB;AAAA,UACnC;AAEA,eAAK,SAAS;AACd,kBAAQ,IAAI,0CAAqC;AAAA,QAEnD,SAAS,OAAO;AACd,kBAAQ,MAAM,wCAAmC,KAAK;AACtD,gBAAM;AAAA,QACR;AAAA,MACF;AAAA,MAEA,MAAM,2BAA2B;AAE/B,cAAM,UAAUA,MAAK,QAAQ,KAAK,QAAQ,WAAW;AACrD,YAAI,MAAMD,IAAG,WAAW,OAAO,GAAG;AAChC,cAAI;AACF,kBAAM,aAAa,MAAMA,IAAG,SAAS,SAAS,OAAO;AACrD,kBAAM,UAAU,KAAK,aAAa,UAAU;AAE5C,uBAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,OAAO,GAAG;AAClD,sBAAQ,IAAI,GAAG,IAAI;AAAA,YACrB;AAAA,UACF,SAAS,OAAO;AACd,oBAAQ,KAAK,sCAAsC,MAAM,OAAO;AAAA,UAClE;AAAA,QACF;AAAA,MACF;AAAA,MAEA,aAAa,SAAS;AACpB,cAAM,UAAU,CAAC;AACjB,cAAM,QAAQ,QAAQ,MAAM,IAAI;AAEhC,mBAAW,QAAQ,OAAO;AACxB,gBAAM,UAAU,KAAK,KAAK;AAC1B,cAAI,WAAW,CAAC,QAAQ,WAAW,GAAG,GAAG;AACvC,kBAAM,CAAC,KAAK,GAAG,UAAU,IAAI,QAAQ,MAAM,GAAG;AAC9C,gBAAI,OAAO,WAAW,SAAS,GAAG;AAChC,sBAAQ,IAAI,KAAK,CAAC,IAAI,WAAW,KAAK,GAAG,EAAE,KAAK;AAAA,YAClD;AAAA,UACF;AAAA,QACF;AAEA,eAAO;AAAA,MACT;AAAA,MAEA,MAAM,iBAAiB;AACrB,cAAM,aAAaC,MAAK,QAAQ,KAAK,QAAQ,WAAW,KAAK,QAAQ,UAAU;AAE/E,YAAI,MAAMD,IAAG,WAAW,UAAU,GAAG;AACnC,cAAI;AACF,kBAAM,SAAS,MAAM,OAAO;AAC5B,kBAAM,aAAa,OAAO,WAAW;AAGrC,iBAAK,OAAO,IAAI,QAAQ,KAAK,mBAAmB,UAAU,CAAC;AAAA,UAC7D,SAAS,OAAO;AACd,oBAAQ,KAAK,wCAAwC,MAAM,OAAO;AAClE,iBAAK,OAAO,IAAI,QAAQ,CAAC,CAAC;AAAA,UAC5B;AAAA,QACF,OAAO;AACL,eAAK,OAAO,IAAI,QAAQ,CAAC,CAAC;AAAA,QAC5B;AAAA,MACF;AAAA,MAEA,MAAM,wBAAwB;AAC5B,cAAM,gBAAgBC,MAAK,QAAQ,KAAK,QAAQ,WAAW,GAAG,KAAK,QAAQ,WAAW,KAAK;AAE3F,YAAI,MAAMD,IAAG,WAAW,aAAa,GAAG;AACtC,cAAI;AACF,kBAAM,SAAS,MAAM,OAAO;AAC5B,kBAAM,aAAa,OAAO,WAAW;AAGrC,kBAAM,aAAa,KAAK,OAAO,IAAI,MAAM,KAAK,CAAC;AAC/C,kBAAM,YAAY,KAAK,mBAAmB,UAAU;AAEpD,iBAAK,OAAO,IAAI,eAAe,KAAK,aAAa,YAAY,SAAS,CAAC;AAAA,UACzE,SAAS,OAAO;AACd,oBAAQ,KAAK,2BAA2B,KAAK,QAAQ,WAAW,YAAY,MAAM,OAAO;AACzF,iBAAK,OAAO,IAAI,eAAe,KAAK,OAAO,IAAI,MAAM,KAAK,CAAC,CAAC;AAAA,UAC9D;AAAA,QACF,OAAO;AACL,eAAK,OAAO,IAAI,eAAe,KAAK,OAAO,IAAI,MAAM,KAAK,CAAC,CAAC;AAAA,QAC9D;AAAA,MACF;AAAA,MAEA,MAAM,cAAc;AAClB,cAAM,cAAcC,MAAK,QAAQ,KAAK,QAAQ,WAAW,YAAY;AAErE,YAAI,MAAMD,IAAG,WAAW,WAAW,GAAG;AACpC,cAAI;AACF,kBAAM,UAAU,MAAM,OAAO;AAC7B,kBAAM,cAAc,QAAQ,WAAW;AAEvC,iBAAK,UAAU,IAAI,IAAI,OAAO,QAAQ,WAAW,CAAC;AAAA,UACpD,SAAS,OAAO;AACd,oBAAQ,KAAK,oCAAoC,MAAM,OAAO;AAAA,UAChE;AAAA,QACF;AAAA,MACF;AAAA,MAEA,mBAAmB,QAAQ;AACzB,YAAI,OAAO,WAAW,UAAU;AAC9B,iBAAO,OAAO,QAAQ,kBAAkB,CAAC,OAAO,QAAQ;AACtD,mBAAO,QAAQ,IAAI,GAAG,KAAK;AAAA,UAC7B,CAAC;AAAA,QACH;AAEA,YAAI,MAAM,QAAQ,MAAM,GAAG;AACzB,iBAAO,OAAO,IAAI,UAAQ,KAAK,mBAAmB,IAAI,CAAC;AAAA,QACzD;AAEA,YAAI,OAAO,WAAW,YAAY,WAAW,MAAM;AACjD,gBAAM,SAAS,CAAC;AAChB,qBAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,MAAM,GAAG;AACjD,mBAAO,GAAG,IAAI,KAAK,mBAAmB,KAAK;AAAA,UAC7C;AACA,iBAAO;AAAA,QACT;AAEA,eAAO;AAAA,MACT;AAAA,MAEA,aAAa,MAAM,UAAU;AAC3B,cAAM,SAAS,EAAE,GAAG,KAAK;AAEzB,mBAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,QAAQ,GAAG;AACnD,cAAI,OAAO,UAAU,YAAY,UAAU,QAAQ,CAAC,MAAM,QAAQ,KAAK,GAAG;AACxE,mBAAO,GAAG,IAAI,KAAK,aAAa,OAAO,GAAG,KAAK,CAAC,GAAG,KAAK;AAAA,UAC1D,OAAO;AACL,mBAAO,GAAG,IAAI;AAAA,UAChB;AAAA,QACF;AAEA,eAAO;AAAA,MACT;AAAA,MAEA,MAAM,wBAAwB;AAC5B,cAAM,SAAS,KAAK,OAAO,IAAI,aAAa;AAG5C,cAAM,WAAW,CAAC,OAAO,UAAU,UAAU;AAC7C,mBAAW,SAAS,UAAU;AAC5B,cAAI,CAAC,OAAO,KAAK,GAAG;AAClB,kBAAM,IAAI,MAAM,mCAAmC,KAAK,EAAE;AAAA,UAC5D;AAAA,QACF;AAGA,cAAM,KAAK,kBAAkB,OAAO,GAAG;AACvC,cAAM,KAAK,qBAAqB,OAAO,MAAM;AAC7C,cAAM,KAAK,uBAAuB,OAAO,QAAQ;AAEjD,gBAAQ,IAAI,wCAAmC;AAAA,MACjD;AAAA,MAEA,MAAM,kBAAkB,WAAW;AACjC,YAAI,CAAC,UAAU,MAAM;AACnB,gBAAM,IAAI,MAAM,sBAAsB;AAAA,QACxC;AAEA,YAAI,CAAC,UAAU,SAAS;AACtB,gBAAM,IAAI,MAAM,yBAAyB;AAAA,QAC3C;AAAA,MACF;AAAA,MAEA,MAAM,qBAAqB,cAAc;AACvC,YAAI,CAAC,aAAa,MAAM;AACtB,gBAAM,IAAI,MAAM,yBAAyB;AAAA,QAC3C;AAEA,YAAI,aAAa,OAAO,KAAK,aAAa,OAAO,OAAO;AACtD,gBAAM,IAAI,MAAM,yCAAyC;AAAA,QAC3D;AAAA,MACF;AAAA,MAEA,MAAM,uBAAuB,UAAU;AACrC,YAAI,CAAC,SAAS,MAAM;AAClB,gBAAM,IAAI,MAAM,2BAA2B;AAAA,QAC7C;AAEA,YAAI,CAAC,SAAS,MAAM;AAClB,gBAAM,IAAI,MAAM,2BAA2B;AAAA,QAC7C;AAEA,YAAI,CAAC,SAAS,UAAU;AACtB,gBAAM,IAAI,MAAM,2BAA2B;AAAA,QAC7C;AAAA,MACF;AAAA;AAAA,MAGA,IAAI,KAAK,eAAe,QAAW;AACjC,cAAM,SAAS,KAAK,OAAO,IAAI,aAAa;AAC5C,eAAO,KAAK,eAAe,QAAQ,KAAK,YAAY;AAAA,MACtD;AAAA,MAEA,eAAe,KAAKC,OAAM,cAAc;AACtC,cAAM,OAAOA,MAAK,MAAM,GAAG;AAC3B,YAAI,UAAU;AAEd,mBAAW,OAAO,MAAM;AACtB,cAAI,WAAW,OAAO,YAAY,YAAY,OAAO,SAAS;AAC5D,sBAAU,QAAQ,GAAG;AAAA,UACvB,OAAO;AACL,mBAAO;AAAA,UACT;AAAA,QACF;AAEA,eAAO,YAAY,SAAY,UAAU;AAAA,MAC3C;AAAA,MAEA,IAAI,KAAK,OAAO;AACd,cAAM,SAAS,KAAK,OAAO,IAAI,aAAa;AAC5C,aAAK,eAAe,QAAQ,KAAK,KAAK;AAAA,MACxC;AAAA,MAEA,eAAe,KAAKA,OAAM,OAAO;AAC/B,cAAM,OAAOA,MAAK,MAAM,GAAG;AAC3B,cAAM,UAAU,KAAK,IAAI;AACzB,YAAI,UAAU;AAEd,mBAAW,OAAO,MAAM;AACtB,cAAI,EAAE,OAAO,YAAY,OAAO,QAAQ,GAAG,MAAM,UAAU;AACzD,oBAAQ,GAAG,IAAI,CAAC;AAAA,UAClB;AACA,oBAAU,QAAQ,GAAG;AAAA,QACvB;AAEA,gBAAQ,OAAO,IAAI;AAAA,MACrB;AAAA;AAAA,MAGA,UAAU,KAAK,eAAe,QAAW;AACvC,eAAO,KAAK,QAAQ,IAAI,GAAG,KAAK;AAAA,MAClC;AAAA,MAEA,UAAU,KAAK,OAAO;AACpB,aAAK,QAAQ,IAAI,KAAK,KAAK;AAAA,MAC7B;AAAA;AAAA,MAGA,MAAM,KAAK,UAAU;AACnB,YAAI,CAAC,KAAK,SAAS,IAAI,GAAG,GAAG;AAC3B,eAAK,SAAS,IAAI,KAAK,oBAAI,IAAI,CAAC;AAAA,QAClC;AACA,aAAK,SAAS,IAAI,GAAG,EAAE,IAAI,QAAQ;AAEnC,eAAO,MAAM;AACX,gBAAM,WAAW,KAAK,SAAS,IAAI,GAAG;AACtC,cAAI,UAAU;AACZ,qBAAS,OAAO,QAAQ;AAAA,UAC1B;AAAA,QACF;AAAA,MACF;AAAA,MAEA,eAAe,KAAK,UAAU,UAAU;AACtC,cAAM,WAAW,KAAK,SAAS,IAAI,GAAG;AACtC,YAAI,UAAU;AACZ,qBAAW,YAAY,UAAU;AAC/B,gBAAI;AACF,uBAAS,UAAU,QAAQ;AAAA,YAC7B,SAAS,OAAO;AACd,sBAAQ,MAAM,4BAA4B,KAAK;AAAA,YACjD;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA;AAAA,MAGA,MAAM,SAAS;AACb,aAAK,SAAS;AACd,aAAK,OAAO,MAAM;AAClB,cAAM,KAAK,kBAAkB;AAAA,MAC/B;AAAA;AAAA,MAGA,SAAS;AACP,cAAM,SAAS,KAAK,OAAO,IAAI,aAAa;AAC5C,eAAO,KAAK,MAAM,KAAK,UAAU,MAAM,CAAC;AAAA,MAC1C;AAAA;AAAA,MAGA,UAAU;AACR,eAAO,KAAK;AAAA,MACd;AAAA;AAAA,MAGA,UAAU;AACR,cAAM,SAAS,KAAK,OAAO,IAAI,aAAa;AAC5C,eAAO,KAAK,WAAW,MAAM;AAAA,MAC/B;AAAA,MAEA,WAAW,KAAK,SAAS,IAAI;AAC3B,cAAM,OAAO,CAAC;AAEd,mBAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,GAAG,GAAG;AAC9C,gBAAM,UAAU,SAAS,GAAG,MAAM,IAAI,GAAG,KAAK;AAE9C,cAAI,OAAO,UAAU,YAAY,UAAU,QAAQ,CAAC,MAAM,QAAQ,KAAK,GAAG;AACxE,iBAAK,KAAK,GAAG,KAAK,WAAW,OAAO,OAAO,CAAC;AAAA,UAC9C,OAAO;AACL,iBAAK,KAAK,OAAO;AAAA,UACnB;AAAA,QACF;AAEA,eAAO;AAAA,MACT;AAAA;AAAA,MAGA,OAAO,OAAO;AACZ,cAAM,SAAS,KAAK,OAAO,IAAI,aAAa;AAC5C,cAAM,UAAU,CAAC;AAEjB,mBAAW,OAAO,KAAK,QAAQ,GAAG;AAChC,cAAI,IAAI,YAAY,EAAE,SAAS,MAAM,YAAY,CAAC,GAAG;AACnD,oBAAQ,KAAK;AAAA,cACX;AAAA,cACA,OAAO,KAAK,IAAI,GAAG;AAAA,YACrB,CAAC;AAAA,UACH;AAAA,QACF;AAEA,eAAO;AAAA,MACT;AAAA;AAAA,MAGA,KAAK,aAAa;AAChB,cAAM,gBAAgB,KAAK,OAAO,IAAI,aAAa;AACnD,cAAM,OAAO;AAAA,UACX,OAAO,CAAC;AAAA,UACR,UAAU,CAAC;AAAA,UACX,SAAS,CAAC;AAAA,QACZ;AAGA,mBAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,WAAW,GAAG;AACtD,cAAI,EAAE,OAAO,gBAAgB;AAC3B,iBAAK,MAAM,GAAG,IAAI;AAAA,UACpB,WAAW,KAAK,UAAU,cAAc,GAAG,CAAC,MAAM,KAAK,UAAU,KAAK,GAAG;AACvE,iBAAK,SAAS,GAAG,IAAI;AAAA,cACnB,KAAK,cAAc,GAAG;AAAA,cACtB,KAAK;AAAA,YACP;AAAA,UACF;AAAA,QACF;AAGA,mBAAW,OAAO,OAAO,KAAK,aAAa,GAAG;AAC5C,cAAI,EAAE,OAAO,cAAc;AACzB,iBAAK,QAAQ,GAAG,IAAI,cAAc,GAAG;AAAA,UACvC;AAAA,QACF;AAEA,eAAO;AAAA,MACT;AAAA,IACF;AAGO,IAAM,gBAAgB,IAAI,cAAc;AAAA;AAAA;;;AClZ/C,OAAOE,SAAQ;AACf,OAAOC,WAAU;AACjB,SAAS,iBAAAC,sBAAqB;AAH9B,IAMMC,aACAC,YAEA,gBAwcO;AAjdb;AAAA;AAIA;AAEA,IAAMD,cAAaD,eAAc,YAAY,GAAG;AAChD,IAAME,aAAYH,MAAK,QAAQE,WAAU;AAEzC,IAAM,iBAAN,MAAqB;AAAA,MACnB,YAAY,UAAU,CAAC,GAAG;AACxB,aAAK,UAAU;AAAA,UACb,UAAU,QAAQ,YAAY;AAAA,UAC9B,YAAY,QAAQ,cAAc;AAAA,UAClC,aAAa,QAAQ,eAAe;AAAA,UACpC,UAAU,QAAQ,YAAY;AAAA,UAC9B,aAAa,QAAQ,eAAe,KAAK,OAAO;AAAA;AAAA,UAChD,cAAc,QAAQ,gBAAgB,CAAC,WAAW,UAAU,eAAe;AAAA,UAC3E,OAAO,QAAQ,UAAU;AAAA,UACzB,GAAG;AAAA,QACL;AAEA,aAAK,QAAQ,KAAK,QAAQ,QAAQ,IAAI,UAAU,IAAI;AACpD,aAAK,cAAcF,MAAK,QAAQ,KAAK,QAAQ,QAAQ;AACrD,aAAK,aAAaA,MAAK,KAAK,KAAK,aAAa,KAAK,QAAQ,UAAU;AACrE,aAAK,cAAcA,MAAK,KAAK,KAAK,aAAa,KAAK,QAAQ,WAAW;AACvE,aAAK,WAAWA,MAAK,KAAK,KAAK,aAAa,KAAK,QAAQ,QAAQ;AAEjE,aAAK,kBAAkB;AAAA,MACzB;AAAA,MAEA,MAAM,oBAAoB;AACxB,YAAI;AAEF,gBAAMD,IAAG,UAAU,KAAK,WAAW;AACnC,gBAAMA,IAAG,UAAU,KAAK,UAAU;AAClC,gBAAMA,IAAG,UAAU,KAAK,WAAW;AACnC,gBAAMA,IAAG,UAAU,KAAK,QAAQ;AAGhC,gBAAMA,IAAG,UAAUC,MAAK,KAAK,KAAK,YAAY,QAAQ,CAAC;AACvD,gBAAMD,IAAG,UAAUC,MAAK,KAAK,KAAK,YAAY,KAAK,CAAC;AACpD,gBAAMD,IAAG,UAAUC,MAAK,KAAK,KAAK,YAAY,IAAI,CAAC;AACnD,gBAAMD,IAAG,UAAUC,MAAK,KAAK,KAAK,YAAY,OAAO,CAAC;AACtD,gBAAMD,IAAG,UAAUC,MAAK,KAAK,KAAK,YAAY,WAAW,CAAC;AAE1D,gBAAMD,IAAG,UAAUC,MAAK,KAAK,KAAK,aAAa,QAAQ,CAAC;AACxD,gBAAMD,IAAG,UAAUC,MAAK,KAAK,KAAK,aAAa,WAAW,CAAC;AAC3D,gBAAMD,IAAG,UAAUC,MAAK,KAAK,KAAK,aAAa,QAAQ,CAAC;AACxD,gBAAMD,IAAG,UAAUC,MAAK,KAAK,KAAK,aAAa,OAAO,CAAC;AAEvD,kBAAQ,IAAI,gDAA2C;AAAA,QACzD,SAAS,OAAO;AACd,kBAAQ,MAAM,wCAAmC,KAAK;AACtD,gBAAM;AAAA,QACR;AAAA,MACF;AAAA;AAAA,MAGA,MAAM,UAAU,MAAM,cAAc,WAAW,UAAU,CAAC,GAAG;AAC3D,cAAM;AAAA,UACJ,WAAW,KAAK,QAAQ,QAAQ,KAAK,IAAI,CAAC;AAAA,UAC1C,YAAY;AAAA,UACZ,YAAY;AAAA,UACZ,WAAW;AAAA,QACb,IAAI;AAEJ,YAAI;AAEF,cAAI,UAAU;AACZ,kBAAM,KAAK,aAAa,IAAI;AAAA,UAC9B;AAGA,gBAAM,WAAW,gBAAgB,WAAW,KAAK,aAAa,KAAK;AACnE,gBAAM,YAAYA,MAAK,KAAK,UAAU,WAAW,QAAQ;AAGzD,cAAI,MAAMD,IAAG,WAAW,SAAS,KAAK,CAAC,WAAW;AAChD,kBAAM,IAAI,MAAM,QAAQ,QAAQ,iBAAiB;AAAA,UACnD;AAGA,gBAAMA,IAAG,UAAUC,MAAK,QAAQ,SAAS,CAAC;AAG1C,gBAAMD,IAAG,KAAK,KAAK,QAAQ,MAAM,SAAS;AAG1C,gBAAM,QAAQ,MAAMA,IAAG,KAAK,SAAS;AACrC,gBAAM,WAAW;AAAA,YACf;AAAA,YACA,cAAc,KAAK,QAAQ;AAAA,YAC3B,MAAM;AAAA,YACN,KAAK,KAAK,aAAa,SAAS;AAAA,YAChC,MAAM,MAAM;AAAA,YACZ,UAAU,KAAK,YAAY,KAAK,YAAY,QAAQ;AAAA,YACpD,YAAY,oBAAI,KAAK;AAAA,YACrB;AAAA,YACA;AAAA,UACF;AAGA,cAAI,KAAK,OAAO;AACd,iBAAK,MAAM,IAAI,QAAQ,QAAQ,IAAI,QAAQ;AAAA,UAC7C;AAEA,iBAAO;AAAA,QACT,SAAS,OAAO;AACd,kBAAQ,MAAM,uBAAuB,KAAK;AAC1C,gBAAM;AAAA,QACR;AAAA,MACF;AAAA,MAEA,MAAM,QAAQ,UAAU,cAAc,WAAW;AAC/C,YAAI;AAEF,cAAI,KAAK,OAAO;AACd,kBAAM,SAAS,KAAK,MAAM,IAAI,QAAQ,QAAQ,EAAE;AAChD,gBAAI,OAAQ,QAAO;AAAA,UACrB;AAEA,gBAAM,WAAW,gBAAgB,WAAW,KAAK,aAAa,KAAK;AACnE,gBAAM,WAAWC,MAAK,KAAK,UAAU,QAAQ;AAE7C,cAAI,CAAC,MAAMD,IAAG,WAAW,QAAQ,GAAG;AAClC,kBAAM,IAAI,MAAM,QAAQ,QAAQ,YAAY;AAAA,UAC9C;AAEA,gBAAM,QAAQ,MAAMA,IAAG,KAAK,QAAQ;AACpC,gBAAM,WAAW;AAAA,YACf;AAAA,YACA,MAAM;AAAA,YACN,KAAK,KAAK,aAAa,QAAQ;AAAA,YAC/B,MAAM,MAAM;AAAA,YACZ,UAAU,KAAK,YAAY,QAAQ;AAAA,YACnC,YAAY,MAAM;AAAA,YAClB;AAAA,UACF;AAGA,cAAI,KAAK,OAAO;AACd,iBAAK,MAAM,IAAI,QAAQ,QAAQ,IAAI,QAAQ;AAAA,UAC7C;AAEA,iBAAO;AAAA,QACT,SAAS,OAAO;AACd,kBAAQ,MAAM,uBAAuB,KAAK;AAC1C,gBAAM;AAAA,QACR;AAAA,MACF;AAAA,MAEA,MAAM,WAAW,UAAU,cAAc,WAAW;AAClD,YAAI;AACF,gBAAM,WAAW,gBAAgB,WAAW,KAAK,aAAa,KAAK;AACnE,gBAAM,WAAWC,MAAK,KAAK,UAAU,QAAQ;AAE7C,cAAI,CAAC,MAAMD,IAAG,WAAW,QAAQ,GAAG;AAClC,kBAAM,IAAI,MAAM,QAAQ,QAAQ,YAAY;AAAA,UAC9C;AAEA,gBAAMA,IAAG,OAAO,QAAQ;AAGxB,cAAI,KAAK,OAAO;AACd,iBAAK,MAAM,OAAO,QAAQ,QAAQ,EAAE;AAAA,UACtC;AAEA,iBAAO,EAAE,SAAS,MAAM,SAAS,QAAQ,QAAQ,wBAAwB;AAAA,QAC3E,SAAS,OAAO;AACd,kBAAQ,MAAM,wBAAwB,KAAK;AAC3C,gBAAM;AAAA,QACR;AAAA,MACF;AAAA,MAEA,MAAM,UAAU,cAAc,WAAW,YAAY,IAAI,UAAU,CAAC,GAAG;AACrE,cAAM;AAAA,UACJ,YAAY;AAAA,UACZ,SAAS;AAAA,UACT,SAAS;AAAA,UACT,YAAY;AAAA,QACd,IAAI;AAEJ,YAAI;AACF,gBAAM,WAAW,gBAAgB,WAAW,KAAK,aAAa,KAAK;AACnE,gBAAM,aAAaC,MAAK,KAAK,UAAU,SAAS;AAEhD,cAAI,CAAC,MAAMD,IAAG,WAAW,UAAU,GAAG;AACpC,mBAAO,CAAC;AAAA,UACV;AAEA,gBAAM,QAAQ,MAAM,KAAK,cAAc,YAAY,SAAS;AAG5D,cAAI,gBAAgB;AACpB,cAAI,QAAQ;AACV,4BAAgB,MAAM,OAAO,UAAQ;AACnC,kBAAI,OAAO,WAAW,YAAY;AAChC,uBAAO,OAAO,IAAI;AAAA,cACpB;AACA,kBAAI,OAAO,WAAW,UAAU;AAC9B,uBAAO,KAAK,KAAK,SAAS,MAAM;AAAA,cAClC;AACA,kBAAI,OAAO,WAAW;AACpB,uBAAOC,MAAK,QAAQ,KAAK,IAAI,MAAM,OAAO;AAAA,cAC5C;AACA,kBAAI,OAAO,UAAU;AACnB,uBAAO,KAAK,SAAS,WAAW,OAAO,QAAQ;AAAA,cACjD;AACA,qBAAO;AAAA,YACT,CAAC;AAAA,UACH;AAGA,wBAAc,KAAK,CAAC,GAAG,MAAM;AAC3B,gBAAI,SAAS,EAAE,MAAM;AACrB,gBAAI,SAAS,EAAE,MAAM;AAErB,gBAAI,WAAW,UAAU,WAAW,cAAc;AAChD,uBAAS,UAAU;AACnB,uBAAS,UAAU;AAAA,YACrB,OAAO;AACL,uBAAS,OAAO,UAAU,EAAE,EAAE,YAAY;AAC1C,uBAAS,OAAO,UAAU,EAAE,EAAE,YAAY;AAAA,YAC5C;AAEA,gBAAI,cAAc,QAAQ;AACxB,eAAC,QAAQ,MAAM,IAAI,CAAC,QAAQ,MAAM;AAAA,YACpC;AAEA,gBAAI,SAAS,OAAQ,QAAO;AAC5B,gBAAI,SAAS,OAAQ,QAAO;AAC5B,mBAAO;AAAA,UACT,CAAC;AAED,iBAAO;AAAA,QACT,SAAS,OAAO;AACd,kBAAQ,MAAM,wBAAwB,KAAK;AAC3C,gBAAM;AAAA,QACR;AAAA,MACF;AAAA,MAEA,MAAM,cAAc,SAAS,YAAY,OAAO;AAC9C,cAAM,QAAQ,CAAC;AAEf,YAAI;AACF,gBAAM,UAAU,MAAMD,IAAG,QAAQ,SAAS,EAAE,eAAe,KAAK,CAAC;AAEjE,qBAAW,SAAS,SAAS;AAC3B,kBAAM,WAAWC,MAAK,KAAK,SAAS,MAAM,IAAI;AAC9C,kBAAM,eAAeA,MAAK,SAAS,KAAK,aAAa,QAAQ;AAE7D,gBAAI,MAAM,YAAY,KAAK,WAAW;AACpC,oBAAM,WAAW,MAAM,KAAK,cAAc,UAAU,SAAS;AAC7D,oBAAM,KAAK,GAAG,QAAQ;AAAA,YACxB,WAAW,MAAM,OAAO,GAAG;AACzB,oBAAM,QAAQ,MAAMD,IAAG,KAAK,QAAQ;AACpC,oBAAM,KAAK;AAAA,gBACT,MAAM,MAAM;AAAA,gBACZ,MAAM;AAAA,gBACN;AAAA,gBACA,KAAK,KAAK,aAAa,QAAQ;AAAA,gBAC/B,MAAM,MAAM;AAAA,gBACZ,UAAU,KAAK,YAAY,MAAM,IAAI;AAAA,gBACrC,YAAY,MAAM;AAAA,gBAClB,WAAW,MAAM;AAAA,cACnB,CAAC;AAAA,YACH;AAAA,UACF;AAAA,QACF,SAAS,OAAO;AACd,kBAAQ,MAAM,4BAA4B,OAAO,KAAK,KAAK;AAAA,QAC7D;AAEA,eAAO;AAAA,MACT;AAAA;AAAA,MAGA,aAAa,UAAU;AACrB,cAAM,eAAeC,MAAK,SAAS,KAAK,aAAa,QAAQ;AAC7D,eAAO,YAAY,aAAa,QAAQ,OAAO,GAAG,CAAC;AAAA,MACrD;AAAA,MAEA,MAAM,gBAAgB,UAAU;AAC9B,YAAI;AACF,gBAAM,WAAWA,MAAK,KAAK,KAAK,aAAa,QAAQ;AAErD,cAAI,CAAC,MAAMD,IAAG,WAAW,QAAQ,GAAG;AAClC,kBAAM,IAAI,MAAM,gBAAgB;AAAA,UAClC;AAEA,gBAAM,QAAQ,MAAMA,IAAG,KAAK,QAAQ;AACpC,gBAAM,SAASA,IAAG,iBAAiB,QAAQ;AAE3C,iBAAO;AAAA,YACL;AAAA,YACA;AAAA,YACA,UAAU,KAAK,YAAY,QAAQ;AAAA,UACrC;AAAA,QACF,SAAS,OAAO;AACd,kBAAQ,MAAM,8BAA8B,KAAK;AACjD,gBAAM;AAAA,QACR;AAAA,MACF;AAAA;AAAA,MAGA,MAAM,aAAa,MAAM;AAEvB,YAAI,KAAK,QAAQ,KAAK,OAAO,KAAK,QAAQ,aAAa;AACrD,gBAAM,IAAI,MAAM,6CAA6C,KAAK,YAAY,KAAK,QAAQ,WAAW,CAAC,EAAE;AAAA,QAC3G;AAGA,YAAI,KAAK,YAAY,CAAC,KAAK,cAAc,KAAK,QAAQ,GAAG;AACvD,gBAAM,IAAI,MAAM,aAAa,KAAK,QAAQ,iBAAiB;AAAA,QAC7D;AAEA,eAAO;AAAA,MACT;AAAA,MAEA,cAAc,UAAU;AACtB,eAAO,KAAK,QAAQ,aAAa,KAAK,aAAW;AAC/C,cAAI,QAAQ,SAAS,IAAI,GAAG;AAC1B,mBAAO,SAAS,WAAW,QAAQ,MAAM,GAAG,EAAE,CAAC;AAAA,UACjD;AACA,iBAAO,aAAa;AAAA,QACtB,CAAC;AAAA,MACH;AAAA;AAAA,MAGA,YAAY,UAAU;AACpB,cAAM,MAAMC,MAAK,QAAQ,QAAQ,EAAE,YAAY;AAC/C,cAAM,YAAY;AAAA,UAChB,SAAS;AAAA,UACT,QAAQ;AAAA,UACR,OAAO;AAAA,UACP,SAAS;AAAA,UACT,QAAQ;AAAA,UACR,QAAQ;AAAA,UACR,SAAS;AAAA,UACT,QAAQ;AAAA,UACR,QAAQ;AAAA,UACR,QAAQ;AAAA,UACR,SAAS;AAAA,UACT,UAAU;AAAA,UACV,QAAQ;AAAA,UACR,QAAQ;AAAA,UACR,QAAQ;AAAA,UACR,QAAQ;AAAA,UACR,OAAO;AAAA,UACP,QAAQ;AAAA,UACR,QAAQ;AAAA,QACV;AAEA,eAAO,UAAU,GAAG,KAAK;AAAA,MAC3B;AAAA,MAEA,YAAY,OAAO;AACjB,YAAI,UAAU,EAAG,QAAO;AACxB,cAAM,IAAI;AACV,cAAM,QAAQ,CAAC,SAAS,MAAM,MAAM,IAAI;AACxC,cAAM,IAAI,KAAK,MAAM,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,CAAC,CAAC;AAClD,eAAO,YAAY,QAAQ,KAAK,IAAI,GAAG,CAAC,GAAG,QAAQ,CAAC,CAAC,IAAI,MAAM,MAAM,CAAC;AAAA,MACxE;AAAA;AAAA,MAGA,MAAM,kBAAkB;AACtB,YAAI;AACF,gBAAM,cAAc,MAAM,KAAK,kBAAkB,KAAK,UAAU;AAChE,gBAAM,eAAe,MAAM,KAAK,kBAAkB,KAAK,WAAW;AAClE,gBAAM,YAAY,MAAM,KAAK,kBAAkB,KAAK,QAAQ;AAE5D,iBAAO;AAAA,YACL,QAAQ;AAAA,YACR,SAAS;AAAA,YACT,MAAM;AAAA,YACN,OAAO;AAAA,cACL,OAAO,YAAY,QAAQ,aAAa,QAAQ,UAAU;AAAA,cAC1D,MAAM,YAAY,OAAO,aAAa,OAAO,UAAU;AAAA,YACzD;AAAA,YACA,OAAO,KAAK,QAAQ,KAAK,MAAM,SAAS,IAAI;AAAA,UAC9C;AAAA,QACF,SAAS,OAAO;AACd,kBAAQ,MAAM,gCAAgC,KAAK;AACnD,gBAAM;AAAA,QACR;AAAA,MACF;AAAA,MAEA,MAAM,kBAAkB,SAAS;AAC/B,YAAI;AACF,cAAI,CAAC,MAAMD,IAAG,WAAW,OAAO,GAAG;AACjC,mBAAO,EAAE,OAAO,GAAG,MAAM,GAAG,aAAa,EAAE;AAAA,UAC7C;AAEA,gBAAM,QAAQ,MAAM,KAAK,cAAc,SAAS,IAAI;AACpD,gBAAM,YAAY,MAAM,OAAO,CAAC,KAAK,SAAS,MAAM,KAAK,MAAM,CAAC;AAChE,gBAAM,cAAc,IAAI,IAAI,MAAM,IAAI,OAAKC,MAAK,QAAQ,EAAE,YAAY,CAAC,CAAC,EAAE;AAE1E,iBAAO;AAAA,YACL,OAAO,MAAM;AAAA,YACb,MAAM;AAAA,YACN;AAAA,UACF;AAAA,QACF,SAAS,OAAO;AACd,kBAAQ,MAAM,qCAAqC,OAAO,KAAK,KAAK;AACpE,iBAAO,EAAE,OAAO,GAAG,MAAM,GAAG,aAAa,EAAE;AAAA,QAC7C;AAAA,MACF;AAAA;AAAA,MAGA,MAAM,iBAAiB,SAAS,KAAK,KAAK,KAAK,KAAM;AACnD,YAAI;AACF,gBAAM,QAAQ,MAAM,KAAK,cAAc,KAAK,UAAU,IAAI;AAC1D,gBAAM,MAAM,KAAK,IAAI;AACrB,cAAI,eAAe;AAEnB,qBAAW,QAAQ,OAAO;AACxB,gBAAI,MAAM,KAAK,WAAW,QAAQ,IAAI,QAAQ;AAC5C,oBAAM,KAAK,WAAW,KAAK,MAAM,MAAM;AACvC;AAAA,YACF;AAAA,UACF;AAEA,iBAAO,EAAE,cAAc,SAAS,WAAW,YAAY,mBAAmB;AAAA,QAC5E,SAAS,OAAO;AACd,kBAAQ,MAAM,8BAA8B,KAAK;AACjD,gBAAM;AAAA,QACR;AAAA,MACF;AAAA;AAAA,MAGA,MAAM,aAAa,YAAY;AAC7B,YAAI;AACF,gBAAMD,IAAG,UAAUC,MAAK,QAAQ,UAAU,CAAC;AAC3C,gBAAMD,IAAG,KAAK,KAAK,aAAa,UAAU;AAC1C,iBAAO,EAAE,SAAS,MAAM,WAAW;AAAA,QACrC,SAAS,OAAO;AACd,kBAAQ,MAAM,0BAA0B,KAAK;AAC7C,gBAAM;AAAA,QACR;AAAA,MACF;AAAA,MAEA,MAAM,kBAAkB,YAAY;AAClC,YAAI;AACF,cAAI,CAAC,MAAMA,IAAG,WAAW,UAAU,GAAG;AACpC,kBAAM,IAAI,MAAM,4BAA4B;AAAA,UAC9C;AAGA,gBAAM,aAAY,oBAAI,KAAK,GAAE,YAAY,EAAE,QAAQ,SAAS,GAAG;AAC/D,gBAAM,gBAAgBC,MAAK,KAAKA,MAAK,QAAQ,KAAK,WAAW,GAAG,yBAAyB,SAAS,EAAE;AACpG,gBAAM,KAAK,aAAa,aAAa;AAGrC,gBAAMD,IAAG,OAAO,KAAK,WAAW;AAChC,gBAAMA,IAAG,KAAK,YAAY,KAAK,WAAW;AAE1C,iBAAO,EAAE,SAAS,MAAM,SAAS,gCAAgC;AAAA,QACnE,SAAS,OAAO;AACd,kBAAQ,MAAM,gCAAgC,KAAK;AACnD,gBAAM;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAGO,IAAM,iBAAiB,IAAI,eAAe;AAAA;AAAA;;;ACjdjD;AAAA;AAAA;AAAA;AAGA,SAAS,oBAAoB;AAC7B,SAAS,wBAAwB;AACjC,SAAS,MAAM,UAAU,SAAS,cAAc;AAChD,SAAS,SAAS,MAAM,eAAe;AAIvC,OAAO,WAAW;AAkBlB,eAAsB,UAAU,UAAU,CAAC,GAAG;AAC5C,QAAM;AAAA,IACJ,OAAO;AAAA,IACP,OAAO;AAAA,IACP,OAAO,QAAQ,IAAI;AAAA,IACnB,MAAM;AAAA,IACN,UAAU;AAAA,IACV,UAAU;AAAA,EACZ,IAAI;AAEJ,UAAQ,IAAI,MAAM,KAAK,6CAA6C,CAAC;AAErE,MAAI;AAEF,YAAQ,IAAI,MAAM,KAAK,mCAAmC,CAAC;AAC3D,UAAM,cAAc,kBAAkB;AAGtC,YAAQ,IAAI,MAAM,KAAK,0CAA0C,CAAC;AAClE,UAAM,eAAe,kBAAkB;AAGvC,UAAM,aAAa,cAAc,IAAI,eAAe,IAAI;AACxD,UAAM,aAAa,cAAc,IAAI,eAAe,IAAI;AACxD,UAAM,YAAY,QAAQ;AAC1B,UAAM,YAAY,QAAQ;AAE1B,UAAM,WAAW,IAAI,aAAa;AAAA,MAChC,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,YAAY;AAAA,MACZ,eAAe;AAAA,MACf,WAAW;AAAA,IACb,CAAC;AAGH,UAAM,eAAe,oBAAI,IAAI;AAC7B,UAAM,eAAe,oBAAI,IAAI;AAG7B,UAAM,cAAc,oBAAI,IAAI;AAE5B,UAAM,SAAS,aAAa,OAAO,KAAK,QAAQ;AAC9C,UAAI;AACF,cAAM,MAAM,IAAI,IAAI,IAAI,KAAK,UAAU,SAAS,IAAI,SAAS,EAAE;AAC/D,YAAI,WAAW,IAAI;AAGnB,YAAI,aAAa,KAAK;AAEpB,gBAAM,YAAY,QAAQ,MAAM,SAAS,YAAY;AACrD,cAAI;AACF,kBAAM,OAAO,SAAS;AACtB,kBAAM,UAAU,WAAW,GAAG;AAC9B;AAAA,UACF,QAAQ;AAAA,UAAC;AACT,qBAAW;AAAA,QACb;AAGA,mBAAW,SAAS,UAAU,CAAC;AAG/B,YAAI,SAAS,SAAS,IAAI,GAAG;AAC3B,cAAI,UAAU,GAAG;AACjB,cAAI,IAAI,WAAW;AACnB;AAAA,QACF;AAEA,cAAM,WAAW,QAAQ,MAAM,QAAQ;AAEvC,YAAI;AACF,gBAAM,QAAQ,MAAM,KAAK,QAAQ;AAEjC,cAAI,MAAM,YAAY,GAAG;AAEvB,kBAAM,YAAY,KAAK,UAAU,YAAY;AAC7C,gBAAI;AACF,oBAAM,OAAO,SAAS;AACtB,oBAAM,UAAU,WAAW,GAAG;AAAA,YAChC,QAAQ;AAEN,kBAAI,aAAa,QAAQ,IAAI,GAAG;AAC9B,sBAAM,YAAY,QAAQ,MAAM,SAAS,YAAY;AACrD,oBAAI;AACF,wBAAM,OAAO,SAAS;AACtB,wBAAM,UAAU,WAAW,GAAG;AAC9B;AAAA,gBACF,QAAQ;AAAA,gBAAC;AAAA,cACX;AAEA,oBAAM,sBAAsB,UAAU,KAAK,QAAQ;AAAA,YACrD;AAAA,UACF,OAAO;AACL,kBAAM,UAAU,UAAU,GAAG;AAAA,UAC/B;AAAA,QACF,SAAS,OAAO;AAEd,cAAI,SAAS,WAAW,UAAU,GAAG;AACnC,gBAAI;AACF,oBAAM,iBAAiB,UAAU,GAAG;AACpC;AAAA,YACF,SAAS,cAAc;AACrB,sBAAQ,IAAI,2BAA2B,QAAQ,EAAE;AAAA,YACnD;AAAA,UACF;AAGA,cAAI,SAAS,SAAS,KAAK,KAAK,CAAC,SAAS,SAAS,cAAc,GAAG;AAClE,kBAAM,WAAW,SAAS,QAAQ,SAAS,OAAO;AAClD,kBAAM,eAAe,QAAQ,MAAM,QAAQ;AAE3C,gBAAI;AACF,oBAAM,OAAO,YAAY;AACzB,oBAAM,oBAAoB,cAAc,KAAK,QAAQ;AACrD;AAAA,YACF,QAAQ;AAAA,YAER;AAAA,UACF;AAGA,cAAI,SAAS,SAAS,OAAO,KAAK,SAAS,WAAW,QAAQ,GAAG;AAC/D,kBAAM,WAAW,QAAQ,MAAM,SAAS,SAAS,QAAQ,aAAa,EAAE,CAAC;AACzE,gBAAI;AACF,oBAAM,OAAO,QAAQ;AACrB,oBAAM,UAAU,UAAU,GAAG;AAC7B;AAAA,YACF,QAAQ;AAAA,YAAC;AAAA,UACX;AAGA,gBAAM,aAAa,QAAQ,MAAM,UAAU,QAAQ;AACnD,cAAI;AACF,kBAAM,OAAO,UAAU;AACvB,kBAAM,UAAU,YAAY,GAAG;AAAA,UACjC,QAAQ;AAEN,kBAAM,SAAS,KAAK,QAAQ;AAAA,UAC9B;AAAA,QACF;AAAA,MACF,SAAS,OAAO;AACd,gBAAQ,MAAM,iBAAiB,KAAK;AACpC,YAAI,UAAU,GAAG;AACjB,YAAI,IAAI,uBAAuB;AAAA,MACjC;AAAA,IACF,CAAC;AAGD,WAAO,GAAG,WAAW,CAAC,SAAS,QAAQ,SAAS;AAC9C,UAAI,QAAQ,QAAQ,uBAAuB;AACzC,cAAM,KAAK,IAAIK,WAAU;AACzB,WAAG,UAAU,QAAQ,SAAS,IAAI;AAElC,oBAAY,IAAI,EAAE;AAElB,WAAG,GAAG,SAAS,MAAM;AACnB,sBAAY,OAAO,EAAE;AAAA,QACvB,CAAC;AAED,WAAG,GAAG,WAAW,CAAC,YAAY;AAC5B,cAAI;AACF,kBAAM,OAAO,KAAK,MAAM,OAAO;AAC/B,gBAAI,KAAK,SAAS,QAAQ;AACxB,iBAAG,KAAK,KAAK,UAAU,EAAE,MAAM,OAAO,CAAC,CAAC;AAAA,YAC1C;AAAA,UACF,SAAS,OAAO;AACd,oBAAQ,MAAM,4BAA4B,KAAK;AAAA,UACjD;AAAA,QACF,CAAC;AAAA,MACH;AAAA,IACF,CAAC;AAED,WAAO,OAAO,WAAW,WAAW,MAAM;AACxC,cAAQ,IAAI,MAAM,MAAM,qCAAqC,SAAS,IAAI,SAAS,EAAE,CAAC;AACtF,cAAQ,IAAI,MAAM,KAAK,UAAU,IAAI,EAAE,CAAC;AACxC,cAAQ,IAAI,MAAM,KAAK,aAAa,cAAc,IAAI,gBAAgB,OAAO,CAAC,EAAE,CAAC;AACjF,cAAQ,IAAI,MAAM,OAAO,SAAS,MAAM,YAAY,UAAU,EAAE,CAAC;AACjE,cAAQ,IAAI,MAAM,KAAK,sBAAsB,CAAC;AAAA,IAChD,CAAC;AAGD,UAAM,kBAAkB,MAAM,UAAU,WAAW;AAEnD,WAAO;AAAA,EAEP,SAAS,OAAO;AACd,YAAQ,MAAM,MAAM,IAAI,4CAAuC,GAAG,KAAK;AACvE,UAAM;AAAA,EACR;AACF;AAEA,eAAe,UAAU,UAAU,KAAK;AACtC,QAAM,MAAM,QAAQ,QAAQ;AAC5B,QAAM,WAAW,WAAW,GAAG,KAAK;AAEpC,MAAI,UAAU,gBAAgB,QAAQ;AACtC,MAAI,UAAU,iBAAiB,UAAU;AAEzC,QAAM,SAAS,iBAAiB,QAAQ;AACxC,SAAO,KAAK,GAAG;AAEf,SAAO,GAAG,SAAS,CAAC,UAAU;AAC5B,YAAQ,MAAM,uBAAuB,KAAK;AAC1C,QAAI,UAAU,GAAG;AACjB,QAAI,IAAI,oBAAoB;AAAA,EAC9B,CAAC;AACH;AAEA,eAAe,sBAAsB,SAAS,KAAK,SAAS;AAC1D,MAAI;AACF,UAAM,QAAQ,MAAM,QAAQ,OAAO;AAEnC,QAAI,UAAU,gBAAgB,WAAW;AACzC,QAAI,UAAU,GAAG;AAEjB,UAAM,OAAO;AAAA;AAAA;AAAA;AAAA,wBAIO,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAUV,OAAO;AAAA;AAAA,UAElB,MAAM,IAAI,UAAQ;AAClB,YAAM,QAAQ,KAAK,SAAS,GAAG,MAAM;AACrC,YAAM,YAAY,QAAQ,QAAQ;AAClC,YAAM,OAAO,QAAQ,GAAG,IAAI,MAAM;AAClC,aAAO,eAAe,SAAS,cAAc,IAAI,KAAK,IAAI;AAAA,IAC5D,CAAC,EAAE,KAAK,EAAE,CAAC;AAAA;AAAA;AAAA;AAKf,QAAI,IAAI,IAAI;AAAA,EACd,SAAS,OAAO;AACd,QAAI,UAAU,GAAG;AACjB,QAAI,IAAI,yBAAyB;AAAA,EACnC;AACF;AAEA,eAAe,iBAAiB,UAAU,KAAK;AAC7C,MAAI;AAEF,UAAM,eAAe,SAAS,QAAQ,cAAc,EAAE;AAGtD,UAAM,WAAW,MAAM,eAAe,gBAAgB,YAAY;AAGlE,QAAI,UAAU,KAAK;AAAA,MACjB,gBAAgB,SAAS;AAAA,MACzB,kBAAkB,SAAS,MAAM;AAAA,MACjC,iBAAiB;AAAA;AAAA,IACnB,CAAC;AAGD,aAAS,OAAO,KAAK,GAAG;AAExB,YAAQ,IAAI,MAAM,KAAK,0BAA0B,QAAQ,EAAE,CAAC;AAAA,EAC9D,SAAS,OAAO;AACd,YAAQ,MAAM,MAAM,IAAI,8BAAyB,MAAM,OAAO,EAAE,CAAC;AACjE,QAAI,UAAU,KAAK,EAAE,gBAAgB,aAAa,CAAC;AACnD,QAAI,IAAI,gBAAgB;AAAA,EAC1B;AACF;AAEA,eAAe,oBAAoB,UAAU,KAAK,UAAU;AAC1D,MAAI;AACF,UAAM,SAAS,MAAM,SAAS,YAAY,QAAQ;AAElD,QAAI,CAAC,QAAQ;AACX,UAAI,UAAU,GAAG;AACjB,UAAI,IAAI,oBAAoB;AAC5B;AAAA,IACF;AAEA,QAAI,UAAU,gBAAgB,iBAAiB;AAC/C,QAAI,UAAU,iBAAiB,UAAU;AACzC,QAAI,UAAU,GAAG;AACjB,QAAI,IAAI,OAAO,MAAM;AAErB,YAAQ,IAAI,MAAM,MAAM,oBAAe,QAAQ,EAAE,CAAC;AAAA,EACpD,SAAS,OAAO;AACd,YAAQ,MAAM,MAAM,IAAI,6BAAwB,MAAM,OAAO,EAAE,CAAC;AAChE,QAAI,UAAU,GAAG;AACjB,QAAI,IAAI,sBAAsB,MAAM,OAAO,EAAE;AAAA,EAC/C;AACF;AAEA,eAAe,SAAS,KAAK,UAAU;AACrC,MAAI,UAAU,gBAAgB,WAAW;AACzC,MAAI,UAAU,GAAG;AAEjB,QAAM,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAa4B,QAAQ;AAAA;AAAA;AAIjD,MAAI,IAAI,IAAI;AACd;AAEA,eAAe,kBAAkB,MAAM,UAAU,aAAa;AAI5D,QAAM,gBAAgB,YAAY,YAAY;AAC5C,QAAI;AAEF,YAAM,OAAO,CAAC,OAAO,UAAU,SAAS,cAAc,UAAU,OAAO;AAEvE,iBAAW,OAAO,MAAM;AACtB,cAAM,UAAU,KAAK,MAAM,GAAG;AAC9B,YAAI;AACF,gBAAM,OAAO,OAAO;AAAA,QAGtB,QAAQ;AAAA,QAER;AAAA,MACF;AAAA,IACF,SAAS,OAAO;AACd,cAAQ,MAAM,wBAAwB,KAAK;AAAA,IAC7C;AAAA,EACF,GAAG,GAAI;AAGP,UAAQ,GAAG,UAAU,MAAM;AACzB,kBAAc,aAAa;AAC3B,YAAQ,KAAK,CAAC;AAAA,EAChB,CAAC;AACH;AA3XA,IAYM,YAkXAA;AA9XN;AAAA;AAOA;AACA;AACA;AAGA,IAAM,aAAa;AAAA,MACjB,SAAS;AAAA,MACT,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,SAAS;AAAA,MACT,UAAU;AAAA,MACV,QAAQ;AAAA,MACR,QAAQ;AAAA,IACV;AAoWA,IAAMA,aAAN,MAAgB;AAAA,MACd,cAAc;AACZ,aAAK,SAAS;AAAA,MAChB;AAAA,MAEA,UAAU,QAAQ,SAAS,MAAM;AAC/B,aAAK,SAAS;AAGd,cAAM,MAAM,QAAQ,QAAQ,mBAAmB;AAC/C,cAAM,SAAS,KAAK,eAAe,GAAG;AAEtC,cAAM,WAAW;AAAA,UACf;AAAA,UACA;AAAA,UACA;AAAA,UACA,yBAAyB,MAAM;AAAA,UAC/B;AAAA,UACA;AAAA,QACF,EAAE,KAAK,MAAM;AAEb,eAAO,MAAM,QAAQ;AAErB,eAAO,GAAG,QAAQ,CAAC,SAAS;AAC1B,eAAK,cAAc,IAAI;AAAA,QACzB,CAAC;AAED,eAAO,GAAG,SAAS,MAAM;AACvB,eAAK,SAAS;AAAA,QAChB,CAAC;AAAA,MACH;AAAA,MAEA,eAAe,KAAK;AAClB,cAAM,SAAS,UAAQ,QAAQ;AAC/B,cAAM,QAAQ;AACd,cAAM,OAAO,OAAO,WAAW,MAAM,EAAE,OAAO,MAAM,KAAK,EAAE,OAAO,QAAQ;AAC1E,eAAO;AAAA,MACT;AAAA,MAEA,cAAc,MAAM;AAElB,YAAI,KAAK,SAAS,EAAG;AAErB,cAAM,SAAS,KAAK,CAAC,IAAI;AACzB,cAAM,gBAAgB,KAAK,CAAC,IAAI;AAEhC,YAAI,WAAW,GAAG;AAChB,eAAK,OAAO,IAAI;AAChB;AAAA,QACF;AAEA,YAAI,WAAW,KAAK,gBAAgB,GAAG;AACrC,gBAAM,UAAU,KAAK,MAAM,GAAG,IAAI,aAAa;AAC/C,gBAAM,UAAU,QAAQ,SAAS,MAAM;AAEvC,eAAK,KAAK,WAAW,OAAO;AAAA,QAC9B;AAAA,MACF;AAAA,MAEA,KAAK,MAAM;AACT,YAAI,KAAK,UAAU,CAAC,KAAK,OAAO,WAAW;AACzC,gBAAM,UAAU,OAAO,SAAS,WAAW,OAAO,KAAK,UAAU,IAAI;AACrE,gBAAM,QAAQ,KAAK,YAAY,OAAO;AACtC,eAAK,OAAO,MAAM,KAAK;AAAA,QACzB;AAAA,MACF;AAAA,MAEA,YAAY,SAAS;AACnB,cAAM,SAAS,OAAO,WAAW,OAAO;AACxC,cAAM,QAAQ,OAAO,MAAM,IAAI,MAAM;AAErC,cAAM,CAAC,IAAI;AACX,cAAM,CAAC,IAAI;AACX,cAAM,MAAM,SAAS,CAAC;AAEtB,eAAO;AAAA,MACT;AAAA,MAEA,GAAG,OAAO,UAAU;AAClB,YAAI,UAAU,WAAW;AACvB,eAAK,kBAAkB;AAAA,QACzB,WAAW,UAAU,SAAS;AAC5B,eAAK,gBAAgB;AAAA,QACvB;AAAA,MACF;AAAA,MAEA,KAAK,OAAO,MAAM;AAChB,YAAI,UAAU,aAAa,KAAK,iBAAiB;AAC/C,eAAK,gBAAgB,IAAI;AAAA,QAC3B,WAAW,UAAU,WAAW,KAAK,eAAe;AAClD,eAAK,cAAc;AAAA,QACrB;AAAA,MACF;AAAA,IACF;AAAA;AAAA;;;ACvdA;AACA;AAHA,SAAS,eAAe;AACxB,OAAOC,YAAW;AAGlB,OAAOC,SAAQ;AACf,OAAOC,WAAU;AACjB,SAAS,iBAAAC,sBAAqB;AAE9B,IAAMC,cAAaD,eAAc,YAAY,GAAG;AAChD,IAAME,aAAYH,MAAK,QAAQE,WAAU;AAEzC,IAAM,cAAN,MAAkB;AAAA,EAChB,cAAc;AACZ,SAAK,UAAU,IAAI,QAAQ;AAC3B,SAAK,WAAW,IAAI,aAAa;AACjC,SAAK,cAAc;AAAA,EACrB;AAAA,EAEA,gBAAgB;AACd,SAAK,QACF,KAAK,MAAM,EACX,YAAY,mDAAmD,EAC/D,QAAQ,OAAO;AAGlB,SAAK,QACF,QAAQ,oBAAoB,EAC5B,YAAY,mDAAmD,EAC/D,OAAO,6BAA6B,iDAAiD,OAAO,EAC5F,OAAO,aAAa,+BAA+B,EACnD,OAAO,gBAAgB,2BAA2B,EAClD,OAAO,aAAa,uBAAuB,EAC3C,OAAO,aAAa,+BAA+B,EACnD,OAAO,KAAK,cAAc,KAAK,IAAI,CAAC;AAGvC,SAAK,QACF,QAAQ,KAAK,EACb,YAAY,iDAAiD,EAC7D,OAAO,qBAAqB,eAAe,MAAM,EACjD,OAAO,qBAAqB,gBAAgB,WAAW,EACvD,OAAO,SAAS,+BAA+B,EAC/C,OAAO,aAAa,wBAAwB,EAC5C,OAAO,aAAa,8BAA8B,EAClD,OAAO,KAAK,eAAe,KAAK,IAAI,CAAC;AAGxC,SAAK,QACF,QAAQ,OAAO,EACf,YAAY,2CAA2C,EACvD,OAAO,sBAAsB,oBAAoB,MAAM,EACvD,OAAO,YAAY,eAAe,EAClC,OAAO,iBAAiB,sBAAsB,EAC9C,OAAO,aAAa,gBAAgB,EACpC,OAAO,WAAW,YAAY,EAC9B,OAAO,KAAK,aAAa,KAAK,IAAI,CAAC;AAGtC,SAAK,QACF,QAAQ,MAAM,EACd,YAAY,kCAAkC,EAC9C,OAAO,WAAW,YAAY,EAC9B,OAAO,cAAc,0BAA0B,EAC/C,OAAO,cAAc,uBAAuB,EAC5C,OAAO,oBAAoB,4BAA4B,EACvD,OAAO,KAAK,SAAS,KAAK,IAAI,CAAC;AAGlC,SAAK,QACF,QAAQ,OAAO,EACf,YAAY,uCAAuC,EACnD,OAAO,aAAa,0BAA0B,EAC9C,OAAO,oBAAoB,sBAAsB,EACjD,OAAO,aAAa,sBAAsB,EAC1C,OAAO,UAAU,wBAAwB,EACzC,OAAO,KAAK,iBAAiB,KAAK,IAAI,CAAC;AAG1C,SAAK,QACF,QAAQ,SAAS,EACjB,YAAY,iCAAiC,EAC7C,OAAO,SAAS,eAAe,EAC/B,OAAO,YAAY,kBAAkB,EACrC,OAAO,aAAa,mBAAmB,EACvC,OAAO,mBAAmB,yBAAyB,EACnD,OAAO,KAAK,mBAAmB,KAAK,IAAI,CAAC;AAG5C,SAAK,QACF,QAAQ,IAAI,EACZ,YAAY,8BAA8B,EAC1C,OAAO,aAAa,gBAAgB,EACpC,OAAO,UAAU,eAAe,EAChC,OAAO,WAAW,gBAAgB,EAClC,OAAO,KAAK,eAAe,KAAK,IAAI,CAAC;AAGxC,SAAK,QACF,QAAQ,QAAQ,EAChB,YAAY,oBAAoB,EAChC,OAAO,uBAAuB,0BAA0B,YAAY,EACpE,OAAO,yBAAyB,qBAAqB,EACrD,OAAO,qBAAqB,mBAAmB,EAC/C,OAAO,KAAK,kBAAkB,KAAK,IAAI,CAAC;AAG3C,SAAK,QACF,QAAQ,aAAa,EACrB,YAAY,kCAAkC,EAC9C,OAAO,WAAW,uBAAuB,EACzC,OAAO,YAAY,qBAAqB,EACxC,OAAO,WAAW,gBAAgB,EAClC,OAAO,KAAK,iBAAiB,KAAK,IAAI,CAAC;AAG1C,SAAK,QACF,QAAQ,wBAAwB,EAChC,MAAM,GAAG,EACT,YAAY,4CAA4C,EACxD,OAAO,mBAAmB,uCAAuC,EACjE,OAAO,KAAK,iBAAiB,KAAK,IAAI,CAAC;AAAA,EAC5C;AAAA,EAEA,MAAM,cAAc,aAAa,SAAS;AACxC,YAAQ,IAAIJ,OAAM,KAAK,gCAAgC,WAAW,EAAE,CAAC;AAErE,QAAI;AACF,YAAM,aAAaE,MAAK,QAAQ,WAAW;AAE3C,UAAI,MAAMD,IAAG,WAAW,UAAU,GAAG;AACnC,gBAAQ,MAAMD,OAAM,IAAI,aAAa,WAAW,iBAAiB,CAAC;AAClE,gBAAQ,KAAK,CAAC;AAAA,MAChB;AAEA,YAAMC,IAAG,UAAU,UAAU;AAG7B,YAAM,KAAK,uBAAuB,YAAY,QAAQ,UAAU,OAAO;AAGvE,YAAM,KAAK,oBAAoB,YAAY,OAAO;AAElD,cAAQ,IAAID,OAAM,MAAM,gBAAgB,WAAW,UAAU,CAAC;AAC9D,cAAQ,IAAIA,OAAM,KAAK,SAAS,UAAU,EAAE,CAAC;AAC7C,cAAQ,IAAIA,OAAM,OAAO,QAAQ,CAAC;AAClC,cAAQ,IAAIA,OAAM,OAAO,SAAS,WAAW,EAAE,CAAC;AAChD,cAAQ,IAAIA,OAAM,OAAO,gBAAgB,CAAC;AAAA,IAE5C,SAAS,OAAO;AACd,cAAQ,MAAMA,OAAM,IAAI,yBAAyB,GAAG,KAAK;AACzD,cAAQ,KAAK,CAAC;AAAA,IAChB;AAAA,EACF;AAAA,EAEA,MAAM,uBAAuB,YAAY,UAAU,SAAS;AAC1D,UAAM,YAAY;AAAA,MAChB,OAAO,KAAK,oBAAoB,KAAK,IAAI;AAAA,MACzC,WAAW,KAAK,wBAAwB,KAAK,IAAI;AAAA,MACjD,KAAK,KAAK,kBAAkB,KAAK,IAAI;AAAA,MACrC,KAAK,KAAK,kBAAkB,KAAK,IAAI;AAAA,IACvC;AAEA,UAAM,aAAa,UAAU,QAAQ,KAAK,UAAU;AACpD,UAAM,WAAW,YAAY,OAAO;AAAA,EACtC;AAAA,EAEA,MAAM,oBAAoB,YAAY,SAAS;AAC7C,UAAM,QAAQ;AAAA,MACZ,gBAAgB,KAAK,oBAAoB,OAAO;AAAA,MAChD,kBAAkB,KAAK,mBAAmB,OAAO;AAAA,MACjD,aAAa,KAAK,eAAe,OAAO;AAAA,MACxC,gBAAgB,KAAK,gBAAgB,OAAO;AAAA,MAC5C,8BAA8B,KAAK,wBAAwB;AAAA,MAC3D,8BAA8B,KAAK,wBAAwB;AAAA,MAC3D,uBAAuB,KAAK,iBAAiB;AAAA,MAC7C,yBAAyB,KAAK,kBAAkB;AAAA,MAChD,cAAc,KAAK,kBAAkB;AAAA,MACrC,oBAAoB,KAAK,kBAAkB;AAAA,IAC7C;AAEA,eAAW,CAAC,UAAU,OAAO,KAAK,OAAO,QAAQ,KAAK,GAAG;AACvD,YAAM,WAAWE,MAAK,KAAK,YAAY,QAAQ;AAC/C,YAAMD,IAAG,UAAUC,MAAK,QAAQ,QAAQ,CAAC;AACzC,YAAMD,IAAG,UAAU,UAAU,OAAO;AAAA,IACtC;AAAA,EACF;AAAA,EAEA,MAAM,wBAAwB,YAAY,SAAS;AAEjD,UAAM,KAAK,oBAAoB,YAAY,OAAO;AAGlD,UAAM,iBAAiB;AAAA,MACrB,uBAAuB,KAAK,mBAAmB;AAAA,MAC/C,0BAA0B,KAAK,uBAAuB;AAAA,MACtD,qBAAqB,KAAK,kBAAkB;AAAA,MAC5C,0BAA0B,KAAK,uBAAuB;AAAA,MACtD,sBAAsB,KAAK,sBAAsB;AAAA,MACjD,0BAA0B,KAAK,uBAAuB;AAAA,IACxD;AAEA,eAAW,CAAC,UAAU,OAAO,KAAK,OAAO,QAAQ,cAAc,GAAG;AAChE,YAAM,WAAWC,MAAK,KAAK,YAAY,QAAQ;AAC/C,YAAMD,IAAG,UAAUC,MAAK,QAAQ,QAAQ,CAAC;AACzC,YAAMD,IAAG,UAAU,UAAU,OAAO;AAAA,IACtC;AAAA,EACF;AAAA,EAEA,MAAM,kBAAkB,YAAY,SAAS;AAC3C,UAAM,WAAW;AAAA,MACf,gBAAgB,KAAK,uBAAuB,OAAO;AAAA,MACnD,iBAAiB,KAAK,kBAAkB;AAAA,MACxC,uBAAuB,KAAK,kBAAkB;AAAA,MAC9C,4BAA4B,KAAK,uBAAuB;AAAA,MACxD,uBAAuB,KAAK,kBAAkB;AAAA,MAC9C,2BAA2B,KAAK,sBAAsB;AAAA,MACtD,uBAAuB,KAAK,kBAAkB;AAAA,MAC9C,qBAAqB,KAAK,iBAAiB;AAAA,MAC3C,gBAAgB,KAAK,mBAAmB;AAAA,MACxC,aAAa,KAAK,kBAAkB;AAAA,IACtC;AAEA,eAAW,CAAC,UAAU,OAAO,KAAK,OAAO,QAAQ,QAAQ,GAAG;AAC1D,YAAM,WAAWC,MAAK,KAAK,YAAY,QAAQ;AAC/C,YAAMD,IAAG,UAAUC,MAAK,QAAQ,QAAQ,CAAC;AACzC,YAAMD,IAAG,UAAU,UAAU,OAAO;AAAA,IACtC;AAAA,EACF;AAAA,EAEA,MAAM,kBAAkB,YAAY,SAAS;AAE3C,UAAM,KAAK,oBAAoB,YAAY,OAAO;AAGlD,UAAM,WAAW;AAAA,MACf,uBAAuB,KAAK,kBAAkB;AAAA,MAC9C,sBAAsB,KAAK,iBAAiB;AAAA,MAC5C,oBAAoB,KAAK,eAAe;AAAA,MACxC,8BAA8B,KAAK,kBAAkB;AAAA,MACrD,wBAAwB,KAAK,kBAAkB;AAAA,MAC/C,0BAA0B,KAAK,oBAAoB;AAAA,MACnD,6BAA6B,KAAK,qBAAqB;AAAA,IACzD;AAEA,eAAW,CAAC,UAAU,OAAO,KAAK,OAAO,QAAQ,QAAQ,GAAG;AAC1D,YAAM,WAAWC,MAAK,KAAK,YAAY,QAAQ;AAC/C,YAAMD,IAAG,UAAUC,MAAK,QAAQ,QAAQ,CAAC;AACzC,YAAMD,IAAG,UAAU,UAAU,OAAO;AAAA,IACtC;AAAA,EACF;AAAA,EAEA,MAAM,oBAAoB,YAAY,SAAS;AAC7C,YAAQ,IAAID,OAAM,KAAK,mCAAmC,CAAC;AAE3D,UAAM,iBAAiB,KAAK,qBAAqB;AACjD,UAAM,aAAa,mBAAmB,QAAQ,gBAAgB;AAG9D,YAAQ,MAAM,UAAU;AAExB,QAAI;AACF,YAAM,EAAE,SAAS,IAAI,MAAM,OAAO,eAAe;AACjD,eAAS,YAAY,EAAE,OAAO,UAAU,CAAC;AAAA,IAC3C,SAAS,OAAO;AACd,cAAQ,KAAKA,OAAM,OAAO,qDAAqD,CAAC;AAChF,cAAQ,KAAKA,OAAM,OAAO,eAAe,UAAU,YAAY,CAAC;AAAA,IAClE;AAAA,EACF;AAAA,EAEA,uBAAuB;AACrB,QAAIC,IAAG,eAAe,WAAW,EAAG,QAAO;AAC3C,QAAIA,IAAG,eAAe,gBAAgB,EAAG,QAAO;AAChD,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,eAAe,SAAS;AAC5B,YAAQ,IAAID,OAAM,KAAK,sCAAsC,CAAC;AAE9D,QAAI;AAEF,YAAMM,aAAY,MAAM;AACxB,YAAMA,WAAU,UAAU;AAAA,QACxB,MAAM,SAAS,QAAQ,IAAI;AAAA,QAC3B,MAAM,QAAQ;AAAA,QACd,KAAK,QAAQ;AAAA,QACb,SAAS,QAAQ;AAAA,QACjB,SAAS,QAAQ;AAAA,MACnB,CAAC;AAAA,IACH,SAAS,OAAO;AACd,cAAQ,MAAMN,OAAM,IAAI,4BAA4B,GAAG,KAAK;AAC5D,cAAQ,KAAK,CAAC;AAAA,IAChB;AAAA,EACF;AAAA,EAEA,MAAM,aAAa,SAAS;AAC1B,YAAQ,IAAIA,OAAM,KAAK,6BAA6B,CAAC;AAErD,QAAI;AACF,YAAM,WAAW,IAAI,aAAa;AAAA,QAChC,WAAW,QAAQ;AAAA,QACnB,QAAQ,QAAQ;AAAA,QAChB,YAAY,QAAQ;AAAA,QACpB,SAAS,QAAQ;AAAA,MACnB,CAAC;AAED,YAAM,UAAU,MAAM,SAAS,MAAM;AAErC,UAAI,QAAQ,SAAS;AACnB,cAAM,KAAK,cAAc,OAAO;AAAA,MAClC;AAEA,cAAQ,IAAIA,OAAM,MAAM,sBAAsB,CAAC;AAAA,IAEjD,SAAS,OAAO;AACd,cAAQ,MAAMA,OAAM,IAAI,eAAe,GAAG,KAAK;AAC/C,cAAQ,KAAK,CAAC;AAAA,IAChB;AAAA,EACF;AAAA,EAEA,MAAM,SAAS,SAAS;AACtB,YAAQ,IAAIA,OAAM,KAAK,yBAAyB,CAAC;AAEjD,QAAI;AAEF,YAAM,aAAa,MAAM,OAAO,sBAAsB;AACtD,YAAM,WAAW,SAAS,OAAO;AAAA,IACnC,SAAS,OAAO;AACd,cAAQ,MAAMA,OAAM,IAAI,eAAe,GAAG,KAAK;AAC/C,cAAQ,KAAK,CAAC;AAAA,IAChB;AAAA,EACF;AAAA,EAEA,MAAM,iBAAiB,SAAS;AAC9B,YAAQ,IAAIA,OAAM,KAAK,mCAAmC,CAAC;AAE3D,QAAI;AAEF,UAAI,QAAQ,SAAS;AACnB,gBAAQ,IAAI,eAAe;AAAA,MAC7B;AAGA,cAAQ,IAAIA,OAAM,MAAM,4BAA4B,CAAC;AACrD,cAAQ,IAAIA,OAAM,OAAO,qCAAqC,CAAC;AAAA,IAEjE,SAAS,OAAO;AACd,cAAQ,MAAMA,OAAM,IAAI,uBAAuB,GAAG,KAAK;AACvD,cAAQ,KAAK,CAAC;AAAA,IAChB;AAAA,EACF;AAAA,EAEA,MAAM,mBAAmB,SAAS;AAChC,YAAQ,IAAIA,OAAM,KAAK,6CAA6C,CAAC;AAErE,QAAI;AAEF,UAAI,QAAQ,KAAK;AACf,cAAM,KAAK,kBAAkB,QAAQ,MAAM;AAAA,MAC7C;AAEA,UAAI,QAAQ,QAAQ;AAClB,cAAM,KAAK,qBAAqB,QAAQ,MAAM;AAAA,MAChD;AAEA,UAAI,QAAQ,SAAS;AACnB,cAAM,KAAK,sBAAsB,QAAQ,MAAM;AAAA,MACjD;AAEA,cAAQ,IAAIA,OAAM,MAAM,wBAAwB,CAAC;AAAA,IAEnD,SAAS,OAAO;AACd,cAAQ,MAAMA,OAAM,IAAI,mBAAmB,GAAG,KAAK;AACnD,cAAQ,KAAK,CAAC;AAAA,IAChB;AAAA,EACF;AAAA,EAEA,MAAM,eAAe,SAAS;AAC5B,YAAQ,IAAIA,OAAM,KAAK,2BAA2B,CAAC;AAEnD,QAAI;AACF,UAAI,QAAQ,SAAS;AACnB,cAAM,KAAK,cAAc;AAAA,MAC3B;AAEA,UAAI,QAAQ,MAAM;AAChB,cAAM,KAAK,aAAa;AAAA,MAC1B;AAEA,UAAI,QAAQ,OAAO;AACjB,cAAM,KAAK,cAAc;AAAA,MAC3B;AAEA,cAAQ,IAAIA,OAAM,MAAM,oCAAoC,CAAC;AAAA,IAE/D,SAAS,OAAO;AACd,cAAQ,MAAMA,OAAM,IAAI,6BAA6B,GAAG,KAAK;AAC7D,cAAQ,KAAK,CAAC;AAAA,IAChB;AAAA,EACF;AAAA,EAEA,MAAM,kBAAkB,SAAS;AAC/B,YAAQ,IAAIA,OAAM,KAAK,mCAAmC,CAAC;AAE3D,QAAI;AAEF,YAAM,KAAK,aAAa,EAAE,QAAQ,OAAO,CAAC;AAG1C,UAAI,QAAQ,aAAa,UAAU;AACjC,cAAM,KAAK,eAAe,OAAO;AAAA,MACnC,WAAW,QAAQ,aAAa,WAAW;AACzC,cAAM,KAAK,gBAAgB,OAAO;AAAA,MACpC,WAAW,QAAQ,aAAa,OAAO;AACrC,cAAM,KAAK,YAAY,OAAO;AAAA,MAChC,OAAO;AACL,gBAAQ,IAAIA,OAAM,OAAO,yCAAyC,CAAC;AAAA,MACrE;AAEA,cAAQ,IAAIA,OAAM,MAAM,2BAA2B,CAAC;AAAA,IAEtD,SAAS,OAAO;AACd,cAAQ,MAAMA,OAAM,IAAI,oBAAoB,GAAG,KAAK;AACpD,cAAQ,KAAK,CAAC;AAAA,IAChB;AAAA,EACF;AAAA,EAEA,MAAM,iBAAiB,SAAS;AAC9B,YAAQ,IAAIA,OAAM,KAAK,sCAAsC,CAAC;AAE9D,QAAI;AACF,UAAI,QAAQ,OAAO;AACjB,cAAM,KAAK,oBAAoB;AAAA,MACjC;AAEA,UAAI,QAAQ,QAAQ;AAClB,cAAM,KAAK,mBAAmB;AAAA,MAChC;AAEA,UAAI,QAAQ,OAAO;AACjB,cAAM,KAAK,cAAc;AAAA,MAC3B;AAEA,cAAQ,IAAIA,OAAM,MAAM,kCAAkC,CAAC;AAAA,IAE7D,SAAS,OAAO;AACd,cAAQ,MAAMA,OAAM,IAAI,2BAA2B,GAAG,KAAK;AAC3D,cAAQ,KAAK,CAAC;AAAA,IAChB;AAAA,EACF;AAAA;AAAA,EAGA,oBAAoB,SAAS;AAC3B,WAAO,KAAK,UAAU;AAAA,MACpB,MAAM;AAAA,MACN,SAAS;AAAA,MACT,aAAa;AAAA,MACb,MAAM;AAAA,MACN,SAAS;AAAA,QACP,OAAO;AAAA,QACP,SAAS;AAAA,QACT,QAAQ;AAAA,QACR,SAAS;AAAA,MACX;AAAA,MACA,cAAc;AAAA,QACZ,aAAa;AAAA,MACf;AAAA,MACA,iBAAiB;AAAA,QACf,eAAe;AAAA,MACjB;AAAA,IACF,GAAG,MAAM,CAAC;AAAA,EACZ;AAAA,EAEA,mBAAmB,SAAS;AAC1B,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUT;AAAA,EAEA,eAAe,SAAS;AACtB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBT;AAAA,EAEA,gBAAgB,SAAS;AACvB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBT;AAAA,EAEA,0BAA0B;AACxB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWT;AAAA,EAEA,0BAA0B;AACxB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOT;AAAA,EAEA,mBAAmB;AACjB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQT;AAAA,EAEA,oBAAoB;AAClB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA+BT;AAAA,EAEA,oBAAoB;AAClB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA,EACT;AAAA,EAEA,oBAAoB;AAClB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYT;AAAA;AAAA,EAGA,qBAAqB;AAAE,WAAO;AAAA,EAA4B;AAAA,EAC1D,yBAAyB;AAAE,WAAO;AAAA,EAAsB;AAAA,EACxD,oBAAoB;AAAE,WAAO;AAAA,EAAiB;AAAA,EAC9C,yBAAyB;AAAE,WAAO;AAAA,EAAsB;AAAA,EACxD,wBAAwB;AAAE,WAAO;AAAA,EAAqB;AAAA,EACtD,yBAAyB;AAAE,WAAO;AAAA,EAAsB;AAAA,EACxD,yBAAyB;AAAE,WAAO;AAAA,EAAM;AAAA,EACxC,oBAAoB;AAAE,WAAO;AAAA,EAAiB;AAAA,EAC9C,yBAAyB;AAAE,WAAO;AAAA,EAAsB;AAAA,EACxD,oBAAoB;AAAE,WAAO;AAAA,EAAiB;AAAA,EAC9C,wBAAwB;AAAE,WAAO;AAAA,EAAqB;AAAA,EACtD,oBAAoB;AAAE,WAAO;AAAA,EAAiB;AAAA,EAC9C,mBAAmB;AAAE,WAAO;AAAA,EAAgB;AAAA,EAC5C,qBAAqB;AAAE,WAAO;AAAA,EAA4B;AAAA,EAC1D,oBAAoB;AAAE,WAAO;AAAA,EAAiB;AAAA,EAC9C,oBAAoB;AAAE,WAAO;AAAA,EAAiB;AAAA,EAC9C,mBAAmB;AAAE,WAAO;AAAA,EAAgB;AAAA,EAC5C,iBAAiB;AAAE,WAAO;AAAA,EAAc;AAAA,EACxC,oBAAoB;AAAE,WAAO;AAAA,EAAiB;AAAA,EAC9C,oBAAoB;AAAE,WAAO;AAAA,EAAiB;AAAA,EAC9C,sBAAsB;AAAE,WAAO;AAAA,EAAmB;AAAA,EAClD,uBAAuB;AAAE,WAAO;AAAA,EAAoB;AAAA;AAAA,EAGpD,MAAM,kBAAkB,QAAQ;AAE9B,YAAQ,IAAI,iCAAiC;AAAA,EAC/C;AAAA,EAEA,MAAM,qBAAqB,QAAQ;AAEjC,YAAQ,IAAI,oCAAoC;AAAA,EAClD;AAAA,EAEA,MAAM,sBAAsB,QAAQ;AAElC,YAAQ,IAAI,qCAAqC;AAAA,EACnD;AAAA;AAAA,EAGA,MAAM,gBAAgB;AACpB,YAAQ,IAAI,4BAA4B;AAAA,EAC1C;AAAA,EAEA,MAAM,eAAe;AACnB,YAAQ,IAAI,0BAA0B;AAAA,EACxC;AAAA,EAEA,MAAM,gBAAgB;AACpB,YAAQ,IAAI,4BAA4B;AAAA,EAC1C;AAAA;AAAA,EAGA,MAAM,eAAe,SAAS;AAC5B,YAAQ,IAAI,oBAAoB;AAAA,EAClC;AAAA,EAEA,MAAM,gBAAgB,SAAS;AAC7B,YAAQ,IAAI,qBAAqB;AAAA,EACnC;AAAA,EAEA,MAAM,YAAY,SAAS;AACzB,YAAQ,IAAI,iBAAiB;AAAA,EAC/B;AAAA;AAAA,EAGA,MAAM,sBAAsB;AAC1B,YAAQ,IAAI,qCAAqC;AAAA,EACnD;AAAA,EAEA,MAAM,qBAAqB;AACzB,YAAQ,IAAI,kCAAkC;AAAA,EAChD;AAAA,EAEA,MAAM,gBAAgB;AACpB,YAAQ,IAAI,mCAAmC;AAAA,EACjD;AAAA;AAAA,EAGA,MAAM,cAAc,SAAS;AAC3B,YAAQ,IAAI,qBAAqB;AAAA,EAEnC;AAAA,EAEA,MAAM,iBAAiB,MAAM,MAAM,SAAS;AAC1C,UAAM,MAAM,QAAQ,IAAI;AACxB,UAAM,YAAY,QAAQ,MAAME,MAAK,QAAQ,QAAQ,GAAG,IAAIA,MAAK;AAAA,MAAQ;AAAA,MAAK;AAAA,MAC5E,SAAS,SAAS,UAAU,SAAS,UAAU,WAAW;AAAA,IAAY;AACxE,UAAMD,IAAG,UAAU,SAAS;AAC5B,UAAM,WAAW,SAAS,UAAU,GAAG,IAAI,UAAU,GAAG,WAAW,IAAI,CAAC;AACxE,UAAM,WAAWC,MAAK,KAAK,WAAW,QAAQ;AAC9C,QAAI,MAAMD,IAAG,WAAW,QAAQ,GAAG;AACjC,cAAQ,IAAID,OAAM,OAAO,qBAAqB,GAAG,QAAQ;AACzD;AAAA,IACF;AACA,UAAM,UAAU,KAAK,SAAS,MAAM,IAAI;AACxC,UAAMC,IAAG,UAAU,UAAU,OAAO;AACpC,YAAQ,IAAID,OAAM,MAAM,iBAAiB,GAAG,QAAQ;AAAA,EACtD;AAAA,EAEA,SAAS,MAAM,MAAM;AACnB,UAAM,WAAW,WAAW,IAAI;AAChC,QAAI,SAAS,aAAa;AACxB,aAAO,aAAa,QAAQ;AAAA;AAAA,kBAAoC,MAAM,QAAQ,CAAC,KAAM,QAAQ;AAAA;AAAA;AAAA,IAC/F;AACA,QAAI,SAAS,QAAQ;AACnB,aAAO,YAAa,MAAM,QAAQ,CAAC;AAAA,YAAkB,QAAQ;AAAA;AAAA,uBAA6C,MAAM,QAAQ,CAAC,KAAM,QAAQ;AAAA;AAAA;AAAA,IACzI;AACA,QAAI,SAAS,SAAS;AACpB,aAAO,SAAS,QAAQ;AAAA;AAAA;AAAA,IAC1B;AACA,WAAO;AAAA,EACT;AAAA,EAEA,MAAM;AACJ,SAAK,QAAQ,MAAM;AAAA,EACrB;AACF;AAEA,SAAS,WAAW,GAAG;AACrB,SAAO,KAAK,EAAE,SAAS,EAAE,OAAO,CAAC,EAAE,YAAY,IAAI,EAAE,MAAM,CAAC,IAAI;AAClE;AAEA,SAAS,MAAM,GAAG;AAChB,SAAO,EACJ,QAAQ,mBAAmB,OAAO,EAClC,QAAQ,QAAQ,GAAG,EACnB,YAAY;AACjB;AAGA,IAAI,YAAY,QAAQ,UAAU,QAAQ,KAAK,CAAC,CAAC,IAAI;AACnD,QAAM,MAAM,IAAI,YAAY;AAC5B,MAAI,IAAI;AACV;",
  "names": ["path", "path", "fs", "path", "__dirname", "fs", "path", "fileURLToPath", "__filename", "__dirname", "WebSocket", "chalk", "fs", "path", "fileURLToPath", "__filename", "__dirname", "devServer"]
}
