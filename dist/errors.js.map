{
  "version": 3,
  "sources": ["../src/errors.js"],
  "sourcesContent": ["// flux-core/src/errors.js\n// Error handling system for Flux compiler\n\nexport class FluxError extends Error {\n  constructor(message, details = null) {\n    super(message);\n    this.name = 'FluxError';\n    this.details = details;\n    this.timestamp = new Date();\n  }\n}\n\nexport class LexerError extends FluxError {\n  constructor(message, line, column, source) {\n    super(`Lexer Error: ${message}`);\n    this.name = 'LexerError';\n    this.line = line;\n    this.column = column;\n    this.source = source;\n  }\n  \n  format() {\n    return this.formatError('Lexer Error', this.message);\n  }\n}\n\nexport class ParserError extends FluxError {\n  constructor(message, token, expected = null) {\n    super(`Parser Error: ${message}`);\n    this.name = 'ParserError';\n    this.token = token;\n    this.expected = expected;\n    this.line = token ? token.line : 1;\n    this.column = token ? token.column : 1;\n  }\n  \n  format() {\n    let message = this.message;\n    if (this.expected) {\n      message += ` (expected ${this.expected})`;\n    }\n    return this.formatError('Parser Error', message);\n  }\n}\n\nexport class SemanticError extends FluxError {\n  constructor(message, node, suggestion = null) {\n    super(`Semantic Error: ${message}`);\n    this.name = 'SemanticError';\n    this.node = node;\n    this.suggestion = suggestion;\n    this.line = node ? node.location?.line : 1;\n    this.column = node ? node.location?.column : 1;\n  }\n  \n  format() {\n    let message = this.message;\n    if (this.suggestion) {\n      message += `\\nSuggestion: ${this.suggestion}`;\n    }\n    return this.formatError('Semantic Error', message);\n  }\n}\n\nexport class CodegenError extends FluxError {\n  constructor(message, node, context = null) {\n    super(`Code Generation Error: ${message}`);\n    this.name = 'CodegenError';\n    this.node = node;\n    this.context = context;\n    this.line = node ? node.location?.line : 1;\n    this.column = node ? node.location?.column : 1;\n  }\n  \n  format() {\n    let message = this.message;\n    if (this.context) {\n      message += `\\nContext: ${this.context}`;\n    }\n    return this.formatError('Code Generation Error', message);\n  }\n}\n\nexport class RuntimeError extends FluxError {\n  constructor(message, component = null, stack = null) {\n    super(`Runtime Error: ${message}`);\n    this.name = 'RuntimeError';\n    this.component = component;\n    this.stack = stack;\n  }\n  \n  format() {\n    let message = this.message;\n    if (this.component) {\n      message += `\\nComponent: ${this.component}`;\n    }\n    return this.formatError('Runtime Error', message);\n  }\n}\n\n// Error formatter utility\nexport class ErrorFormatter {\n  static formatError(error, source = null) {\n    if (error.format) {\n      return error.format();\n    }\n    \n    let output = `${error.name}: ${error.message}\\n`;\n    \n    if (error.line && error.column) {\n      output += `at line ${error.line}, column ${error.column}\\n`;\n      \n      if (source) {\n        output += this.formatSourceContext(source, error.line, error.column);\n      }\n    }\n    \n    if (error.stack) {\n      output += `\\nStack trace:\\n${error.stack}`;\n    }\n    \n    return output;\n  }\n  \n  static formatSourceContext(source, line, column, contextLines = 3) {\n    const lines = source.split('\\n');\n    const startLine = Math.max(1, line - contextLines);\n    const endLine = Math.min(lines.length, line + contextLines);\n    \n    let output = '\\nSource context:\\n';\n    \n    for (let i = startLine; i <= endLine; i++) {\n      const marker = i === line ? '>>> ' : '    ';\n      const lineNumber = i.toString().padStart(3);\n      const content = lines[i - 1] || '';\n      \n      output += `${marker}${lineNumber}: ${content}\\n`;\n      \n      if (i === line && column > 0) {\n        const indent = '    ' + ' '.repeat(column - 1);\n        output += `${indent}^\\n`;\n      }\n    }\n    \n    return output;\n  }\n  \n  static formatErrorList(errors, source = null) {\n    if (errors.length === 0) return '';\n    \n    let output = `\\n${errors.length} error(s) found:\\n\\n`;\n    \n    for (let i = 0; i < errors.length; i++) {\n      const error = errors[i];\n      output += `${i + 1}. ${this.formatError(error, source)}\\n`;\n      \n      if (i < errors.length - 1) {\n        output += '\\n';\n      }\n    }\n    \n    return output;\n  }\n}\n\n// Error collector for batch processing\nexport class ErrorCollector {\n  constructor() {\n    this.errors = [];\n    this.warnings = [];\n    this.maxErrors = 100; // Prevent infinite error loops\n  }\n  \n  addError(error) {\n    if (this.errors.length < this.maxErrors) {\n      this.errors.push(error);\n    }\n  }\n  \n  addWarning(warning) {\n    this.warnings.push(warning);\n  }\n  \n  hasErrors() {\n    return this.errors.length > 0;\n  }\n  \n  hasWarnings() {\n    return this.warnings.length > 0;\n  }\n  \n  clear() {\n    this.errors = [];\n    this.warnings = [];\n  }\n  \n  formatAll(source = null) {\n    let output = '';\n    \n    if (this.errors.length > 0) {\n      output += ErrorFormatter.formatErrorList(this.errors, source);\n    }\n    \n    if (this.warnings.length > 0) {\n      output += `\\n${this.warnings.length} warning(s):\\n`;\n      for (const warning of this.warnings) {\n        output += `- ${warning.message}\\n`;\n      }\n    }\n    \n    return output;\n  }\n}"],
  "mappings": ";AAGO,IAAM,YAAN,cAAwB,MAAM;AAAA,EACnC,YAAY,SAAS,UAAU,MAAM;AACnC,UAAM,OAAO;AACb,SAAK,OAAO;AACZ,SAAK,UAAU;AACf,SAAK,YAAY,oBAAI,KAAK;AAAA,EAC5B;AACF;AAEO,IAAM,aAAN,cAAyB,UAAU;AAAA,EACxC,YAAY,SAAS,MAAM,QAAQ,QAAQ;AACzC,UAAM,gBAAgB,OAAO,EAAE;AAC/B,SAAK,OAAO;AACZ,SAAK,OAAO;AACZ,SAAK,SAAS;AACd,SAAK,SAAS;AAAA,EAChB;AAAA,EAEA,SAAS;AACP,WAAO,KAAK,YAAY,eAAe,KAAK,OAAO;AAAA,EACrD;AACF;AAEO,IAAM,cAAN,cAA0B,UAAU;AAAA,EACzC,YAAY,SAAS,OAAO,WAAW,MAAM;AAC3C,UAAM,iBAAiB,OAAO,EAAE;AAChC,SAAK,OAAO;AACZ,SAAK,QAAQ;AACb,SAAK,WAAW;AAChB,SAAK,OAAO,QAAQ,MAAM,OAAO;AACjC,SAAK,SAAS,QAAQ,MAAM,SAAS;AAAA,EACvC;AAAA,EAEA,SAAS;AACP,QAAI,UAAU,KAAK;AACnB,QAAI,KAAK,UAAU;AACjB,iBAAW,cAAc,KAAK,QAAQ;AAAA,IACxC;AACA,WAAO,KAAK,YAAY,gBAAgB,OAAO;AAAA,EACjD;AACF;AAEO,IAAM,gBAAN,cAA4B,UAAU;AAAA,EAC3C,YAAY,SAAS,MAAM,aAAa,MAAM;AAC5C,UAAM,mBAAmB,OAAO,EAAE;AAClC,SAAK,OAAO;AACZ,SAAK,OAAO;AACZ,SAAK,aAAa;AAClB,SAAK,OAAO,OAAO,KAAK,UAAU,OAAO;AACzC,SAAK,SAAS,OAAO,KAAK,UAAU,SAAS;AAAA,EAC/C;AAAA,EAEA,SAAS;AACP,QAAI,UAAU,KAAK;AACnB,QAAI,KAAK,YAAY;AACnB,iBAAW;AAAA,cAAiB,KAAK,UAAU;AAAA,IAC7C;AACA,WAAO,KAAK,YAAY,kBAAkB,OAAO;AAAA,EACnD;AACF;AAEO,IAAM,eAAN,cAA2B,UAAU;AAAA,EAC1C,YAAY,SAAS,MAAM,UAAU,MAAM;AACzC,UAAM,0BAA0B,OAAO,EAAE;AACzC,SAAK,OAAO;AACZ,SAAK,OAAO;AACZ,SAAK,UAAU;AACf,SAAK,OAAO,OAAO,KAAK,UAAU,OAAO;AACzC,SAAK,SAAS,OAAO,KAAK,UAAU,SAAS;AAAA,EAC/C;AAAA,EAEA,SAAS;AACP,QAAI,UAAU,KAAK;AACnB,QAAI,KAAK,SAAS;AAChB,iBAAW;AAAA,WAAc,KAAK,OAAO;AAAA,IACvC;AACA,WAAO,KAAK,YAAY,yBAAyB,OAAO;AAAA,EAC1D;AACF;AAEO,IAAM,eAAN,cAA2B,UAAU;AAAA,EAC1C,YAAY,SAAS,YAAY,MAAM,QAAQ,MAAM;AACnD,UAAM,kBAAkB,OAAO,EAAE;AACjC,SAAK,OAAO;AACZ,SAAK,YAAY;AACjB,SAAK,QAAQ;AAAA,EACf;AAAA,EAEA,SAAS;AACP,QAAI,UAAU,KAAK;AACnB,QAAI,KAAK,WAAW;AAClB,iBAAW;AAAA,aAAgB,KAAK,SAAS;AAAA,IAC3C;AACA,WAAO,KAAK,YAAY,iBAAiB,OAAO;AAAA,EAClD;AACF;AAGO,IAAM,iBAAN,MAAqB;AAAA,EAC1B,OAAO,YAAY,OAAO,SAAS,MAAM;AACvC,QAAI,MAAM,QAAQ;AAChB,aAAO,MAAM,OAAO;AAAA,IACtB;AAEA,QAAI,SAAS,GAAG,MAAM,IAAI,KAAK,MAAM,OAAO;AAAA;AAE5C,QAAI,MAAM,QAAQ,MAAM,QAAQ;AAC9B,gBAAU,WAAW,MAAM,IAAI,YAAY,MAAM,MAAM;AAAA;AAEvD,UAAI,QAAQ;AACV,kBAAU,KAAK,oBAAoB,QAAQ,MAAM,MAAM,MAAM,MAAM;AAAA,MACrE;AAAA,IACF;AAEA,QAAI,MAAM,OAAO;AACf,gBAAU;AAAA;AAAA,EAAmB,MAAM,KAAK;AAAA,IAC1C;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,OAAO,oBAAoB,QAAQ,MAAM,QAAQ,eAAe,GAAG;AACjE,UAAM,QAAQ,OAAO,MAAM,IAAI;AAC/B,UAAM,YAAY,KAAK,IAAI,GAAG,OAAO,YAAY;AACjD,UAAM,UAAU,KAAK,IAAI,MAAM,QAAQ,OAAO,YAAY;AAE1D,QAAI,SAAS;AAEb,aAAS,IAAI,WAAW,KAAK,SAAS,KAAK;AACzC,YAAM,SAAS,MAAM,OAAO,SAAS;AACrC,YAAM,aAAa,EAAE,SAAS,EAAE,SAAS,CAAC;AAC1C,YAAM,UAAU,MAAM,IAAI,CAAC,KAAK;AAEhC,gBAAU,GAAG,MAAM,GAAG,UAAU,KAAK,OAAO;AAAA;AAE5C,UAAI,MAAM,QAAQ,SAAS,GAAG;AAC5B,cAAM,SAAS,SAAS,IAAI,OAAO,SAAS,CAAC;AAC7C,kBAAU,GAAG,MAAM;AAAA;AAAA,MACrB;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,OAAO,gBAAgB,QAAQ,SAAS,MAAM;AAC5C,QAAI,OAAO,WAAW,EAAG,QAAO;AAEhC,QAAI,SAAS;AAAA,EAAK,OAAO,MAAM;AAAA;AAAA;AAE/B,aAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACtC,YAAM,QAAQ,OAAO,CAAC;AACtB,gBAAU,GAAG,IAAI,CAAC,KAAK,KAAK,YAAY,OAAO,MAAM,CAAC;AAAA;AAEtD,UAAI,IAAI,OAAO,SAAS,GAAG;AACzB,kBAAU;AAAA,MACZ;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AACF;AAGO,IAAM,iBAAN,MAAqB;AAAA,EAC1B,cAAc;AACZ,SAAK,SAAS,CAAC;AACf,SAAK,WAAW,CAAC;AACjB,SAAK,YAAY;AAAA,EACnB;AAAA,EAEA,SAAS,OAAO;AACd,QAAI,KAAK,OAAO,SAAS,KAAK,WAAW;AACvC,WAAK,OAAO,KAAK,KAAK;AAAA,IACxB;AAAA,EACF;AAAA,EAEA,WAAW,SAAS;AAClB,SAAK,SAAS,KAAK,OAAO;AAAA,EAC5B;AAAA,EAEA,YAAY;AACV,WAAO,KAAK,OAAO,SAAS;AAAA,EAC9B;AAAA,EAEA,cAAc;AACZ,WAAO,KAAK,SAAS,SAAS;AAAA,EAChC;AAAA,EAEA,QAAQ;AACN,SAAK,SAAS,CAAC;AACf,SAAK,WAAW,CAAC;AAAA,EACnB;AAAA,EAEA,UAAU,SAAS,MAAM;AACvB,QAAI,SAAS;AAEb,QAAI,KAAK,OAAO,SAAS,GAAG;AAC1B,gBAAU,eAAe,gBAAgB,KAAK,QAAQ,MAAM;AAAA,IAC9D;AAEA,QAAI,KAAK,SAAS,SAAS,GAAG;AAC5B,gBAAU;AAAA,EAAK,KAAK,SAAS,MAAM;AAAA;AACnC,iBAAW,WAAW,KAAK,UAAU;AACnC,kBAAU,KAAK,QAAQ,OAAO;AAAA;AAAA,MAChC;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AACF;",
  "names": []
}
