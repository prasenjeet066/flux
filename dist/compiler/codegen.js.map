{
  "version": 3,
  "sources": ["../../src/compiler/codegen.js"],
  "sourcesContent": ["// flux-core/src/compiler/codegen.js\n// Code generator that converts Flux AST to optimized JavaScript\n\nimport * as AST from '../ast/nodes.js';\n\nexport class FluxCodeGenerator {\n  constructor(options = {}) {\n    this.options = {\n      target: 'modern', // 'modern' or 'legacy'\n      minify: false,\n      sourceMaps: true,\n      optimizations: true,\n      ...options\n    };\n    this.indent = 0;\n    this.output = [];\n    this.imports = new Set();\n    this.componentCount = 0;\n    this.storeCount = 0;\n    this.errors = [];\n  }\n\n  generate(ast) {\n    this.output = [];\n    this.indent = 0;\n    \n    // Add runtime imports\n    this.addLine(\"import { FluxRuntime, Component, Store, createReactiveState, createEffect, createComputed } from '@flux/runtime';\");\n    this.addLine(\"import { createElement, Fragment } from '@flux/jsx';\");\n    this.addLine(\"\");\n    \n    this.visit(ast);\n    \n    return this.output.join('\\n');\n  }\n\n  visit(node) {\n    const methodName = `visit${node.type}`;\n    if (this[methodName]) {\n      return this[methodName](node);\n    }\n    \n    console.warn(`No visitor method for ${node.type}`);\n    return '';\n  }\n\n  visitProgram(node) {\n    for (const statement of node.body) {\n      this.visit(statement);\n      this.addLine(\"\");\n    }\n  }\n\n  visitImportDeclaration(node) {\n    const specifiers = node.specifiers.map(spec => {\n      if (spec.imported.name === 'default') {\n        return spec.local.name;\n      }\n      return spec.imported.name === spec.local.name \n        ? spec.imported.name \n        : `${spec.imported.name} as ${spec.local.name}`;\n    }).join(', ');\n    \n    this.addLine(`import { ${specifiers} } from ${JSON.stringify(node.source.value)};`);\n  }\n\n  visitExportDeclaration(node) {\n    this.add(\"export \");\n    this.visit(node.declaration);\n  }\n\n  visitComponentDeclaration(node) {\n    const componentName = node.name.name;\n    this.componentCount++;\n    \n    this.addLine(`class ${componentName} extends Component {`);\n    this.indent++;\n    \n    // Constructor\n    this.addLine(\"constructor(props = {}) {\");\n    this.indent++;\n    this.addLine(\"super(props);\");\n    this.addLine(\"\");\n    \n    // Initialize state\n    if (node.state.length > 0) {\n      this.addLine(\"// Initialize state\");\n      for (const stateDecl of node.state) {\n        const name = stateDecl.name.name;\n        const initialValue = stateDecl.initialValue \n          ? this.visit(stateDecl.initialValue) \n          : 'null';\n        \n        this.addLine(`this.${name} = createReactiveState(${initialValue});`);\n      }\n      this.addLine(\"\");\n    }\n    \n    // Initialize computed properties\n    if (node.computed.length > 0) {\n      this.addLine(\"// Initialize computed properties\");\n      for (const computedDecl of node.computed) {\n        const name = computedDecl.name.name;\n        this.addLine(`this.${name} = createComputed(() => {`);\n        this.indent++;\n        this.visit(computedDecl.body);\n        this.indent--;\n        this.addLine(\"});\");\n      }\n      this.addLine(\"\");\n    }\n    \n    // Initialize effects\n    if (node.effects.length > 0) {\n      this.addLine(\"// Initialize effects\");\n      for (let i = 0; i < node.effects.length; i++) {\n        const effect = node.effects[i];\n        const deps = effect.dependencies.map(dep => this.visit(dep)).join(', ');\n        \n        this.addLine(`this.effect${i} = createEffect(() => {`);\n        this.indent++;\n        this.visit(effect.body);\n        this.indent--;\n        this.addLine(`}, [${deps}]);`);\n      }\n      this.addLine(\"\");\n    }\n    \n    this.indent--;\n    this.addLine(\"}\");\n    this.addLine(\"\");\n    \n    // Generate methods\n    for (const method of node.methods) {\n      this.visitMethodDeclaration(method);\n    }\n    \n    // Generate lifecycle methods\n    for (const lifecycle of node.lifecycle) {\n      this.visitLifecycleDeclaration(lifecycle);\n    }\n    \n    // Generate render method\n    if (node.render) {\n      this.visitRenderDeclaration(node.render);\n    }\n    \n    this.indent--;\n    this.addLine(\"}\");\n    this.addLine(\"\");\n    \n    // Add component registration\n    this.addLine(`${componentName}.displayName = '${componentName}';`);\n    \n    // Handle route decorators\n    const routeDecorator = node.decorators.find(d => d.name.name === 'route');\n    if (routeDecorator) {\n      const path = routeDecorator.arguments[0];\n      this.addLine(`FluxRuntime.registerRoute(${this.visit(path)}, ${componentName});`);\n    }\n  }\n\n  visitStoreDeclaration(node) {\n    const storeName = node.name.name;\n    this.storeCount++;\n    \n    this.addLine(`class ${storeName} extends Store {`);\n    this.indent++;\n    \n    // Constructor\n    this.addLine(\"constructor() {\");\n    this.indent++;\n    this.addLine(\"super();\");\n    this.addLine(\"\");\n    \n    // Initialize state\n    if (node.state.length > 0) {\n      this.addLine(\"// Initialize state\");\n      for (const stateDecl of node.state) {\n        const name = stateDecl.name.name;\n        const initialValue = stateDecl.initialValue \n          ? this.visit(stateDecl.initialValue) \n          : 'null';\n        \n        this.addLine(`this.${name} = createReactiveState(${initialValue});`);\n      }\n      this.addLine(\"\");\n    }\n    \n    // Initialize computed properties\n    if (node.computed.length > 0) {\n      this.addLine(\"// Initialize computed properties\");\n      for (const computedDecl of node.computed) {\n        const name = computedDecl.name.name;\n        this.addLine(`this.${name} = createComputed(() => {`);\n        this.indent++;\n        this.visit(computedDecl.body);\n        this.indent--;\n        this.addLine(\"});\");\n      }\n      this.addLine(\"\");\n    }\n    \n    this.indent--;\n    this.addLine(\"}\");\n    this.addLine(\"\");\n    \n    // Generate actions\n    for (const action of node.actions) {\n      this.visitActionDeclaration(action);\n    }\n    \n    this.indent--;\n    this.addLine(\"}\");\n    this.addLine(\"\");\n    \n    // Create singleton instance\n    this.addLine(`const ${storeName}Instance = new ${storeName}();`);\n    this.addLine(`export { ${storeName}Instance as ${storeName} };`);\n  }\n\n  visitMethodDeclaration(node) {\n    const name = node.name.name;\n    const asyncKeyword = node.isAsync ? 'async ' : '';\n    const params = node.parameters.map(p => p.name.name).join(', ');\n    \n    this.addLine(`${asyncKeyword}${name}(${params}) {`);\n    this.indent++;\n    this.visit(node.body);\n    this.indent--;\n    this.addLine(\"}\");\n    this.addLine(\"\");\n  }\n\n  visitActionDeclaration(node) {\n    const name = node.name.name;\n    const asyncKeyword = node.isAsync ? 'async ' : '';\n    const params = node.parameters.map(p => p.name.name).join(', ');\n    \n    this.addLine(`${asyncKeyword}${name}(${params}) {`);\n    this.indent++;\n    this.visit(node.body);\n    this.indent--;\n    this.addLine(\"}\");\n    this.addLine(\"\");\n  }\n\n  visitLifecycleDeclaration(node) {\n    const phase = node.phase;\n    const asyncKeyword = node.isAsync ? 'async ' : '';\n    \n    this.addLine(`${asyncKeyword}${phase}() {`);\n    this.indent++;\n    this.visit(node.body);\n    this.indent--;\n    this.addLine(\"}\");\n    this.addLine(\"\");\n  }\n\n  visitRenderDeclaration(node) {\n    this.addLine(\"render() {\");\n    this.indent++;\n    this.addLine(\"return (\");\n    this.indent++;\n    this.visit(node.body);\n    this.indent--;\n    this.addLine(\");\");\n    this.indent--;\n    this.addLine(\"}\");\n    this.addLine(\"\");\n  }\n\n  visitBlockStatement(node) {\n    for (let i = 0; i < node.body.length; i++) {\n      this.visit(node.body[i]);\n      \n      // Add semicolon for expression statements\n      if (node.body[i].type === 'ExpressionStatement') {\n        this.add(';');\n      }\n      \n      if (i < node.body.length - 1) {\n        this.addLine(\"\");\n      }\n    }\n  }\n\n  visitExpressionStatement(node) {\n    this.add(this.getIndent());\n    this.visit(node.expression);\n  }\n\n  visitIfStatement(node) {\n    this.add(`${this.getIndent()}if (`);\n    this.visit(node.test);\n    this.add(') ');\n    this.visit(node.consequent);\n    \n    if (node.alternate) {\n      this.add(' else ');\n      this.visit(node.alternate);\n    }\n  }\n\n  visitWhileStatement(node) {\n    this.add(`${this.getIndent()}while (`);\n    this.visit(node.test);\n    this.add(') ');\n    this.visit(node.body);\n  }\n\n  visitForStatement(node) {\n    this.add(`${this.getIndent()}for (`);\n    if (node.init) this.visit(node.init);\n    this.add('; ');\n    if (node.test) this.visit(node.test);\n    this.add('; ');\n    if (node.update) this.visit(node.update);\n    this.add(') ');\n    this.visit(node.body);\n  }\n\n  visitReturnStatement(node) {\n    this.add(`${this.getIndent()}return`);\n    if (node.argument) {\n      this.add(' ');\n      this.visit(node.argument);\n    }\n  }\n\n  visitTryStatement(node) {\n    this.add(`${this.getIndent()}try `);\n    this.visit(node.block);\n    \n    if (node.handler) {\n      this.add(` catch (${node.handler.param.name}) `);\n      this.visit(node.handler.body);\n    }\n    \n    if (node.finalizer) {\n      this.add(' finally ');\n      this.visit(node.finalizer);\n    }\n  }\n\n  visitBinaryExpression(node) {\n    this.visit(node.left);\n    this.add(` ${node.operator} `);\n    this.visit(node.right);\n  }\n\n  visitUnaryExpression(node) {\n    this.add(node.operator);\n    this.visit(node.operand);\n  }\n\n  visitAssignmentExpression(node) {\n    // Handle reactive state assignments\n    if (node.left.type === 'MemberExpression' && \n        node.left.object.type === 'Identifier' &&\n        node.left.object.name === 'this') {\n      \n      // Convert this.state = value to this.state.value = value\n      this.add('this.');\n      this.visit(node.left.property);\n      this.add('.value ');\n      this.add(node.operator);\n      this.add(' ');\n      this.visit(node.right);\n    } else {\n      this.visit(node.left);\n      this.add(` ${node.operator} `);\n      this.visit(node.right);\n    }\n  }\n\n  visitCallExpression(node) {\n    this.visit(node.callee);\n    this.add('(');\n    \n    for (let i = 0; i < node.arguments.length; i++) {\n      this.visit(node.arguments[i]);\n      if (i < node.arguments.length - 1) {\n        this.add(', ');\n      }\n    }\n    \n    this.add(')');\n  }\n\n  visitMemberExpression(node) {\n    this.visit(node.object);\n    \n    if (node.computed) {\n      this.add('[');\n      this.visit(node.property);\n      this.add(']');\n    } else {\n      this.add('.');\n      this.visit(node.property);\n    }\n  }\n\n  visitConditionalExpression(node) {\n    this.visit(node.test);\n    this.add(' ? ');\n    this.visit(node.consequent);\n    this.add(' : ');\n    this.visit(node.alternate);\n  }\n\n  visitArrayExpression(node) {\n    this.add('[');\n    \n    for (let i = 0; i < node.elements.length; i++) {\n      this.visit(node.elements[i]);\n      if (i < node.elements.length - 1) {\n        this.add(', ');\n      }\n    }\n    \n    this.add(']');\n  }\n\n  visitObjectExpression(node) {\n    this.add('{');\n    \n    if (node.properties.length > 0) {\n      this.addLine(\"\");\n      this.indent++;\n      \n      for (let i = 0; i < node.properties.length; i++) {\n        this.add(this.getIndent());\n        this.visit(node.properties[i]);\n        if (i < node.properties.length - 1) {\n          this.add(',');\n        }\n        this.addLine(\"\");\n      }\n      \n      this.indent--;\n      this.add(this.getIndent());\n    }\n    \n    this.add('}');\n  }\n\n  visitProperty(node) {\n    this.visit(node.key);\n    this.add(': ');\n    this.visit(node.value);\n  }\n\n  visitLiteral(node) {\n    if (typeof node.value === 'string') {\n      this.add(JSON.stringify(node.value));\n    } else {\n      this.add(String(node.value));\n    }\n  }\n\n  visitIdentifier(node) {\n    // Handle reactive state access\n    if (this.isInRenderContext() && this.isReactiveState(node.name)) {\n      this.add(`this.${node.name}.value`);\n    } else {\n      this.add(node.name);\n    }\n  }\n\n  visitJSXElement(node) {\n    this.add('createElement(');\n    \n    // Element name\n    if (node.openingElement.name.name.charAt(0).toLowerCase() === node.openingElement.name.name.charAt(0)) {\n      // HTML element\n      this.add(`'${node.openingElement.name.name}'`);\n    } else {\n      // Component\n      this.add(node.openingElement.name.name);\n    }\n    \n    // Props\n    if (node.openingElement.attributes.length > 0) {\n      this.add(', {');\n      \n      for (let i = 0; i < node.openingElement.attributes.length; i++) {\n        const attr = node.openingElement.attributes[i];\n        this.add(`${attr.name.name}: `);\n        \n        if (attr.value.type === 'JSXExpressionContainer') {\n          this.visit(attr.value.expression);\n        } else {\n          this.visit(attr.value);\n        }\n        \n        if (i < node.openingElement.attributes.length - 1) {\n          this.add(', ');\n        }\n      }\n      \n      this.add('}');\n    } else {\n      this.add(', null');\n    }\n    \n    // Children\n    if (node.children.length > 0) {\n      for (const child of node.children) {\n        this.add(', ');\n        \n        if (child.type === 'JSXText') {\n          this.add(JSON.stringify(child.value));\n        } else if (child.type === 'JSXExpressionContainer') {\n          this.visit(child.expression);\n        } else {\n          this.visit(child);\n        }\n      }\n    }\n    \n    this.add(')');\n  }\n\n  visitJSXExpressionContainer(node) {\n    this.visit(node.expression);\n  }\n\n  visitJSXText(node) {\n    this.add(JSON.stringify(node.value));\n  }\n\n  // Utility methods\n  isInRenderContext() {\n    // Simple heuristic - in a real implementation, we'd track context properly\n    return true;\n  }\n\n  isReactiveState(name) {\n    // Check if this identifier refers to a reactive state variable\n    // In a real implementation, we'd have proper scope tracking\n    return true;\n  }\n\n  add(text) {\n    this.output.push(text);\n  }\n\n  addLine(text = \"\") {\n    this.output.push(text + '\\n');\n  }\n\n  getIndent() {\n    return '  '.repeat(this.indent);\n  }\n}\n\n// Runtime optimization helpers\nexport class FluxOptimizer {\n  constructor() {\n    this.optimizations = [\n      this.eliminateDeadCode,\n      this.inlineConstants,\n      this.optimizeReactiveUpdates,\n      this.bundleComponents\n    ];\n  }\n\n  optimize(ast) {\n    let optimizedAst = ast;\n    \n    for (const optimization of this.optimizations) {\n      optimizedAst = optimization(optimizedAst);\n    }\n    \n    return optimizedAst;\n  }\n\n  eliminateDeadCode(ast) {\n    // Remove unused variables, functions, and imports\n    return ast;\n  }\n\n  inlineConstants(ast) {\n    // Inline constant values at compile time\n    return ast;\n  }\n\n  optimizeReactiveUpdates(ast) {\n    // Minimize reactive dependency tracking\n    return ast;\n  }\n\n  bundleComponents(ast) {\n    // Optimize component bundling and code splitting\n    return ast;\n  }\n}"],
  "mappings": "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",
  "names": []
}
